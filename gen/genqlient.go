// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// AddTemplateAddTemplateTemplateChangeStatus includes the requested fields of the GraphQL type TemplateChangeStatus.
type AddTemplateAddTemplateTemplateChangeStatus struct {
	Id string `json:"id"`
	// True means change successfully.
	Status  bool   `json:"status"`
	Message string `json:"message"`
}

// GetId returns AddTemplateAddTemplateTemplateChangeStatus.Id, and is useful for accessing the field via an interface.
func (v *AddTemplateAddTemplateTemplateChangeStatus) GetId() string { return v.Id }

// GetStatus returns AddTemplateAddTemplateTemplateChangeStatus.Status, and is useful for accessing the field via an interface.
func (v *AddTemplateAddTemplateTemplateChangeStatus) GetStatus() bool { return v.Status }

// GetMessage returns AddTemplateAddTemplateTemplateChangeStatus.Message, and is useful for accessing the field via an interface.
func (v *AddTemplateAddTemplateTemplateChangeStatus) GetMessage() string { return v.Message }

// AddTemplateResponse is returned by AddTemplate on success.
type AddTemplateResponse struct {
	AddTemplate AddTemplateAddTemplateTemplateChangeStatus `json:"addTemplate"`
}

// GetAddTemplate returns AddTemplateResponse.AddTemplate, and is useful for accessing the field via an interface.
func (v *AddTemplateResponse) GetAddTemplate() AddTemplateAddTemplateTemplateChangeStatus {
	return v.AddTemplate
}

type AlarmTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns AlarmTag.Key, and is useful for accessing the field via an interface.
func (v *AlarmTag) GetKey() string { return v.Key }

// GetValue returns AlarmTag.Value, and is useful for accessing the field via an interface.
func (v *AlarmTag) GetValue() string { return v.Value }

// AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation includes the requested fields of the GraphQL type EBPFProfilingAnalyzation.
type AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation struct {
	// if not empty means backend has information gave to the user
	Tip string `json:"tip"`
	// profiling analyzed trees
	Trees []AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree `json:"trees"`
}

// GetTip returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation.Tip, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation) GetTip() string {
	return v.Tip
}

// GetTrees returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation.Trees, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation) GetTrees() []AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree {
	return v.Trees
}

// AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree includes the requested fields of the GraphQL type EBPFProfilingTree.
type AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree struct {
	// profiling stack elements
	Elements []AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement `json:"elements"`
}

// GetElements returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree.Elements, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTree) GetElements() []AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement {
	return v.Elements
}

// AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement includes the requested fields of the GraphQL type EBPFProfilingStackElement.
type AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement struct {
	// the element ID
	Id string `json:"id"`
	// the parent element ID
	ParentId string `json:"parentId"`
	// stack element symbol name
	Symbol string `json:"symbol"`
	// stack element type
	StackType EBPFProfilingStackType `json:"stackType"`
	// current stack element total dump count
	DumpCount int64 `json:"dumpCount"`
}

// GetId returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement.Id, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement) GetId() string {
	return v.Id
}

// GetParentId returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement.ParentId, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement) GetParentId() string {
	return v.ParentId
}

// GetSymbol returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement.Symbol, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement) GetSymbol() string {
	return v.Symbol
}

// GetStackType returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement.StackType, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement) GetStackType() EBPFProfilingStackType {
	return v.StackType
}

// GetDumpCount returns AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement.DumpCount, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzationTreesEBPFProfilingTreeElementsEBPFProfilingStackElement) GetDumpCount() int64 {
	return v.DumpCount
}

// AnalysisEBPFProfilingResultResponse is returned by AnalysisEBPFProfilingResult on success.
type AnalysisEBPFProfilingResultResponse struct {
	// analyze the profiling schedule
	// aggregateType is "EBPFProfilingAnalyzeAggregateType#COUNT" as default.
	AnalysisEBPFProfilingResult AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation `json:"analysisEBPFProfilingResult"`
}

// GetAnalysisEBPFProfilingResult returns AnalysisEBPFProfilingResultResponse.AnalysisEBPFProfilingResult, and is useful for accessing the field via an interface.
func (v *AnalysisEBPFProfilingResultResponse) GetAnalysisEBPFProfilingResult() AnalysisEBPFProfilingResultAnalysisEBPFProfilingResultEBPFProfilingAnalyzation {
	return v.AnalysisEBPFProfilingResult
}

type BatchMetricConditions struct {
	Name string   `json:"name"`
	Ids  []string `json:"ids"`
}

// GetName returns BatchMetricConditions.Name, and is useful for accessing the field via an interface.
func (v *BatchMetricConditions) GetName() string { return v.Name }

// GetIds returns BatchMetricConditions.Ids, and is useful for accessing the field via an interface.
func (v *BatchMetricConditions) GetIds() []string { return v.Ids }

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Represent the conditions used for query BrowserErrorLogBrief
type BrowserErrorLogQueryCondition struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	ServiceId string `json:"serviceId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	ServiceVersionId string `json:"serviceVersionId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	PagePathId string `json:"pagePathId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	Category ErrorCategory `json:"category"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	QueryDuration Duration `json:"queryDuration"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Represent the conditions used for query BrowserErrorLogBrief
	Paging Pagination `json:"paging"`
}

// GetServiceId returns BrowserErrorLogQueryCondition.ServiceId, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetServiceId() string { return v.ServiceId }

// GetServiceVersionId returns BrowserErrorLogQueryCondition.ServiceVersionId, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetServiceVersionId() string { return v.ServiceVersionId }

// GetPagePathId returns BrowserErrorLogQueryCondition.PagePathId, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetPagePathId() string { return v.PagePathId }

// GetCategory returns BrowserErrorLogQueryCondition.Category, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetCategory() ErrorCategory { return v.Category }

// GetQueryDuration returns BrowserErrorLogQueryCondition.QueryDuration, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetQueryDuration() Duration { return v.QueryDuration }

// GetPaging returns BrowserErrorLogQueryCondition.Paging, and is useful for accessing the field via an interface.
func (v *BrowserErrorLogQueryCondition) GetPaging() Pagination { return v.Paging }

// ChangeTemplateChangeTemplateTemplateChangeStatus includes the requested fields of the GraphQL type TemplateChangeStatus.
type ChangeTemplateChangeTemplateTemplateChangeStatus struct {
	Id string `json:"id"`
	// True means change successfully.
	Status  bool   `json:"status"`
	Message string `json:"message"`
}

// GetId returns ChangeTemplateChangeTemplateTemplateChangeStatus.Id, and is useful for accessing the field via an interface.
func (v *ChangeTemplateChangeTemplateTemplateChangeStatus) GetId() string { return v.Id }

// GetStatus returns ChangeTemplateChangeTemplateTemplateChangeStatus.Status, and is useful for accessing the field via an interface.
func (v *ChangeTemplateChangeTemplateTemplateChangeStatus) GetStatus() bool { return v.Status }

// GetMessage returns ChangeTemplateChangeTemplateTemplateChangeStatus.Message, and is useful for accessing the field via an interface.
func (v *ChangeTemplateChangeTemplateTemplateChangeStatus) GetMessage() string { return v.Message }

// ChangeTemplateResponse is returned by ChangeTemplate on success.
type ChangeTemplateResponse struct {
	ChangeTemplate ChangeTemplateChangeTemplateTemplateChangeStatus `json:"changeTemplate"`
}

// GetChangeTemplate returns ChangeTemplateResponse.ChangeTemplate, and is useful for accessing the field via an interface.
func (v *ChangeTemplateResponse) GetChangeTemplate() ChangeTemplateChangeTemplateTemplateChangeStatus {
	return v.ChangeTemplate
}

// CheckHealthCheckHealthHealthStatus includes the requested fields of the GraphQL type HealthStatus.
type CheckHealthCheckHealthHealthStatus struct {
	// 0 means healthy, more than 0 means unhealthy
	// and less than 0 means oap doesn't startup.
	Score int `json:"score"`
	// some details about the score value.
	Details string `json:"details"`
}

// GetScore returns CheckHealthCheckHealthHealthStatus.Score, and is useful for accessing the field via an interface.
func (v *CheckHealthCheckHealthHealthStatus) GetScore() int { return v.Score }

// GetDetails returns CheckHealthCheckHealthHealthStatus.Details, and is useful for accessing the field via an interface.
func (v *CheckHealthCheckHealthHealthStatus) GetDetails() string { return v.Details }

// CheckHealthResponse is returned by CheckHealth on success.
type CheckHealthResponse struct {
	// Query Health Checker module for the status of OAP server
	CheckHealth CheckHealthCheckHealthHealthStatus `json:"checkHealth"`
}

// GetCheckHealth returns CheckHealthResponse.CheckHealth, and is useful for accessing the field via an interface.
func (v *CheckHealthResponse) GetCheckHealth() CheckHealthCheckHealthHealthStatus {
	return v.CheckHealth
}

type ContentType string

const (
	ContentTypeText ContentType = "TEXT"
	ContentTypeJson ContentType = "JSON"
	ContentTypeYaml ContentType = "YAML"
)

type ContinuousProfilingMonitorType string

const (
	// monitoring Process CPU percent, value in [0-100]
	ContinuousProfilingMonitorTypeProcessCpu ContinuousProfilingMonitorType = "PROCESS_CPU"
	// monitoring process thread count, value must bigger than zero
	ContinuousProfilingMonitorTypeProcessThreadCount ContinuousProfilingMonitorType = "PROCESS_THREAD_COUNT"
	// monitoring current system load
	ContinuousProfilingMonitorTypeSystemLoad ContinuousProfilingMonitorType = "SYSTEM_LOAD"
	// monitoring the process HTTP response error(status>=500) percent, value in [0-100]
	ContinuousProfilingMonitorTypeHttpErrorRate ContinuousProfilingMonitorType = "HTTP_ERROR_RATE"
	// monitoring the process HTTP response duration(ms)
	ContinuousProfilingMonitorTypeHttpAvgResponseTime ContinuousProfilingMonitorType = "HTTP_AVG_RESPONSE_TIME"
)

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http:#www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Set policy configuration
type ContinuousProfilingPolicyCreation struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http:#www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Set policy configuration
	ServiceId string `json:"serviceId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http:#www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Set policy configuration
	Targets []ContinuousProfilingPolicyTargetCreation `json:"targets"`
}

// GetServiceId returns ContinuousProfilingPolicyCreation.ServiceId, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyCreation) GetServiceId() string { return v.ServiceId }

// GetTargets returns ContinuousProfilingPolicyCreation.Targets, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyCreation) GetTargets() []ContinuousProfilingPolicyTargetCreation {
	return v.Targets
}

// Policy item of continuous profiling
type ContinuousProfilingPolicyItemCreation struct {
	// Policy item of continuous profiling
	Type ContinuousProfilingMonitorType `json:"type"`
	// Policy item of continuous profiling
	Threshold string `json:"threshold"`
	// Policy item of continuous profiling
	Period int `json:"period"`
	// Policy item of continuous profiling
	Count int `json:"count"`
	// Policy item of continuous profiling
	UriList []string `json:"uriList"`
	// Policy item of continuous profiling
	UriRegex string `json:"uriRegex"`
}

// GetType returns ContinuousProfilingPolicyItemCreation.Type, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetType() ContinuousProfilingMonitorType {
	return v.Type
}

// GetThreshold returns ContinuousProfilingPolicyItemCreation.Threshold, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetThreshold() string { return v.Threshold }

// GetPeriod returns ContinuousProfilingPolicyItemCreation.Period, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetPeriod() int { return v.Period }

// GetCount returns ContinuousProfilingPolicyItemCreation.Count, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetCount() int { return v.Count }

// GetUriList returns ContinuousProfilingPolicyItemCreation.UriList, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetUriList() []string { return v.UriList }

// GetUriRegex returns ContinuousProfilingPolicyItemCreation.UriRegex, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyItemCreation) GetUriRegex() string { return v.UriRegex }

type ContinuousProfilingPolicyTargetCreation struct {
	TargetType ContinuousProfilingTargetType           `json:"targetType"`
	CheckItems []ContinuousProfilingPolicyItemCreation `json:"checkItems"`
}

// GetTargetType returns ContinuousProfilingPolicyTargetCreation.TargetType, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyTargetCreation) GetTargetType() ContinuousProfilingTargetType {
	return v.TargetType
}

// GetCheckItems returns ContinuousProfilingPolicyTargetCreation.CheckItems, and is useful for accessing the field via an interface.
func (v *ContinuousProfilingPolicyTargetCreation) GetCheckItems() []ContinuousProfilingPolicyItemCreation {
	return v.CheckItems
}

type ContinuousProfilingTargetType string

const (
	// eBPF On CPU Profiling
	ContinuousProfilingTargetTypeOnCpu ContinuousProfilingTargetType = "ON_CPU"
	// eBPF Off CPU Profiling
	ContinuousProfilingTargetTypeOffCpu ContinuousProfilingTargetType = "OFF_CPU"
	// eBPF Network Profiling
	ContinuousProfilingTargetTypeNetwork ContinuousProfilingTargetType = "NETWORK"
)

// CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult includes the requested fields of the GraphQL type EBPFProfilingTaskCreationResult.
// The GraphQL type's documentation follows.
//
// eBPF Profiling task creation result
type CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult struct {
	// TRUE if the task is created successfully
	Status bool `json:"status"`
	// error reason when status == FALSE
	ErrorReason string `json:"errorReason"`
	// The task ID when status = TRUE
	Id string `json:"id"`
}

// GetStatus returns CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult.Status, and is useful for accessing the field via an interface.
func (v *CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult) GetStatus() bool {
	return v.Status
}

// GetErrorReason returns CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult.ErrorReason, and is useful for accessing the field via an interface.
func (v *CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult) GetErrorReason() string {
	return v.ErrorReason
}

// GetId returns CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult.Id, and is useful for accessing the field via an interface.
func (v *CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult) GetId() string {
	return v.Id
}

// CreateEBPFNetworkProfilingResponse is returned by CreateEBPFNetworkProfiling on success.
type CreateEBPFNetworkProfilingResponse struct {
	// create a new eBPF network profiling task
	CreateEBPFNetworkProfiling CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult `json:"createEBPFNetworkProfiling"`
}

// GetCreateEBPFNetworkProfiling returns CreateEBPFNetworkProfilingResponse.CreateEBPFNetworkProfiling, and is useful for accessing the field via an interface.
func (v *CreateEBPFNetworkProfilingResponse) GetCreateEBPFNetworkProfiling() CreateEBPFNetworkProfilingCreateEBPFNetworkProfilingEBPFProfilingTaskCreationResult {
	return v.CreateEBPFNetworkProfiling
}

// CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult includes the requested fields of the GraphQL type EBPFProfilingTaskCreationResult.
// The GraphQL type's documentation follows.
//
// eBPF Profiling task creation result
type CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult struct {
	// TRUE if the task is created successfully
	Status bool `json:"status"`
	// error reason when status == FALSE
	ErrorReason string `json:"errorReason"`
	// The task ID when status = TRUE
	Id string `json:"id"`
}

// GetStatus returns CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult.Status, and is useful for accessing the field via an interface.
func (v *CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult) GetStatus() bool {
	return v.Status
}

// GetErrorReason returns CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult.ErrorReason, and is useful for accessing the field via an interface.
func (v *CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult) GetErrorReason() string {
	return v.ErrorReason
}

// GetId returns CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult.Id, and is useful for accessing the field via an interface.
func (v *CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult) GetId() string {
	return v.Id
}

// CreateEBPFProfilingFixedTimeTaskResponse is returned by CreateEBPFProfilingFixedTimeTask on success.
type CreateEBPFProfilingFixedTimeTaskResponse struct {
	// create a new eBPF fixed time profiling task
	CreateEBPFProfilingFixedTimeTask CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult `json:"createEBPFProfilingFixedTimeTask"`
}

// GetCreateEBPFProfilingFixedTimeTask returns CreateEBPFProfilingFixedTimeTaskResponse.CreateEBPFProfilingFixedTimeTask, and is useful for accessing the field via an interface.
func (v *CreateEBPFProfilingFixedTimeTaskResponse) GetCreateEBPFProfilingFixedTimeTask() CreateEBPFProfilingFixedTimeTaskCreateEBPFProfilingFixedTimeTaskEBPFProfilingTaskCreationResult {
	return v.CreateEBPFProfilingFixedTimeTask
}

// CreateProfileTaskCreateProfileTaskProfileTaskCreationResult includes the requested fields of the GraphQL type ProfileTaskCreationResult.
// The GraphQL type's documentation follows.
//
// Profile task create result
type CreateProfileTaskCreateProfileTaskProfileTaskCreationResult struct {
	// if null or empty means the task create success, otherwise get create error reason
	ErrorReason string `json:"errorReason"`
	// get data id when create success
	Id string `json:"id"`
}

// GetErrorReason returns CreateProfileTaskCreateProfileTaskProfileTaskCreationResult.ErrorReason, and is useful for accessing the field via an interface.
func (v *CreateProfileTaskCreateProfileTaskProfileTaskCreationResult) GetErrorReason() string {
	return v.ErrorReason
}

// GetId returns CreateProfileTaskCreateProfileTaskProfileTaskCreationResult.Id, and is useful for accessing the field via an interface.
func (v *CreateProfileTaskCreateProfileTaskProfileTaskCreationResult) GetId() string { return v.Id }

// CreateProfileTaskResponse is returned by CreateProfileTask on success.
type CreateProfileTaskResponse struct {
	// crate new profile task
	CreateProfileTask CreateProfileTaskCreateProfileTaskProfileTaskCreationResult `json:"createProfileTask"`
}

// GetCreateProfileTask returns CreateProfileTaskResponse.CreateProfileTask, and is useful for accessing the field via an interface.
func (v *CreateProfileTaskResponse) GetCreateProfileTask() CreateProfileTaskCreateProfileTaskProfileTaskCreationResult {
	return v.CreateProfileTask
}

type DashboardSetting struct {
	Id            string `json:"id"`
	Configuration string `json:"configuration"`
}

// GetId returns DashboardSetting.Id, and is useful for accessing the field via an interface.
func (v *DashboardSetting) GetId() string { return v.Id }

// GetConfiguration returns DashboardSetting.Configuration, and is useful for accessing the field via an interface.
func (v *DashboardSetting) GetConfiguration() string { return v.Configuration }

type DetectPoint string

const (
	DetectPointClient DetectPoint = "CLIENT"
	DetectPointServer DetectPoint = "SERVER"
	DetectPointProxy  DetectPoint = "PROXY"
)

// DisableTemplateDisableTemplateTemplateChangeStatus includes the requested fields of the GraphQL type TemplateChangeStatus.
type DisableTemplateDisableTemplateTemplateChangeStatus struct {
	Id string `json:"id"`
	// True means change successfully.
	Status  bool   `json:"status"`
	Message string `json:"message"`
}

// GetId returns DisableTemplateDisableTemplateTemplateChangeStatus.Id, and is useful for accessing the field via an interface.
func (v *DisableTemplateDisableTemplateTemplateChangeStatus) GetId() string { return v.Id }

// GetStatus returns DisableTemplateDisableTemplateTemplateChangeStatus.Status, and is useful for accessing the field via an interface.
func (v *DisableTemplateDisableTemplateTemplateChangeStatus) GetStatus() bool { return v.Status }

// GetMessage returns DisableTemplateDisableTemplateTemplateChangeStatus.Message, and is useful for accessing the field via an interface.
func (v *DisableTemplateDisableTemplateTemplateChangeStatus) GetMessage() string { return v.Message }

// DisableTemplateResponse is returned by DisableTemplate on success.
type DisableTemplateResponse struct {
	DisableTemplate DisableTemplateDisableTemplateTemplateChangeStatus `json:"disableTemplate"`
}

// GetDisableTemplate returns DisableTemplateResponse.DisableTemplate, and is useful for accessing the field via an interface.
func (v *DisableTemplateResponse) GetDisableTemplate() DisableTemplateDisableTemplateTemplateChangeStatus {
	return v.DisableTemplate
}

// The Duration defines the start and end time for each query operation.
// Fields: `start` and `end`
// represents the time span. And each of them matches the step.
// ref https://www.ietf.org/rfc/rfc3339.txt
// The time formats are
// `SECOND` step: yyyy-MM-dd HHmmss
// `MINUTE` step: yyyy-MM-dd HHmm
// `HOUR` step: yyyy-MM-dd HH
// `DAY` step: yyyy-MM-dd
// `MONTH` step: yyyy-MM
// Field: `step`
// represents the accurate time point.
// e.g.
// if step==HOUR , start=2017-11-08 09, end=2017-11-08 19
// then
// metrics from the following time points expected
// 2017-11-08 9:00 -> 2017-11-08 19:00
// there are 11 time points (hours) in the time span.
type Duration struct {
	// The Duration defines the start and end time for each query operation.
	// Fields: `start` and `end`
	// represents the time span. And each of them matches the step.
	// ref https://www.ietf.org/rfc/rfc3339.txt
	// The time formats are
	// `SECOND` step: yyyy-MM-dd HHmmss
	// `MINUTE` step: yyyy-MM-dd HHmm
	// `HOUR` step: yyyy-MM-dd HH
	// `DAY` step: yyyy-MM-dd
	// `MONTH` step: yyyy-MM
	// Field: `step`
	// represents the accurate time point.
	// e.g.
	// if step==HOUR , start=2017-11-08 09, end=2017-11-08 19
	// then
	// metrics from the following time points expected
	// 2017-11-08 9:00 -> 2017-11-08 19:00
	// there are 11 time points (hours) in the time span.
	Start string `json:"start"`
	// The Duration defines the start and end time for each query operation.
	// Fields: `start` and `end`
	// represents the time span. And each of them matches the step.
	// ref https://www.ietf.org/rfc/rfc3339.txt
	// The time formats are
	// `SECOND` step: yyyy-MM-dd HHmmss
	// `MINUTE` step: yyyy-MM-dd HHmm
	// `HOUR` step: yyyy-MM-dd HH
	// `DAY` step: yyyy-MM-dd
	// `MONTH` step: yyyy-MM
	// Field: `step`
	// represents the accurate time point.
	// e.g.
	// if step==HOUR , start=2017-11-08 09, end=2017-11-08 19
	// then
	// metrics from the following time points expected
	// 2017-11-08 9:00 -> 2017-11-08 19:00
	// there are 11 time points (hours) in the time span.
	End string `json:"end"`
	// The Duration defines the start and end time for each query operation.
	// Fields: `start` and `end`
	// represents the time span. And each of them matches the step.
	// ref https://www.ietf.org/rfc/rfc3339.txt
	// The time formats are
	// `SECOND` step: yyyy-MM-dd HHmmss
	// `MINUTE` step: yyyy-MM-dd HHmm
	// `HOUR` step: yyyy-MM-dd HH
	// `DAY` step: yyyy-MM-dd
	// `MONTH` step: yyyy-MM
	// Field: `step`
	// represents the accurate time point.
	// e.g.
	// if step==HOUR , start=2017-11-08 09, end=2017-11-08 19
	// then
	// metrics from the following time points expected
	// 2017-11-08 9:00 -> 2017-11-08 19:00
	// there are 11 time points (hours) in the time span.
	Step Step `json:"step"`
}

// GetStart returns Duration.Start, and is useful for accessing the field via an interface.
func (v *Duration) GetStart() string { return v.Start }

// GetEnd returns Duration.End, and is useful for accessing the field via an interface.
func (v *Duration) GetEnd() string { return v.End }

// GetStep returns Duration.Step, and is useful for accessing the field via an interface.
func (v *Duration) GetStep() Step { return v.Step }

// Settings for the behaviours of sampling.
// HTTP request and response could be large between the system.
// These settings help the agent to collect necessary data and cost reasonable resources for the agent, transforming, and OAP storage.
type EBPFNetworkDataCollectingSettings struct {
	// Settings for the behaviours of sampling.
	// HTTP request and response could be large between the system.
	// These settings help the agent to collect necessary data and cost reasonable resources for the agent, transforming, and OAP storage.
	RequireCompleteRequest bool `json:"requireCompleteRequest"`
	// Settings for the behaviours of sampling.
	// HTTP request and response could be large between the system.
	// These settings help the agent to collect necessary data and cost reasonable resources for the agent, transforming, and OAP storage.
	MaxRequestSize int `json:"maxRequestSize"`
	// Settings for the behaviours of sampling.
	// HTTP request and response could be large between the system.
	// These settings help the agent to collect necessary data and cost reasonable resources for the agent, transforming, and OAP storage.
	RequireCompleteResponse bool `json:"requireCompleteResponse"`
	// Settings for the behaviours of sampling.
	// HTTP request and response could be large between the system.
	// These settings help the agent to collect necessary data and cost reasonable resources for the agent, transforming, and OAP storage.
	MaxResponseSize int `json:"maxResponseSize"`
}

// GetRequireCompleteRequest returns EBPFNetworkDataCollectingSettings.RequireCompleteRequest, and is useful for accessing the field via an interface.
func (v *EBPFNetworkDataCollectingSettings) GetRequireCompleteRequest() bool {
	return v.RequireCompleteRequest
}

// GetMaxRequestSize returns EBPFNetworkDataCollectingSettings.MaxRequestSize, and is useful for accessing the field via an interface.
func (v *EBPFNetworkDataCollectingSettings) GetMaxRequestSize() int { return v.MaxRequestSize }

// GetRequireCompleteResponse returns EBPFNetworkDataCollectingSettings.RequireCompleteResponse, and is useful for accessing the field via an interface.
func (v *EBPFNetworkDataCollectingSettings) GetRequireCompleteResponse() bool {
	return v.RequireCompleteResponse
}

// GetMaxResponseSize returns EBPFNetworkDataCollectingSettings.MaxResponseSize, and is useful for accessing the field via an interface.
func (v *EBPFNetworkDataCollectingSettings) GetMaxResponseSize() int { return v.MaxResponseSize }

// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
type EBPFNetworkSamplingRule struct {
	// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
	UriRegex string `json:"uriRegex"`
	// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
	MinDuration int `json:"minDuration"`
	// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
	When4xx bool `json:"when4xx"`
	// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
	When5xx bool `json:"when5xx"`
	// EBPFNetworkSamplingRule defines the URI scopes for HTTP request and response collecting under given HTTP response code circumstances.
	Settings EBPFNetworkDataCollectingSettings `json:"settings"`
}

// GetUriRegex returns EBPFNetworkSamplingRule.UriRegex, and is useful for accessing the field via an interface.
func (v *EBPFNetworkSamplingRule) GetUriRegex() string { return v.UriRegex }

// GetMinDuration returns EBPFNetworkSamplingRule.MinDuration, and is useful for accessing the field via an interface.
func (v *EBPFNetworkSamplingRule) GetMinDuration() int { return v.MinDuration }

// GetWhen4xx returns EBPFNetworkSamplingRule.When4xx, and is useful for accessing the field via an interface.
func (v *EBPFNetworkSamplingRule) GetWhen4xx() bool { return v.When4xx }

// GetWhen5xx returns EBPFNetworkSamplingRule.When5xx, and is useful for accessing the field via an interface.
func (v *EBPFNetworkSamplingRule) GetWhen5xx() bool { return v.When5xx }

// GetSettings returns EBPFNetworkSamplingRule.Settings, and is useful for accessing the field via an interface.
func (v *EBPFNetworkSamplingRule) GetSettings() EBPFNetworkDataCollectingSettings { return v.Settings }

type EBPFProfilingAnalyzeAggregateType string

const (
	// Aggregate by the total duration of stack
	// For "OFF_CPU" target type of profiling: Statics the total time spent in off cpu.
	EBPFProfilingAnalyzeAggregateTypeDuration EBPFProfilingAnalyzeAggregateType = "DURATION"
	// Aggregate by the trigger count
	// For "ON_CPU" target type of profiling: Statics the number of dump count.
	// For "OFF_CPU" target type of profiling: Statics the number of times the process is switched to off cpu by the scheduler.
	EBPFProfilingAnalyzeAggregateTypeCount EBPFProfilingAnalyzeAggregateType = "COUNT"
)

type EBPFProfilingAnalyzeTimeRange struct {
	Start int64 `json:"start"`
	End   int64 `json:"end"`
}

// GetStart returns EBPFProfilingAnalyzeTimeRange.Start, and is useful for accessing the field via an interface.
func (v *EBPFProfilingAnalyzeTimeRange) GetStart() int64 { return v.Start }

// GetEnd returns EBPFProfilingAnalyzeTimeRange.End, and is useful for accessing the field via an interface.
func (v *EBPFProfilingAnalyzeTimeRange) GetEnd() int64 { return v.End }

// The request of eBPF network profiling task
type EBPFProfilingNetworkTaskRequest struct {
	// The request of eBPF network profiling task
	InstanceId string `json:"instanceId"`
	// The request of eBPF network profiling task
	Samplings []EBPFNetworkSamplingRule `json:"samplings"`
}

// GetInstanceId returns EBPFProfilingNetworkTaskRequest.InstanceId, and is useful for accessing the field via an interface.
func (v *EBPFProfilingNetworkTaskRequest) GetInstanceId() string { return v.InstanceId }

// GetSamplings returns EBPFProfilingNetworkTaskRequest.Samplings, and is useful for accessing the field via an interface.
func (v *EBPFProfilingNetworkTaskRequest) GetSamplings() []EBPFNetworkSamplingRule {
	return v.Samplings
}

type EBPFProfilingStackType string

const (
	EBPFProfilingStackTypeKernelSpace EBPFProfilingStackType = "KERNEL_SPACE"
	EBPFProfilingStackTypeUserSpace   EBPFProfilingStackType = "USER_SPACE"
)

// The way of profiling the process
// relate with Linux function: https://man7.org/linux/man-pages/man2/perf_event_open.2.html
type EBPFProfilingTargetType string

const (
	// Using "PERF_COUNT_SW_CPU_CLOCK" to profiling process with CPU clock
	EBPFProfilingTargetTypeOnCpu EBPFProfilingTargetType = "ON_CPU"
	// Using "finish_task_switch" of kprobe to profiling process
	// relate with blog: https://www.brendangregg.com/offcpuanalysis.html
	EBPFProfilingTargetTypeOffCpu EBPFProfilingTargetType = "OFF_CPU"
	// Using many syscall to complete network topology monitoring, such as sys_connect, sys_read, sys_write, etc.
	EBPFProfilingTargetTypeNetwork EBPFProfilingTargetType = "NETWORK"
)

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The creation request of eBPF profiling fixed time task
type EBPFProfilingTaskFixedTimeCreationRequest struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// The creation request of eBPF profiling fixed time task
	ServiceId string `json:"serviceId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// The creation request of eBPF profiling fixed time task
	ProcessLabels []string `json:"processLabels"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// The creation request of eBPF profiling fixed time task
	StartTime int64 `json:"startTime"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// The creation request of eBPF profiling fixed time task
	Duration int `json:"duration"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// The creation request of eBPF profiling fixed time task
	TargetType EBPFProfilingTargetType `json:"targetType"`
}

// GetServiceId returns EBPFProfilingTaskFixedTimeCreationRequest.ServiceId, and is useful for accessing the field via an interface.
func (v *EBPFProfilingTaskFixedTimeCreationRequest) GetServiceId() string { return v.ServiceId }

// GetProcessLabels returns EBPFProfilingTaskFixedTimeCreationRequest.ProcessLabels, and is useful for accessing the field via an interface.
func (v *EBPFProfilingTaskFixedTimeCreationRequest) GetProcessLabels() []string {
	return v.ProcessLabels
}

// GetStartTime returns EBPFProfilingTaskFixedTimeCreationRequest.StartTime, and is useful for accessing the field via an interface.
func (v *EBPFProfilingTaskFixedTimeCreationRequest) GetStartTime() int64 { return v.StartTime }

// GetDuration returns EBPFProfilingTaskFixedTimeCreationRequest.Duration, and is useful for accessing the field via an interface.
func (v *EBPFProfilingTaskFixedTimeCreationRequest) GetDuration() int { return v.Duration }

// GetTargetType returns EBPFProfilingTaskFixedTimeCreationRequest.TargetType, and is useful for accessing the field via an interface.
func (v *EBPFProfilingTaskFixedTimeCreationRequest) GetTargetType() EBPFProfilingTargetType {
	return v.TargetType
}

// Define when the profiling task would be execute
type EBPFProfilingTriggerType string

const (
	// Appoint the task executing total duration
	EBPFProfilingTriggerTypeFixedTime EBPFProfilingTriggerType = "FIXED_TIME"
	// Trigger by the reach the continuous profiling policy
	EBPFProfilingTriggerTypeContinuousProfiling EBPFProfilingTriggerType = "CONTINUOUS_PROFILING"
)

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
// MQE allows users to do simple query-stage calculation like well known PromQL.
type Entity struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	Scope Scope `json:"scope"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	ServiceName string `json:"serviceName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	Normal bool `json:"normal"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	ServiceInstanceName string `json:"serviceInstanceName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	EndpointName string `json:"endpointName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	ProcessName string `json:"processName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	DestServiceName string `json:"destServiceName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	DestNormal bool `json:"destNormal"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	DestServiceInstanceName string `json:"destServiceInstanceName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	DestEndpointName string `json:"destEndpointName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// SkyWalking Metrics Query Expression(MQE) is an extension query mechanism.
	// MQE allows users to do simple query-stage calculation like well known PromQL.
	DestProcessName string `json:"destProcessName"`
}

// GetScope returns Entity.Scope, and is useful for accessing the field via an interface.
func (v *Entity) GetScope() Scope { return v.Scope }

// GetServiceName returns Entity.ServiceName, and is useful for accessing the field via an interface.
func (v *Entity) GetServiceName() string { return v.ServiceName }

// GetNormal returns Entity.Normal, and is useful for accessing the field via an interface.
func (v *Entity) GetNormal() bool { return v.Normal }

// GetServiceInstanceName returns Entity.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *Entity) GetServiceInstanceName() string { return v.ServiceInstanceName }

// GetEndpointName returns Entity.EndpointName, and is useful for accessing the field via an interface.
func (v *Entity) GetEndpointName() string { return v.EndpointName }

// GetProcessName returns Entity.ProcessName, and is useful for accessing the field via an interface.
func (v *Entity) GetProcessName() string { return v.ProcessName }

// GetDestServiceName returns Entity.DestServiceName, and is useful for accessing the field via an interface.
func (v *Entity) GetDestServiceName() string { return v.DestServiceName }

// GetDestNormal returns Entity.DestNormal, and is useful for accessing the field via an interface.
func (v *Entity) GetDestNormal() bool { return v.DestNormal }

// GetDestServiceInstanceName returns Entity.DestServiceInstanceName, and is useful for accessing the field via an interface.
func (v *Entity) GetDestServiceInstanceName() string { return v.DestServiceInstanceName }

// GetDestEndpointName returns Entity.DestEndpointName, and is useful for accessing the field via an interface.
func (v *Entity) GetDestEndpointName() string { return v.DestEndpointName }

// GetDestProcessName returns Entity.DestProcessName, and is useful for accessing the field via an interface.
func (v *Entity) GetDestProcessName() string { return v.DestProcessName }

type ErrorCategory string

const (
	ErrorCategoryAll      ErrorCategory = "ALL"
	ErrorCategoryAjax     ErrorCategory = "AJAX"
	ErrorCategoryResource ErrorCategory = "RESOURCE"
	ErrorCategoryVue      ErrorCategory = "VUE"
	ErrorCategoryPromise  ErrorCategory = "PROMISE"
	ErrorCategoryJs       ErrorCategory = "JS"
	ErrorCategoryUnknown  ErrorCategory = "UNKNOWN"
)

// EstimateProcessScaleResponse is returned by EstimateProcessScale on success.
type EstimateProcessScaleResponse struct {
	// Get the number of matched processes through serviceId, labels
	// Labels: the matched process should contain all labels
	//
	// The return is not a precise number, the process has its lifecycle, as it reboots and shutdowns with time.
	// The return number just gives an abstract of the scale of profiling that would be applied.
	EstimateProcessScale int64 `json:"estimateProcessScale"`
}

// GetEstimateProcessScale returns EstimateProcessScaleResponse.EstimateProcessScale, and is useful for accessing the field via an interface.
func (v *EstimateProcessScaleResponse) GetEstimateProcessScale() int64 { return v.EstimateProcessScale }

type EventQueryCondition struct {
	Uuid   string      `json:"uuid"`
	Source SourceInput `json:"source"`
	Name   string      `json:"name"`
	Type   EventType   `json:"type"`
	Time   Duration    `json:"time"`
	Order  Order       `json:"order"`
	Layer  string      `json:"layer"`
	Paging Pagination  `json:"paging"`
}

// GetUuid returns EventQueryCondition.Uuid, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetUuid() string { return v.Uuid }

// GetSource returns EventQueryCondition.Source, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetSource() SourceInput { return v.Source }

// GetName returns EventQueryCondition.Name, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetName() string { return v.Name }

// GetType returns EventQueryCondition.Type, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetType() EventType { return v.Type }

// GetTime returns EventQueryCondition.Time, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetTime() Duration { return v.Time }

// GetOrder returns EventQueryCondition.Order, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetOrder() Order { return v.Order }

// GetLayer returns EventQueryCondition.Layer, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetLayer() string { return v.Layer }

// GetPaging returns EventQueryCondition.Paging, and is useful for accessing the field via an interface.
func (v *EventQueryCondition) GetPaging() Pagination { return v.Paging }

type EventType string

const (
	EventTypeNormal EventType = "Normal"
	EventTypeError  EventType = "Error"
)

// ExecExpressionExecExpressionExpressionResult includes the requested fields of the GraphQL type ExpressionResult.
type ExecExpressionExecExpressionExpressionResult struct {
	Type ExpressionResultType `json:"type"`
	// When the type == TIME_SERIES_VALUES or SINGLE_VALUE, the results would be a collection of MQEValues according to the metric labels.
	// In other legal type cases, only one MQEValues is expected in the array.
	Results []ExecExpressionExecExpressionExpressionResultResultsMQEValues `json:"results"`
	// When type == ExpressionResultType.UNKNOWN,
	// the error message includes the expression resolving errors.
	Error string `json:"error"`
}

// GetType returns ExecExpressionExecExpressionExpressionResult.Type, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResult) GetType() ExpressionResultType { return v.Type }

// GetResults returns ExecExpressionExecExpressionExpressionResult.Results, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResult) GetResults() []ExecExpressionExecExpressionExpressionResultResultsMQEValues {
	return v.Results
}

// GetError returns ExecExpressionExecExpressionExpressionResult.Error, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResult) GetError() string { return v.Error }

// ExecExpressionExecExpressionExpressionResultResultsMQEValues includes the requested fields of the GraphQL type MQEValues.
type ExecExpressionExecExpressionExpressionResultResultsMQEValues struct {
	// The metadata description of this value series. It could be NULL if it is the result of the different metrics calculation.
	Metric ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata `json:"metric"`
	// 1. When the type == SINGLE_VALUE, values only have one value.
	// 2. When the type == TIME_SERIES_VALUES, values would match the given elements in the duration range.
	// 3. When the type == SORTED_LIST, values could be results of `sort(metric)`
	// 4. When the type == RECORD_LIST, values could be sampled records
	Values []ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue `json:"values"`
}

// GetMetric returns ExecExpressionExecExpressionExpressionResultResultsMQEValues.Metric, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValues) GetMetric() ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata {
	return v.Metric
}

// GetValues returns ExecExpressionExecExpressionExpressionResultResultsMQEValues.Values, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValues) GetValues() []ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue {
	return v.Values
}

// ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata includes the requested fields of the GraphQL type Metadata.
type ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata struct {
	// Key-value pairs to describe the metric
	Labels []ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue `json:"labels"`
}

// GetLabels returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata.Labels, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadata) GetLabels() []ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue {
	return v.Labels
}

// ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue) GetKey() string {
	return v.Key
}

// GetValue returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesMetricMetadataLabelsKeyValue) GetValue() string {
	return v.Value
}

// ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue includes the requested fields of the GraphQL type MQEValue.
type ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue struct {
	// Timestamp or name of the entity or record. It could be NULL if it is the result of an aggregate calculation.
	Id string `json:"id"`
	// Value is formatted double/int or NULL if the value is absent.
	Value string `json:"value"`
	// Sampled record could associate with a trace.
	// This would be a trace ID only.
	TraceID string `json:"traceID"`
}

// GetId returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue.Id, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue) GetId() string {
	return v.Id
}

// GetValue returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue.Value, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue) GetValue() string {
	return v.Value
}

// GetTraceID returns ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue.TraceID, and is useful for accessing the field via an interface.
func (v *ExecExpressionExecExpressionExpressionResultResultsMQEValuesValuesMQEValue) GetTraceID() string {
	return v.TraceID
}

// ExecExpressionResponse is returned by ExecExpression on success.
type ExecExpressionResponse struct {
	ExecExpression ExecExpressionExecExpressionExpressionResult `json:"execExpression"`
}

// GetExecExpression returns ExecExpressionResponse.ExecExpression, and is useful for accessing the field via an interface.
func (v *ExecExpressionResponse) GetExecExpression() ExecExpressionExecExpressionExpressionResult {
	return v.ExecExpression
}

type ExpressionResultType string

const (
	// Can't resolve the type of the given expression.
	ExpressionResultTypeUnknown ExpressionResultType = "UNKNOWN"
	// A single value
	ExpressionResultTypeSingleValue ExpressionResultType = "SINGLE_VALUE"
	// A collection of time-series values.
	// The value could have labels or not.
	ExpressionResultTypeTimeSeriesValues ExpressionResultType = "TIME_SERIES_VALUES"
	// A collection of aggregated values through metric sort function
	ExpressionResultTypeSortedList ExpressionResultType = "SORTED_LIST"
	// A collection of sampled records.
	// When the original metric type is sampled records
	ExpressionResultTypeRecordList ExpressionResultType = "RECORD_LIST"
)

// FindEndpointFindEndpoint includes the requested fields of the GraphQL type Endpoint.
// The GraphQL type's documentation follows.
//
// The endpoint is the minimal functional unit.
// Typically, it presents a URI or gRPC service name in the service.
// Different from instance, this is a logical functional unit.
type FindEndpointFindEndpoint struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns FindEndpointFindEndpoint.Id, and is useful for accessing the field via an interface.
func (v *FindEndpointFindEndpoint) GetId() string { return v.Id }

// GetName returns FindEndpointFindEndpoint.Name, and is useful for accessing the field via an interface.
func (v *FindEndpointFindEndpoint) GetName() string { return v.Name }

// FindEndpointResponse is returned by FindEndpoint on success.
type FindEndpointResponse struct {
	// Search and find matched endpoints according to given service and keyword(optional)
	// If no keyword, randomly choose endpoint based on `limit` value.
	FindEndpoint []FindEndpointFindEndpoint `json:"findEndpoint"`
}

// GetFindEndpoint returns FindEndpointResponse.FindEndpoint, and is useful for accessing the field via an interface.
func (v *FindEndpointResponse) GetFindEndpoint() []FindEndpointFindEndpoint { return v.FindEndpoint }

// FindServiceFindService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type FindServiceFindService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns FindServiceFindService.Id, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetId() string { return v.Id }

// GetName returns FindServiceFindService.Name, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetName() string { return v.Name }

// GetGroup returns FindServiceFindService.Group, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetGroup() string { return v.Group }

// GetShortName returns FindServiceFindService.ShortName, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetShortName() string { return v.ShortName }

// GetLayers returns FindServiceFindService.Layers, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetLayers() []string { return v.Layers }

// GetNormal returns FindServiceFindService.Normal, and is useful for accessing the field via an interface.
func (v *FindServiceFindService) GetNormal() bool { return v.Normal }

// FindServiceResponse is returned by FindService on success.
type FindServiceResponse struct {
	// Search and find service according to given name. Return null if not existing.
	FindService FindServiceFindService `json:"findService"`
}

// GetFindService returns FindServiceResponse.FindService, and is useful for accessing the field via an interface.
func (v *FindServiceResponse) GetFindService() FindServiceFindService { return v.FindService }

// GetAlarmGetAlarmAlarms includes the requested fields of the GraphQL type Alarms.
type GetAlarmGetAlarmAlarms struct {
	Msgs []GetAlarmGetAlarmAlarmsMsgsAlarmMessage `json:"msgs"`
}

// GetMsgs returns GetAlarmGetAlarmAlarms.Msgs, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarms) GetMsgs() []GetAlarmGetAlarmAlarmsMsgsAlarmMessage { return v.Msgs }

// GetAlarmGetAlarmAlarmsMsgsAlarmMessage includes the requested fields of the GraphQL type AlarmMessage.
type GetAlarmGetAlarmAlarmsMsgsAlarmMessage struct {
	StartTime int64                                                `json:"startTime"`
	Scope     Scope                                                `json:"scope"`
	Id        string                                               `json:"id"`
	Message   string                                               `json:"message"`
	Events    []GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent  `json:"events"`
	Tags      []GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue `json:"tags"`
}

// GetStartTime returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.StartTime, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetStartTime() int64 { return v.StartTime }

// GetScope returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.Scope, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetScope() Scope { return v.Scope }

// GetId returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.Id, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetId() string { return v.Id }

// GetMessage returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.Message, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetMessage() string { return v.Message }

// GetEvents returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.Events, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetEvents() []GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent {
	return v.Events
}

// GetTags returns GetAlarmGetAlarmAlarmsMsgsAlarmMessage.Tags, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessage) GetTags() []GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue {
	return v.Tags
}

// GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent includes the requested fields of the GraphQL type Event.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
type GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent struct {
	Uuid       string                                                                `json:"uuid"`
	Source     GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource               `json:"source"`
	Name       string                                                                `json:"name"`
	Type       EventType                                                             `json:"type"`
	Message    string                                                                `json:"message"`
	Parameters []GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue `json:"parameters"`
	// The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
	// This field may be 0 if the user didn't report it or the `start` event is lost due to network issues.
	StartTime int64 `json:"startTime"`
	// The end time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC. Empty or 0 if the event have not finished yet.
	// This field may be 0 if the user didn't report it or the `end` event is lost due to network issues.
	EndTime int64  `json:"endTime"`
	Layer   string `json:"layer"`
}

// GetUuid returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Uuid, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetUuid() string { return v.Uuid }

// GetSource returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Source, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetSource() GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource {
	return v.Source
}

// GetName returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Name, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetName() string { return v.Name }

// GetType returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Type, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetType() EventType { return v.Type }

// GetMessage returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Message, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetMessage() string { return v.Message }

// GetParameters returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Parameters, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetParameters() []GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue {
	return v.Parameters
}

// GetStartTime returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.StartTime, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetStartTime() int64 { return v.StartTime }

// GetEndTime returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.EndTime, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetEndTime() int64 { return v.EndTime }

// GetLayer returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent.Layer, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEvent) GetLayer() string { return v.Layer }

// GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue.Key, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue) GetKey() string {
	return v.Key
}

// GetValue returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue.Value, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventParametersKeyValue) GetValue() string {
	return v.Value
}

// GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource includes the requested fields of the GraphQL type Source.
type GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource struct {
	Service         string `json:"service"`
	ServiceInstance string `json:"serviceInstance"`
	Endpoint        string `json:"endpoint"`
}

// GetService returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource.Service, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource) GetService() string {
	return v.Service
}

// GetServiceInstance returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource.ServiceInstance, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource) GetServiceInstance() string {
	return v.ServiceInstance
}

// GetEndpoint returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource.Endpoint, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageEventsEventSource) GetEndpoint() string {
	return v.Endpoint
}

// GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue) GetKey() string { return v.Key }

// GetValue returns GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *GetAlarmGetAlarmAlarmsMsgsAlarmMessageTagsKeyValue) GetValue() string { return v.Value }

// GetAlarmResponse is returned by GetAlarm on success.
type GetAlarmResponse struct {
	GetAlarm GetAlarmGetAlarmAlarms `json:"getAlarm"`
}

// GetGetAlarm returns GetAlarmResponse.GetAlarm, and is useful for accessing the field via an interface.
func (v *GetAlarmResponse) GetGetAlarm() GetAlarmGetAlarmAlarms { return v.GetAlarm }

// GetAlarmTrendGetAlarmTrend includes the requested fields of the GraphQL type AlarmTrend.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// the trend alarm trigger times
type GetAlarmTrendGetAlarmTrend struct {
	NumOfAlarm []int `json:"numOfAlarm"`
}

// GetNumOfAlarm returns GetAlarmTrendGetAlarmTrend.NumOfAlarm, and is useful for accessing the field via an interface.
func (v *GetAlarmTrendGetAlarmTrend) GetNumOfAlarm() []int { return v.NumOfAlarm }

// GetAlarmTrendResponse is returned by GetAlarmTrend on success.
type GetAlarmTrendResponse struct {
	GetAlarmTrend GetAlarmTrendGetAlarmTrend `json:"getAlarmTrend"`
}

// GetGetAlarmTrend returns GetAlarmTrendResponse.GetAlarmTrend, and is useful for accessing the field via an interface.
func (v *GetAlarmTrendResponse) GetGetAlarmTrend() GetAlarmTrendGetAlarmTrend { return v.GetAlarmTrend }

// GetAllBrowserServicesGetAllBrowserServicesService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type GetAllBrowserServicesGetAllBrowserServicesService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns GetAllBrowserServicesGetAllBrowserServicesService.Id, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetId() string { return v.Id }

// GetName returns GetAllBrowserServicesGetAllBrowserServicesService.Name, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetName() string { return v.Name }

// GetGroup returns GetAllBrowserServicesGetAllBrowserServicesService.Group, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetGroup() string { return v.Group }

// GetShortName returns GetAllBrowserServicesGetAllBrowserServicesService.ShortName, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetShortName() string { return v.ShortName }

// GetLayers returns GetAllBrowserServicesGetAllBrowserServicesService.Layers, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetLayers() []string { return v.Layers }

// GetNormal returns GetAllBrowserServicesGetAllBrowserServicesService.Normal, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesGetAllBrowserServicesService) GetNormal() bool { return v.Normal }

// GetAllBrowserServicesResponse is returned by GetAllBrowserServices on success.
type GetAllBrowserServicesResponse struct {
	// Fetch all services of Browser type
	GetAllBrowserServices []GetAllBrowserServicesGetAllBrowserServicesService `json:"getAllBrowserServices"`
}

// GetGetAllBrowserServices returns GetAllBrowserServicesResponse.GetAllBrowserServices, and is useful for accessing the field via an interface.
func (v *GetAllBrowserServicesResponse) GetGetAllBrowserServices() []GetAllBrowserServicesGetAllBrowserServicesService {
	return v.GetAllBrowserServices
}

// GetAllDatabasesGetAllDatabasesDatabase includes the requested fields of the GraphQL type Database.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metadata-v2 in the future
type GetAllDatabasesGetAllDatabasesDatabase struct {
	Id   string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// GetId returns GetAllDatabasesGetAllDatabasesDatabase.Id, and is useful for accessing the field via an interface.
func (v *GetAllDatabasesGetAllDatabasesDatabase) GetId() string { return v.Id }

// GetName returns GetAllDatabasesGetAllDatabasesDatabase.Name, and is useful for accessing the field via an interface.
func (v *GetAllDatabasesGetAllDatabasesDatabase) GetName() string { return v.Name }

// GetType returns GetAllDatabasesGetAllDatabasesDatabase.Type, and is useful for accessing the field via an interface.
func (v *GetAllDatabasesGetAllDatabasesDatabase) GetType() string { return v.Type }

// GetAllDatabasesResponse is returned by GetAllDatabases on success.
type GetAllDatabasesResponse struct {
	// Database related meta info.
	GetAllDatabases []GetAllDatabasesGetAllDatabasesDatabase `json:"getAllDatabases"`
}

// GetGetAllDatabases returns GetAllDatabasesResponse.GetAllDatabases, and is useful for accessing the field via an interface.
func (v *GetAllDatabasesResponse) GetGetAllDatabases() []GetAllDatabasesGetAllDatabasesDatabase {
	return v.GetAllDatabases
}

// GetAllEndpointTopNGetAllEndpointTopNTopNEntity includes the requested fields of the GraphQL type TopNEntity.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type GetAllEndpointTopNGetAllEndpointTopNTopNEntity struct {
	Name  string `json:"name"`
	Id    string `json:"id"`
	Value int64  `json:"value"`
}

// GetName returns GetAllEndpointTopNGetAllEndpointTopNTopNEntity.Name, and is useful for accessing the field via an interface.
func (v *GetAllEndpointTopNGetAllEndpointTopNTopNEntity) GetName() string { return v.Name }

// GetId returns GetAllEndpointTopNGetAllEndpointTopNTopNEntity.Id, and is useful for accessing the field via an interface.
func (v *GetAllEndpointTopNGetAllEndpointTopNTopNEntity) GetId() string { return v.Id }

// GetValue returns GetAllEndpointTopNGetAllEndpointTopNTopNEntity.Value, and is useful for accessing the field via an interface.
func (v *GetAllEndpointTopNGetAllEndpointTopNTopNEntity) GetValue() int64 { return v.Value }

// GetAllEndpointTopNResponse is returned by GetAllEndpointTopN on success.
type GetAllEndpointTopNResponse struct {
	GetAllEndpointTopN []GetAllEndpointTopNGetAllEndpointTopNTopNEntity `json:"getAllEndpointTopN"`
}

// GetGetAllEndpointTopN returns GetAllEndpointTopNResponse.GetAllEndpointTopN, and is useful for accessing the field via an interface.
func (v *GetAllEndpointTopNResponse) GetGetAllEndpointTopN() []GetAllEndpointTopNGetAllEndpointTopNTopNEntity {
	return v.GetAllEndpointTopN
}

// GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity includes the requested fields of the GraphQL type TopNEntity.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity struct {
	Name  string `json:"name"`
	Id    string `json:"id"`
	Value int64  `json:"value"`
}

// GetName returns GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity.Name, and is useful for accessing the field via an interface.
func (v *GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity) GetName() string {
	return v.Name
}

// GetId returns GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity.Id, and is useful for accessing the field via an interface.
func (v *GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity) GetId() string { return v.Id }

// GetValue returns GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity.Value, and is useful for accessing the field via an interface.
func (v *GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity) GetValue() int64 {
	return v.Value
}

// GetAllServiceInstanceTopNResponse is returned by GetAllServiceInstanceTopN on success.
type GetAllServiceInstanceTopNResponse struct {
	GetAllServiceInstanceTopN []GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity `json:"getAllServiceInstanceTopN"`
}

// GetGetAllServiceInstanceTopN returns GetAllServiceInstanceTopNResponse.GetAllServiceInstanceTopN, and is useful for accessing the field via an interface.
func (v *GetAllServiceInstanceTopNResponse) GetGetAllServiceInstanceTopN() []GetAllServiceInstanceTopNGetAllServiceInstanceTopNTopNEntity {
	return v.GetAllServiceInstanceTopN
}

// GetAllServicesGetAllServicesService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type GetAllServicesGetAllServicesService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns GetAllServicesGetAllServicesService.Id, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetId() string { return v.Id }

// GetName returns GetAllServicesGetAllServicesService.Name, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetName() string { return v.Name }

// GetGroup returns GetAllServicesGetAllServicesService.Group, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetGroup() string { return v.Group }

// GetShortName returns GetAllServicesGetAllServicesService.ShortName, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetShortName() string { return v.ShortName }

// GetLayers returns GetAllServicesGetAllServicesService.Layers, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetLayers() []string { return v.Layers }

// GetNormal returns GetAllServicesGetAllServicesService.Normal, and is useful for accessing the field via an interface.
func (v *GetAllServicesGetAllServicesService) GetNormal() bool { return v.Normal }

// GetAllServicesResponse is returned by GetAllServices on success.
type GetAllServicesResponse struct {
	// Normal service related meta info
	GetAllServices []GetAllServicesGetAllServicesService `json:"getAllServices"`
}

// GetGetAllServices returns GetAllServicesResponse.GetAllServices, and is useful for accessing the field via an interface.
func (v *GetAllServicesResponse) GetGetAllServices() []GetAllServicesGetAllServicesService {
	return v.GetAllServices
}

// GetAllTemplatesGetAllTemplatesDashboardConfiguration includes the requested fields of the GraphQL type DashboardConfiguration.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Dashboard Configuration provides the management capabilities for SkyWalking native UI.
type GetAllTemplatesGetAllTemplatesDashboardConfiguration struct {
	// ID is a generated UUID.
	Id string `json:"id"`
	// JSON based configuration. The format of text is the export result on the UI page.
	Configuration string `json:"configuration"`
}

// GetId returns GetAllTemplatesGetAllTemplatesDashboardConfiguration.Id, and is useful for accessing the field via an interface.
func (v *GetAllTemplatesGetAllTemplatesDashboardConfiguration) GetId() string { return v.Id }

// GetConfiguration returns GetAllTemplatesGetAllTemplatesDashboardConfiguration.Configuration, and is useful for accessing the field via an interface.
func (v *GetAllTemplatesGetAllTemplatesDashboardConfiguration) GetConfiguration() string {
	return v.Configuration
}

// GetAllTemplatesResponse is returned by GetAllTemplates on success.
type GetAllTemplatesResponse struct {
	// Read all configuration templates。
	GetAllTemplates []GetAllTemplatesGetAllTemplatesDashboardConfiguration `json:"getAllTemplates"`
}

// GetGetAllTemplates returns GetAllTemplatesResponse.GetAllTemplates, and is useful for accessing the field via an interface.
func (v *GetAllTemplatesResponse) GetGetAllTemplates() []GetAllTemplatesGetAllTemplatesDashboardConfiguration {
	return v.GetAllTemplates
}

// GetEndpointDependenciesGetEndpointDependenciesEndpointTopology includes the requested fields of the GraphQL type EndpointTopology.
// The GraphQL type's documentation follows.
//
// The endpoint topology
type GetEndpointDependenciesGetEndpointDependenciesEndpointTopology struct {
	Nodes []GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode `json:"nodes"`
	Calls []GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall         `json:"calls"`
}

// GetNodes returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopology) GetNodes() []GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode {
	return v.Nodes
}

// GetCalls returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopology) GetCalls() []GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall {
	return v.Calls
}

// GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetSource() string {
	return v.Source
}

// GetSourceComponents returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetTarget() string {
	return v.Target
}

// GetTargetComponents returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetId() string {
	return v.Id
}

// GetDetectPoints returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode includes the requested fields of the GraphQL type EndpointNode.
// The GraphQL type's documentation follows.
//
// Node in EndpointTopology
type GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode struct {
	// The instance id of each node,
	Id string `json:"id"`
	// The literal name of the #id. Endpoint Name
	Name string `json:"name"`
	// Service id
	ServiceId string `json:"serviceId"`
	// The literal name of the #serviceId.
	ServiceName string `json:"serviceName"`
	// [Deprecated]
	// No type for service instance topology.
	Type string `json:"type"`
	// It is a conjuecture node or real node, to represent an instance.
	IsReal bool `json:"isReal"`
}

// GetId returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetId() string {
	return v.Id
}

// GetName returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.Name, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetName() string {
	return v.Name
}

// GetServiceId returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.ServiceId, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetServiceId() string {
	return v.ServiceId
}

// GetServiceName returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.ServiceName, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetServiceName() string {
	return v.ServiceName
}

// GetType returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.Type, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetType() string {
	return v.Type
}

// GetIsReal returns GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesGetEndpointDependenciesEndpointTopologyNodesEndpointNode) GetIsReal() bool {
	return v.IsReal
}

// GetEndpointDependenciesResponse is returned by GetEndpointDependencies on success.
type GetEndpointDependenciesResponse struct {
	// v2 of getEndpointTopology
	GetEndpointDependencies GetEndpointDependenciesGetEndpointDependenciesEndpointTopology `json:"getEndpointDependencies"`
}

// GetGetEndpointDependencies returns GetEndpointDependenciesResponse.GetEndpointDependencies, and is useful for accessing the field via an interface.
func (v *GetEndpointDependenciesResponse) GetGetEndpointDependencies() GetEndpointDependenciesGetEndpointDependenciesEndpointTopology {
	return v.GetEndpointDependencies
}

// GetEndpointInfoGetEndpointInfo includes the requested fields of the GraphQL type EndpointInfo.
type GetEndpointInfoGetEndpointInfo struct {
	Id          string `json:"id"`
	Name        string `json:"name"`
	ServiceId   string `json:"serviceId"`
	ServiceName string `json:"serviceName"`
}

// GetId returns GetEndpointInfoGetEndpointInfo.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointInfoGetEndpointInfo) GetId() string { return v.Id }

// GetName returns GetEndpointInfoGetEndpointInfo.Name, and is useful for accessing the field via an interface.
func (v *GetEndpointInfoGetEndpointInfo) GetName() string { return v.Name }

// GetServiceId returns GetEndpointInfoGetEndpointInfo.ServiceId, and is useful for accessing the field via an interface.
func (v *GetEndpointInfoGetEndpointInfo) GetServiceId() string { return v.ServiceId }

// GetServiceName returns GetEndpointInfoGetEndpointInfo.ServiceName, and is useful for accessing the field via an interface.
func (v *GetEndpointInfoGetEndpointInfo) GetServiceName() string { return v.ServiceName }

// GetEndpointInfoResponse is returned by GetEndpointInfo on success.
type GetEndpointInfoResponse struct {
	GetEndpointInfo GetEndpointInfoGetEndpointInfo `json:"getEndpointInfo"`
}

// GetGetEndpointInfo returns GetEndpointInfoResponse.GetEndpointInfo, and is useful for accessing the field via an interface.
func (v *GetEndpointInfoResponse) GetGetEndpointInfo() GetEndpointInfoGetEndpointInfo {
	return v.GetEndpointInfo
}

// GetEndpointTopNGetEndpointTopNTopNEntity includes the requested fields of the GraphQL type TopNEntity.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type GetEndpointTopNGetEndpointTopNTopNEntity struct {
	Name  string `json:"name"`
	Id    string `json:"id"`
	Value int64  `json:"value"`
}

// GetName returns GetEndpointTopNGetEndpointTopNTopNEntity.Name, and is useful for accessing the field via an interface.
func (v *GetEndpointTopNGetEndpointTopNTopNEntity) GetName() string { return v.Name }

// GetId returns GetEndpointTopNGetEndpointTopNTopNEntity.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointTopNGetEndpointTopNTopNEntity) GetId() string { return v.Id }

// GetValue returns GetEndpointTopNGetEndpointTopNTopNEntity.Value, and is useful for accessing the field via an interface.
func (v *GetEndpointTopNGetEndpointTopNTopNEntity) GetValue() int64 { return v.Value }

// GetEndpointTopNResponse is returned by GetEndpointTopN on success.
type GetEndpointTopNResponse struct {
	GetEndpointTopN []GetEndpointTopNGetEndpointTopNTopNEntity `json:"getEndpointTopN"`
}

// GetGetEndpointTopN returns GetEndpointTopNResponse.GetEndpointTopN, and is useful for accessing the field via an interface.
func (v *GetEndpointTopNResponse) GetGetEndpointTopN() []GetEndpointTopNGetEndpointTopNTopNEntity {
	return v.GetEndpointTopN
}

// GetEndpointTopologyGetEndpointTopology includes the requested fields of the GraphQL type Topology.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The overview topology of the whole application cluster or services,
type GetEndpointTopologyGetEndpointTopology struct {
	Nodes []GetEndpointTopologyGetEndpointTopologyNodesNode `json:"nodes"`
	Calls []GetEndpointTopologyGetEndpointTopologyCallsCall `json:"calls"`
}

// GetNodes returns GetEndpointTopologyGetEndpointTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopology) GetNodes() []GetEndpointTopologyGetEndpointTopologyNodesNode {
	return v.Nodes
}

// GetCalls returns GetEndpointTopologyGetEndpointTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopology) GetCalls() []GetEndpointTopologyGetEndpointTopologyCallsCall {
	return v.Calls
}

// GetEndpointTopologyGetEndpointTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetEndpointTopologyGetEndpointTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetEndpointTopologyGetEndpointTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetSource() string { return v.Source }

// GetSourceComponents returns GetEndpointTopologyGetEndpointTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetEndpointTopologyGetEndpointTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetTarget() string { return v.Target }

// GetTargetComponents returns GetEndpointTopologyGetEndpointTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetEndpointTopologyGetEndpointTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetEndpointTopologyGetEndpointTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetEndpointTopologyGetEndpointTopologyNodesNode includes the requested fields of the GraphQL type Node.
// The GraphQL type's documentation follows.
//
// Node in Topology
type GetEndpointTopologyGetEndpointTopologyNodesNode struct {
	// The service ID of the node.
	Id string `json:"id"`
	// The literal name of the #id.
	Name string `json:"name"`
	// The type name may be
	// 1. The service provider/middleware tech, such as: Tomcat, SpringMVC
	// 2. Conjectural Service, e.g. MySQL, Redis, Kafka
	Type string `json:"type"`
	// It is a conjecture node or real node, to represent a service or endpoint.
	IsReal bool `json:"isReal"`
}

// GetId returns GetEndpointTopologyGetEndpointTopologyNodesNode.Id, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyNodesNode) GetId() string { return v.Id }

// GetName returns GetEndpointTopologyGetEndpointTopologyNodesNode.Name, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyNodesNode) GetName() string { return v.Name }

// GetType returns GetEndpointTopologyGetEndpointTopologyNodesNode.Type, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyNodesNode) GetType() string { return v.Type }

// GetIsReal returns GetEndpointTopologyGetEndpointTopologyNodesNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyGetEndpointTopologyNodesNode) GetIsReal() bool { return v.IsReal }

// GetEndpointTopologyResponse is returned by GetEndpointTopology on success.
type GetEndpointTopologyResponse struct {
	// Query the topology, based on the given endpoint
	GetEndpointTopology GetEndpointTopologyGetEndpointTopology `json:"getEndpointTopology"`
}

// GetGetEndpointTopology returns GetEndpointTopologyResponse.GetEndpointTopology, and is useful for accessing the field via an interface.
func (v *GetEndpointTopologyResponse) GetGetEndpointTopology() GetEndpointTopologyGetEndpointTopology {
	return v.GetEndpointTopology
}

// GetGlobalTopologyGetGlobalTopology includes the requested fields of the GraphQL type Topology.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The overview topology of the whole application cluster or services,
type GetGlobalTopologyGetGlobalTopology struct {
	Nodes []GetGlobalTopologyGetGlobalTopologyNodesNode `json:"nodes"`
	Calls []GetGlobalTopologyGetGlobalTopologyCallsCall `json:"calls"`
}

// GetNodes returns GetGlobalTopologyGetGlobalTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopology) GetNodes() []GetGlobalTopologyGetGlobalTopologyNodesNode {
	return v.Nodes
}

// GetCalls returns GetGlobalTopologyGetGlobalTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopology) GetCalls() []GetGlobalTopologyGetGlobalTopologyCallsCall {
	return v.Calls
}

// GetGlobalTopologyGetGlobalTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetGlobalTopologyGetGlobalTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetGlobalTopologyGetGlobalTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetSource() string { return v.Source }

// GetSourceComponents returns GetGlobalTopologyGetGlobalTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetGlobalTopologyGetGlobalTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetTarget() string { return v.Target }

// GetTargetComponents returns GetGlobalTopologyGetGlobalTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetGlobalTopologyGetGlobalTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetGlobalTopologyGetGlobalTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetGlobalTopologyGetGlobalTopologyNodesNode includes the requested fields of the GraphQL type Node.
// The GraphQL type's documentation follows.
//
// Node in Topology
type GetGlobalTopologyGetGlobalTopologyNodesNode struct {
	// The service ID of the node.
	Id string `json:"id"`
	// The literal name of the #id.
	Name string `json:"name"`
	// The type name may be
	// 1. The service provider/middleware tech, such as: Tomcat, SpringMVC
	// 2. Conjectural Service, e.g. MySQL, Redis, Kafka
	Type string `json:"type"`
	// It is a conjecture node or real node, to represent a service or endpoint.
	IsReal bool `json:"isReal"`
}

// GetId returns GetGlobalTopologyGetGlobalTopologyNodesNode.Id, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyNodesNode) GetId() string { return v.Id }

// GetName returns GetGlobalTopologyGetGlobalTopologyNodesNode.Name, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyNodesNode) GetName() string { return v.Name }

// GetType returns GetGlobalTopologyGetGlobalTopologyNodesNode.Type, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyNodesNode) GetType() string { return v.Type }

// GetIsReal returns GetGlobalTopologyGetGlobalTopologyNodesNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyGetGlobalTopologyNodesNode) GetIsReal() bool { return v.IsReal }

// GetGlobalTopologyResponse is returned by GetGlobalTopology on success.
type GetGlobalTopologyResponse struct {
	// Query the global topology
	GetGlobalTopology GetGlobalTopologyGetGlobalTopology `json:"getGlobalTopology"`
}

// GetGetGlobalTopology returns GetGlobalTopologyResponse.GetGlobalTopology, and is useful for accessing the field via an interface.
func (v *GetGlobalTopologyResponse) GetGetGlobalTopology() GetGlobalTopologyGetGlobalTopology {
	return v.GetGlobalTopology
}

// GetInstanceGetInstanceServiceInstance includes the requested fields of the GraphQL type ServiceInstance.
// The GraphQL type's documentation follows.
//
// The minimal runnable unit in the service. It provides consistent and fundamental capabilities in physical perspective.
// A service, as a logic unit, have multiple instances in the runtime.
// Such as, an OS-level processor, a pod in k8s, a running function in the FAAS engine.
type GetInstanceGetInstanceServiceInstance struct {
	Id           string                                                     `json:"id"`
	Name         string                                                     `json:"name"`
	Attributes   []GetInstanceGetInstanceServiceInstanceAttributesAttribute `json:"attributes"`
	Language     Language                                                   `json:"language"`
	InstanceUUID string                                                     `json:"instanceUUID"`
}

// GetId returns GetInstanceGetInstanceServiceInstance.Id, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstance) GetId() string { return v.Id }

// GetName returns GetInstanceGetInstanceServiceInstance.Name, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstance) GetName() string { return v.Name }

// GetAttributes returns GetInstanceGetInstanceServiceInstance.Attributes, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstance) GetAttributes() []GetInstanceGetInstanceServiceInstanceAttributesAttribute {
	return v.Attributes
}

// GetLanguage returns GetInstanceGetInstanceServiceInstance.Language, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstance) GetLanguage() Language { return v.Language }

// GetInstanceUUID returns GetInstanceGetInstanceServiceInstance.InstanceUUID, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstance) GetInstanceUUID() string { return v.InstanceUUID }

// GetInstanceGetInstanceServiceInstanceAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type GetInstanceGetInstanceServiceInstanceAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns GetInstanceGetInstanceServiceInstanceAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstanceAttributesAttribute) GetName() string { return v.Name }

// GetValue returns GetInstanceGetInstanceServiceInstanceAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *GetInstanceGetInstanceServiceInstanceAttributesAttribute) GetValue() string { return v.Value }

// GetInstanceResponse is returned by GetInstance on success.
type GetInstanceResponse struct {
	// Search and find service instance according to given ID. Return null if not existing.
	GetInstance GetInstanceGetInstanceServiceInstance `json:"getInstance"`
}

// GetGetInstance returns GetInstanceResponse.GetInstance, and is useful for accessing the field via an interface.
func (v *GetInstanceResponse) GetGetInstance() GetInstanceGetInstanceServiceInstance {
	return v.GetInstance
}

// GetLinearIntValuesGetLinearIntValues includes the requested fields of the GraphQL type IntValues.
type GetLinearIntValuesGetLinearIntValues struct {
	Values []GetLinearIntValuesGetLinearIntValuesValuesKVInt `json:"values"`
}

// GetValues returns GetLinearIntValuesGetLinearIntValues.Values, and is useful for accessing the field via an interface.
func (v *GetLinearIntValuesGetLinearIntValues) GetValues() []GetLinearIntValuesGetLinearIntValuesValuesKVInt {
	return v.Values
}

// GetLinearIntValuesGetLinearIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type GetLinearIntValuesGetLinearIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns GetLinearIntValuesGetLinearIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *GetLinearIntValuesGetLinearIntValuesValuesKVInt) GetId() string { return v.Id }

// GetValue returns GetLinearIntValuesGetLinearIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *GetLinearIntValuesGetLinearIntValuesValuesKVInt) GetValue() int64 { return v.Value }

// GetIsEmptyValue returns GetLinearIntValuesGetLinearIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *GetLinearIntValuesGetLinearIntValuesValuesKVInt) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// GetLinearIntValuesResponse is returned by GetLinearIntValues on success.
type GetLinearIntValuesResponse struct {
	GetLinearIntValues GetLinearIntValuesGetLinearIntValues `json:"getLinearIntValues"`
}

// GetGetLinearIntValues returns GetLinearIntValuesResponse.GetLinearIntValues, and is useful for accessing the field via an interface.
func (v *GetLinearIntValuesResponse) GetGetLinearIntValues() GetLinearIntValuesGetLinearIntValues {
	return v.GetLinearIntValues
}

// GetMenuItemsGetMenuItemsMenuItem includes the requested fields of the GraphQL type MenuItem.
type GetMenuItemsGetMenuItemsMenuItem struct {
	// Title name
	Title string `json:"title"`
	// Showing icon name
	Icon string `json:"icon"`
	// Linked layer name
	Layer string `json:"layer"`
	// Activated menu should be listed on the menu,
	// otherwise, it should stay in marketplace.
	Activate bool `json:"activate"`
	// Sub menu items
	SubItems []GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem `json:"subItems"`
	// Description of the item
	Description string `json:"description"`
	// The document link for the latest version of this feature.
	DocumentLink string `json:"documentLink"`
	// The i18n key for the title and description of this feature display in the UI.
	I18nKey string `json:"i18nKey"`
}

// GetTitle returns GetMenuItemsGetMenuItemsMenuItem.Title, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetTitle() string { return v.Title }

// GetIcon returns GetMenuItemsGetMenuItemsMenuItem.Icon, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetIcon() string { return v.Icon }

// GetLayer returns GetMenuItemsGetMenuItemsMenuItem.Layer, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetLayer() string { return v.Layer }

// GetActivate returns GetMenuItemsGetMenuItemsMenuItem.Activate, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetActivate() bool { return v.Activate }

// GetSubItems returns GetMenuItemsGetMenuItemsMenuItem.SubItems, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetSubItems() []GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem {
	return v.SubItems
}

// GetDescription returns GetMenuItemsGetMenuItemsMenuItem.Description, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetDescription() string { return v.Description }

// GetDocumentLink returns GetMenuItemsGetMenuItemsMenuItem.DocumentLink, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetDocumentLink() string { return v.DocumentLink }

// GetI18nKey returns GetMenuItemsGetMenuItemsMenuItem.I18nKey, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItem) GetI18nKey() string { return v.I18nKey }

// GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem includes the requested fields of the GraphQL type MenuItem.
type GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem struct {
	// Title name
	Title string `json:"title"`
	// Showing icon name
	Icon string `json:"icon"`
	// Linked layer name
	Layer string `json:"layer"`
	// Activated menu should be listed on the menu,
	// otherwise, it should stay in marketplace.
	Activate bool `json:"activate"`
	// Sub menu items
	SubItems []GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem `json:"subItems"`
	// Description of the item
	Description string `json:"description"`
	// The document link for the latest version of this feature.
	DocumentLink string `json:"documentLink"`
	// The i18n key for the title and description of this feature display in the UI.
	I18nKey string `json:"i18nKey"`
}

// GetTitle returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.Title, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetTitle() string { return v.Title }

// GetIcon returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.Icon, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetIcon() string { return v.Icon }

// GetLayer returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.Layer, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetLayer() string { return v.Layer }

// GetActivate returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.Activate, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetActivate() bool { return v.Activate }

// GetSubItems returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.SubItems, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetSubItems() []GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem {
	return v.SubItems
}

// GetDescription returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.Description, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetDescription() string {
	return v.Description
}

// GetDocumentLink returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.DocumentLink, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetDocumentLink() string {
	return v.DocumentLink
}

// GetI18nKey returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem.I18nKey, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItem) GetI18nKey() string { return v.I18nKey }

// GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem includes the requested fields of the GraphQL type MenuItem.
type GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem struct {
	// Title name
	Title string `json:"title"`
	// Showing icon name
	Icon string `json:"icon"`
	// Linked layer name
	Layer string `json:"layer"`
	// Activated menu should be listed on the menu,
	// otherwise, it should stay in marketplace.
	Activate bool `json:"activate"`
	// Description of the item
	Description string `json:"description"`
	// The document link for the latest version of this feature.
	DocumentLink string `json:"documentLink"`
	// The i18n key for the title and description of this feature display in the UI.
	I18nKey string `json:"i18nKey"`
}

// GetTitle returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.Title, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetTitle() string {
	return v.Title
}

// GetIcon returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.Icon, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetIcon() string {
	return v.Icon
}

// GetLayer returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.Layer, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetLayer() string {
	return v.Layer
}

// GetActivate returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.Activate, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetActivate() bool {
	return v.Activate
}

// GetDescription returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.Description, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetDescription() string {
	return v.Description
}

// GetDocumentLink returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.DocumentLink, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetDocumentLink() string {
	return v.DocumentLink
}

// GetI18nKey returns GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem.I18nKey, and is useful for accessing the field via an interface.
func (v *GetMenuItemsGetMenuItemsMenuItemSubItemsMenuItemSubItemsMenuItem) GetI18nKey() string {
	return v.I18nKey
}

// GetMenuItemsResponse is returned by GetMenuItems on success.
type GetMenuItemsResponse struct {
	// Read all menu items
	GetMenuItems []GetMenuItemsGetMenuItemsMenuItem `json:"getMenuItems"`
}

// GetGetMenuItems returns GetMenuItemsResponse.GetMenuItems, and is useful for accessing the field via an interface.
func (v *GetMenuItemsResponse) GetGetMenuItems() []GetMenuItemsGetMenuItemsMenuItem {
	return v.GetMenuItems
}

// GetMultipleLinearIntValuesGetMultipleLinearIntValues includes the requested fields of the GraphQL type IntValues.
type GetMultipleLinearIntValuesGetMultipleLinearIntValues struct {
	Values []GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt `json:"values"`
}

// GetValues returns GetMultipleLinearIntValuesGetMultipleLinearIntValues.Values, and is useful for accessing the field via an interface.
func (v *GetMultipleLinearIntValuesGetMultipleLinearIntValues) GetValues() []GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt {
	return v.Values
}

// GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt) GetId() string { return v.Id }

// GetValue returns GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt) GetValue() int64 {
	return v.Value
}

// GetIsEmptyValue returns GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *GetMultipleLinearIntValuesGetMultipleLinearIntValuesValuesKVInt) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// GetMultipleLinearIntValuesResponse is returned by GetMultipleLinearIntValues on success.
type GetMultipleLinearIntValuesResponse struct {
	// Query the type of metrics including multiple values, and format them as multiple linears.
	// The seq of these multiple lines base on the calculation func in OAL
	// Such as, should us this to query the result of func percentile(50,75,90,95,99) in OAL,
	// then five lines will be responded, p50 is the first element of return value.
	GetMultipleLinearIntValues []GetMultipleLinearIntValuesGetMultipleLinearIntValues `json:"getMultipleLinearIntValues"`
}

// GetGetMultipleLinearIntValues returns GetMultipleLinearIntValuesResponse.GetMultipleLinearIntValues, and is useful for accessing the field via an interface.
func (v *GetMultipleLinearIntValuesResponse) GetGetMultipleLinearIntValues() []GetMultipleLinearIntValuesGetMultipleLinearIntValues {
	return v.GetMultipleLinearIntValues
}

// GetProcessGetProcess includes the requested fields of the GraphQL type Process.
// The GraphQL type's documentation follows.
//
// The process is an operating system process under service instance.
type GetProcessGetProcess struct {
	// Process entity
	Id           string `json:"id"`
	Name         string `json:"name"`
	ServiceId    string `json:"serviceId"`
	ServiceName  string `json:"serviceName"`
	InstanceId   string `json:"instanceId"`
	InstanceName string `json:"instanceName"`
	// Which agent report this process.
	AgentId string `json:"agentId"`
	// The process found type.
	DetectType string `json:"detectType"`
	// The process attributes, different process detect type have different corresponding attributes.
	Attributes []GetProcessGetProcessAttributesAttribute `json:"attributes"`
	// The process labels.
	Labels []string `json:"labels"`
}

// GetId returns GetProcessGetProcess.Id, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetId() string { return v.Id }

// GetName returns GetProcessGetProcess.Name, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetName() string { return v.Name }

// GetServiceId returns GetProcessGetProcess.ServiceId, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetServiceId() string { return v.ServiceId }

// GetServiceName returns GetProcessGetProcess.ServiceName, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetServiceName() string { return v.ServiceName }

// GetInstanceId returns GetProcessGetProcess.InstanceId, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetInstanceId() string { return v.InstanceId }

// GetInstanceName returns GetProcessGetProcess.InstanceName, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetInstanceName() string { return v.InstanceName }

// GetAgentId returns GetProcessGetProcess.AgentId, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetAgentId() string { return v.AgentId }

// GetDetectType returns GetProcessGetProcess.DetectType, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetDetectType() string { return v.DetectType }

// GetAttributes returns GetProcessGetProcess.Attributes, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetAttributes() []GetProcessGetProcessAttributesAttribute {
	return v.Attributes
}

// GetLabels returns GetProcessGetProcess.Labels, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcess) GetLabels() []string { return v.Labels }

// GetProcessGetProcessAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type GetProcessGetProcessAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns GetProcessGetProcessAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcessAttributesAttribute) GetName() string { return v.Name }

// GetValue returns GetProcessGetProcessAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *GetProcessGetProcessAttributesAttribute) GetValue() string { return v.Value }

// GetProcessResponse is returned by GetProcess on success.
type GetProcessResponse struct {
	// Find process according to given ID. Return null if not existing.
	GetProcess GetProcessGetProcess `json:"getProcess"`
}

// GetGetProcess returns GetProcessResponse.GetProcess, and is useful for accessing the field via an interface.
func (v *GetProcessResponse) GetGetProcess() GetProcessGetProcess { return v.GetProcess }

// GetProcessTopologyGetProcessTopology includes the requested fields of the GraphQL type ProcessTopology.
type GetProcessTopologyGetProcessTopology struct {
	Nodes []GetProcessTopologyGetProcessTopologyNodesProcessNode `json:"nodes"`
	Calls []GetProcessTopologyGetProcessTopologyCallsCall        `json:"calls"`
}

// GetNodes returns GetProcessTopologyGetProcessTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopology) GetNodes() []GetProcessTopologyGetProcessTopologyNodesProcessNode {
	return v.Nodes
}

// GetCalls returns GetProcessTopologyGetProcessTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopology) GetCalls() []GetProcessTopologyGetProcessTopologyCallsCall {
	return v.Calls
}

// GetProcessTopologyGetProcessTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetProcessTopologyGetProcessTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetProcessTopologyGetProcessTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetSource() string { return v.Source }

// GetSourceComponents returns GetProcessTopologyGetProcessTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetProcessTopologyGetProcessTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetTarget() string { return v.Target }

// GetTargetComponents returns GetProcessTopologyGetProcessTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetProcessTopologyGetProcessTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetProcessTopologyGetProcessTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetProcessTopologyGetProcessTopologyNodesProcessNode includes the requested fields of the GraphQL type ProcessNode.
// The GraphQL type's documentation follows.
//
// Node in ProcessTopology
type GetProcessTopologyGetProcessTopologyNodesProcessNode struct {
	// The process id of each node.
	Id string `json:"id"`
	// Service id
	ServiceId string `json:"serviceId"`
	// The literal name of the #serviceId.
	ServiceName string `json:"serviceName"`
	// Service Instance id
	ServiceInstanceId string `json:"serviceInstanceId"`
	// The literal name of the #serviceInstanceId.
	ServiceInstanceName string `json:"serviceInstanceName"`
	// The name of the process
	Name string `json:"name"`
	// It's a virtual node or real node.
	// A unreal node means that the current node is not a process belonging to this instance, but interacting with the processes belonging to the instance.
	IsReal bool `json:"isReal"`
}

// GetId returns GetProcessTopologyGetProcessTopologyNodesProcessNode.Id, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetId() string { return v.Id }

// GetServiceId returns GetProcessTopologyGetProcessTopologyNodesProcessNode.ServiceId, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetServiceId() string {
	return v.ServiceId
}

// GetServiceName returns GetProcessTopologyGetProcessTopologyNodesProcessNode.ServiceName, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetServiceName() string {
	return v.ServiceName
}

// GetServiceInstanceId returns GetProcessTopologyGetProcessTopologyNodesProcessNode.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetServiceInstanceId() string {
	return v.ServiceInstanceId
}

// GetServiceInstanceName returns GetProcessTopologyGetProcessTopologyNodesProcessNode.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetServiceInstanceName() string {
	return v.ServiceInstanceName
}

// GetName returns GetProcessTopologyGetProcessTopologyNodesProcessNode.Name, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetName() string { return v.Name }

// GetIsReal returns GetProcessTopologyGetProcessTopologyNodesProcessNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyGetProcessTopologyNodesProcessNode) GetIsReal() bool { return v.IsReal }

// GetProcessTopologyResponse is returned by GetProcessTopology on success.
type GetProcessTopologyResponse struct {
	// Query the topology, based on the given instance
	GetProcessTopology GetProcessTopologyGetProcessTopology `json:"getProcessTopology"`
}

// GetGetProcessTopology returns GetProcessTopologyResponse.GetProcessTopology, and is useful for accessing the field via an interface.
func (v *GetProcessTopologyResponse) GetGetProcessTopology() GetProcessTopologyGetProcessTopology {
	return v.GetProcessTopology
}

// GetProfileTaskListGetProfileTaskListProfileTask includes the requested fields of the GraphQL type ProfileTask.
// The GraphQL type's documentation follows.
//
// Profile
type GetProfileTaskListGetProfileTaskListProfileTask struct {
	Id string `json:"id"`
	// monitor service
	ServiceId   string `json:"serviceId"`
	ServiceName string `json:"serviceName"`
	// endpoint name to monitored under the special service.
	EndpointName string `json:"endpointName"`
	// task start time (timestamp)
	StartTime int64 `json:"startTime"`
	// duration of this task (minute)
	Duration int `json:"duration"`
	// when the segment starts to execute, how long must it take before the monitor can be enbaled
	MinDurationThreshold int `json:"minDurationThreshold"`
	// when start monitor, time interval for each dumping the stack
	DumpPeriod int `json:"dumpPeriod"`
	// max number of traces will monitor on the sniffer
	MaxSamplingCount int `json:"maxSamplingCount"`
	// instance operation logs
	Logs []GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog `json:"logs"`
}

// GetId returns GetProfileTaskListGetProfileTaskListProfileTask.Id, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetId() string { return v.Id }

// GetServiceId returns GetProfileTaskListGetProfileTaskListProfileTask.ServiceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetServiceId() string { return v.ServiceId }

// GetServiceName returns GetProfileTaskListGetProfileTaskListProfileTask.ServiceName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetServiceName() string {
	return v.ServiceName
}

// GetEndpointName returns GetProfileTaskListGetProfileTaskListProfileTask.EndpointName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetEndpointName() string {
	return v.EndpointName
}

// GetStartTime returns GetProfileTaskListGetProfileTaskListProfileTask.StartTime, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetStartTime() int64 { return v.StartTime }

// GetDuration returns GetProfileTaskListGetProfileTaskListProfileTask.Duration, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetDuration() int { return v.Duration }

// GetMinDurationThreshold returns GetProfileTaskListGetProfileTaskListProfileTask.MinDurationThreshold, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetMinDurationThreshold() int {
	return v.MinDurationThreshold
}

// GetDumpPeriod returns GetProfileTaskListGetProfileTaskListProfileTask.DumpPeriod, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetDumpPeriod() int { return v.DumpPeriod }

// GetMaxSamplingCount returns GetProfileTaskListGetProfileTaskListProfileTask.MaxSamplingCount, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetMaxSamplingCount() int {
	return v.MaxSamplingCount
}

// GetLogs returns GetProfileTaskListGetProfileTaskListProfileTask.Logs, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTask) GetLogs() []GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog {
	return v.Logs
}

// GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog includes the requested fields of the GraphQL type ProfileTaskLog.
// The GraphQL type's documentation follows.
//
// Profile task execute log
type GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog struct {
	Id string `json:"id"`
	// execute instance
	InstanceId   string `json:"instanceId"`
	InstanceName string `json:"instanceName"`
	// operation type
	OperationType ProfileTaskLogOperationType `json:"operationType"`
	// operation time
	OperationTime int64 `json:"operationTime"`
}

// GetId returns GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog.Id, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog) GetId() string {
	return v.Id
}

// GetInstanceId returns GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog.InstanceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog) GetInstanceId() string {
	return v.InstanceId
}

// GetInstanceName returns GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog.InstanceName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog) GetInstanceName() string {
	return v.InstanceName
}

// GetOperationType returns GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog.OperationType, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog) GetOperationType() ProfileTaskLogOperationType {
	return v.OperationType
}

// GetOperationTime returns GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog.OperationTime, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListGetProfileTaskListProfileTaskLogsProfileTaskLog) GetOperationTime() int64 {
	return v.OperationTime
}

// GetProfileTaskListResponse is returned by GetProfileTaskList on success.
type GetProfileTaskListResponse struct {
	// query all task list, order by ProfileTask#startTime descending
	GetProfileTaskList []GetProfileTaskListGetProfileTaskListProfileTask `json:"getProfileTaskList"`
}

// GetGetProfileTaskList returns GetProfileTaskListResponse.GetProfileTaskList, and is useful for accessing the field via an interface.
func (v *GetProfileTaskListResponse) GetGetProfileTaskList() []GetProfileTaskListGetProfileTaskListProfileTask {
	return v.GetProfileTaskList
}

// GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog includes the requested fields of the GraphQL type ProfileTaskLog.
// The GraphQL type's documentation follows.
//
// Profile task execute log
type GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog struct {
	Id string `json:"id"`
	// execute instance
	InstanceId   string `json:"instanceId"`
	InstanceName string `json:"instanceName"`
	// operation type
	OperationType ProfileTaskLogOperationType `json:"operationType"`
	// operation time
	OperationTime int64 `json:"operationTime"`
}

// GetId returns GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog.Id, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog) GetId() string { return v.Id }

// GetInstanceId returns GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog.InstanceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog) GetInstanceId() string {
	return v.InstanceId
}

// GetInstanceName returns GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog.InstanceName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog) GetInstanceName() string {
	return v.InstanceName
}

// GetOperationType returns GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog.OperationType, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog) GetOperationType() ProfileTaskLogOperationType {
	return v.OperationType
}

// GetOperationTime returns GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog.OperationTime, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog) GetOperationTime() int64 {
	return v.OperationTime
}

// GetProfileTaskLogsResponse is returned by GetProfileTaskLogs on success.
type GetProfileTaskLogsResponse struct {
	// query all task logs
	GetProfileTaskLogs []GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog `json:"getProfileTaskLogs"`
}

// GetGetProfileTaskLogs returns GetProfileTaskLogsResponse.GetProfileTaskLogs, and is useful for accessing the field via an interface.
func (v *GetProfileTaskLogsResponse) GetGetProfileTaskLogs() []GetProfileTaskLogsGetProfileTaskLogsProfileTaskLog {
	return v.GetProfileTaskLogs
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments includes the requested fields of the GraphQL type ProfiledTraceSegments.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments struct {
	TraceId       string                                                                               `json:"traceId"`
	InstanceId    string                                                                               `json:"instanceId"`
	InstanceName  string                                                                               `json:"instanceName"`
	EndpointNames []string                                                                             `json:"endpointNames"`
	Duration      int                                                                                  `json:"duration"`
	Start         string                                                                               `json:"start"`
	Spans         []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan `json:"spans"`
}

// GetTraceId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.TraceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetTraceId() string {
	return v.TraceId
}

// GetInstanceId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.InstanceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetInstanceId() string {
	return v.InstanceId
}

// GetInstanceName returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.InstanceName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetInstanceName() string {
	return v.InstanceName
}

// GetEndpointNames returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.EndpointNames, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetEndpointNames() []string {
	return v.EndpointNames
}

// GetDuration returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.Duration, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetDuration() int {
	return v.Duration
}

// GetStart returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.Start, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetStart() string {
	return v.Start
}

// GetSpans returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments.Spans, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments) GetSpans() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan {
	return v.Spans
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan includes the requested fields of the GraphQL type ProfiledSpan.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan struct {
	SpanId              int                                                                                         `json:"spanId"`
	ParentSpanId        int                                                                                         `json:"parentSpanId"`
	SegmentId           string                                                                                      `json:"segmentId"`
	Refs                []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef `json:"refs"`
	ServiceCode         string                                                                                      `json:"serviceCode"`
	ServiceInstanceName string                                                                                      `json:"serviceInstanceName"`
	StartTime           int64                                                                                       `json:"startTime"`
	EndTime             int64                                                                                       `json:"endTime"`
	EndpointName        string                                                                                      `json:"endpointName"`
	// There are three span types: Local, Entry and Exit
	Type string `json:"type"`
	// Peer network id, e.g. host+port, ip+port
	Peer      string `json:"peer"`
	Component string `json:"component"`
	IsError   bool   `json:"isError"`
	// There are 5 layers: Unknown, Database, RPCFramework, Http, MQ and Cache
	Layer string                                                                                            `json:"layer"`
	Tags  []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue  `json:"tags"`
	Logs  []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity `json:"logs"`
	// Status represents profiling data that covers the duration of the span.
	Profiled bool `json:"profiled"`
}

// GetSpanId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.SpanId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetSpanId() int {
	return v.SpanId
}

// GetParentSpanId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.ParentSpanId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetParentSpanId() int {
	return v.ParentSpanId
}

// GetSegmentId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.SegmentId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetSegmentId() string {
	return v.SegmentId
}

// GetRefs returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Refs, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetRefs() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef {
	return v.Refs
}

// GetServiceCode returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.ServiceCode, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetServiceCode() string {
	return v.ServiceCode
}

// GetServiceInstanceName returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetServiceInstanceName() string {
	return v.ServiceInstanceName
}

// GetStartTime returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.StartTime, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetStartTime() int64 {
	return v.StartTime
}

// GetEndTime returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.EndTime, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetEndTime() int64 {
	return v.EndTime
}

// GetEndpointName returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.EndpointName, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetEndpointName() string {
	return v.EndpointName
}

// GetType returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Type, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetType() string {
	return v.Type
}

// GetPeer returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Peer, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetPeer() string {
	return v.Peer
}

// GetComponent returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Component, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetComponent() string {
	return v.Component
}

// GetIsError returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.IsError, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetIsError() bool {
	return v.IsError
}

// GetLayer returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Layer, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetLayer() string {
	return v.Layer
}

// GetTags returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Tags, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetTags() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue {
	return v.Tags
}

// GetLogs returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Logs, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetLogs() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity {
	return v.Logs
}

// GetProfiled returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan.Profiled, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpan) GetProfiled() bool {
	return v.Profiled
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity includes the requested fields of the GraphQL type LogEntity.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity struct {
	// The timestamp of the log in millisecond
	Time int64                                                                                                         `json:"time"`
	Data []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue `json:"data"`
}

// GetTime returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity.Time, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity) GetTime() int64 {
	return v.Time
}

// GetData returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity.Data, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntity) GetData() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue {
	return v.Data
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue.Key, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue) GetKey() string {
	return v.Key
}

// GetValue returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue.Value, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanLogsLogEntityDataKeyValue) GetValue() string {
	return v.Value
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Ref represents the link between the segment and its parents.
// The parent(ref) may not exists, which means batch process.
// The UI should display a list, representing the other trace IDs.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef struct {
	TraceId         string `json:"traceId"`
	ParentSegmentId string `json:"parentSegmentId"`
	ParentSpanId    int    `json:"parentSpanId"`
	// Ref type represents why did the ref happen.
	// Include: 1) CrossProcess 2) CrossThread
	Type RefType `json:"type"`
}

// GetTraceId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef.TraceId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef) GetTraceId() string {
	return v.TraceId
}

// GetParentSegmentId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef.ParentSegmentId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef) GetParentSegmentId() string {
	return v.ParentSegmentId
}

// GetParentSpanId returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef.ParentSpanId, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef) GetParentSpanId() int {
	return v.ParentSpanId
}

// GetType returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef.Type, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanRefsRef) GetType() RefType {
	return v.Type
}

// GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue) GetKey() string {
	return v.Key
}

// GetValue returns GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegmentsSpansProfiledSpanTagsKeyValue) GetValue() string {
	return v.Value
}

// GetProfileTaskSegmentsResponse is returned by GetProfileTaskSegments on success.
type GetProfileTaskSegmentsResponse struct {
	// query all task profiled segment list
	GetProfileTaskSegments []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments `json:"getProfileTaskSegments"`
}

// GetGetProfileTaskSegments returns GetProfileTaskSegmentsResponse.GetProfileTaskSegments, and is useful for accessing the field via an interface.
func (v *GetProfileTaskSegmentsResponse) GetGetProfileTaskSegments() []GetProfileTaskSegmentsGetProfileTaskSegmentsProfiledTraceSegments {
	return v.GetProfileTaskSegments
}

// GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation includes the requested fields of the GraphQL type ProfileAnalyzation.
// The GraphQL type's documentation follows.
//
// Profile analyze result
type GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation struct {
	// if not empty means backend has information gave to the user
	// such as: a large number of snapshots, only analyze part of the data
	Tip string `json:"tip"`
	// thread stack dump analyze trees
	Trees []GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree `json:"trees"`
}

// GetTip returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation.Tip, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation) GetTip() string {
	return v.Tip
}

// GetTrees returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation.Trees, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation) GetTrees() []GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree {
	return v.Trees
}

// GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree includes the requested fields of the GraphQL type ProfileStackTree.
// The GraphQL type's documentation follows.
//
// Profile thread stack anayze tree
type GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree struct {
	Elements []GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement `json:"elements"`
}

// GetElements returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree.Elements, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTree) GetElements() []GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement {
	return v.Elements
}

// GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement includes the requested fields of the GraphQL type ProfileStackElement.
// The GraphQL type's documentation follows.
//
// Profile thread stack analyze tree element
type GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement struct {
	// work for tree building, id matches multiple parentId
	Id       string `json:"id"`
	ParentId string `json:"parentId"`
	// stack code signature
	CodeSignature string `json:"codeSignature"`
	// Include the execution time of children(millisecond)
	Duration int `json:"duration"`
	// Exclude  the execution time of children(millisecond)
	DurationChildExcluded int `json:"durationChildExcluded"`
	// continuous dump count
	Count int `json:"count"`
}

// GetId returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.Id, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetId() string {
	return v.Id
}

// GetParentId returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.ParentId, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetParentId() string {
	return v.ParentId
}

// GetCodeSignature returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.CodeSignature, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetCodeSignature() string {
	return v.CodeSignature
}

// GetDuration returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.Duration, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetDuration() int {
	return v.Duration
}

// GetDurationChildExcluded returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.DurationChildExcluded, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetDurationChildExcluded() int {
	return v.DurationChildExcluded
}

// GetCount returns GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement.Count, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzationTreesProfileStackTreeElementsProfileStackElement) GetCount() int {
	return v.Count
}

// GetSegmentsProfileAnalyzeResponse is returned by GetSegmentsProfileAnalyze on success.
type GetSegmentsProfileAnalyzeResponse struct {
	// analyze multiple profiled segments, start and end time use timestamp(millisecond)
	GetSegmentsProfileAnalyze GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation `json:"getSegmentsProfileAnalyze"`
}

// GetGetSegmentsProfileAnalyze returns GetSegmentsProfileAnalyzeResponse.GetSegmentsProfileAnalyze, and is useful for accessing the field via an interface.
func (v *GetSegmentsProfileAnalyzeResponse) GetGetSegmentsProfileAnalyze() GetSegmentsProfileAnalyzeGetSegmentsProfileAnalyzeProfileAnalyzation {
	return v.GetSegmentsProfileAnalyze
}

// GetServiceGetService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type GetServiceGetService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns GetServiceGetService.Id, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetId() string { return v.Id }

// GetName returns GetServiceGetService.Name, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetName() string { return v.Name }

// GetGroup returns GetServiceGetService.Group, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetGroup() string { return v.Group }

// GetShortName returns GetServiceGetService.ShortName, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetShortName() string { return v.ShortName }

// GetLayers returns GetServiceGetService.Layers, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetLayers() []string { return v.Layers }

// GetNormal returns GetServiceGetService.Normal, and is useful for accessing the field via an interface.
func (v *GetServiceGetService) GetNormal() bool { return v.Normal }

// GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity includes the requested fields of the GraphQL type TopNEntity.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity struct {
	Name  string `json:"name"`
	Id    string `json:"id"`
	Value int64  `json:"value"`
}

// GetName returns GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity.Name, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity) GetName() string { return v.Name }

// GetId returns GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity.Id, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity) GetId() string { return v.Id }

// GetValue returns GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity.Value, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity) GetValue() int64 { return v.Value }

// GetServiceInstanceTopNResponse is returned by GetServiceInstanceTopN on success.
type GetServiceInstanceTopNResponse struct {
	GetServiceInstanceTopN []GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity `json:"getServiceInstanceTopN"`
}

// GetGetServiceInstanceTopN returns GetServiceInstanceTopNResponse.GetServiceInstanceTopN, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopNResponse) GetGetServiceInstanceTopN() []GetServiceInstanceTopNGetServiceInstanceTopNTopNEntity {
	return v.GetServiceInstanceTopN
}

// GetServiceInstanceTopologyGetServiceInstanceTopology includes the requested fields of the GraphQL type ServiceInstanceTopology.
// The GraphQL type's documentation follows.
//
// The instance topology based on the given serviceIds
type GetServiceInstanceTopologyGetServiceInstanceTopology struct {
	Nodes []GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode `json:"nodes"`
	Calls []GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall                `json:"calls"`
}

// GetNodes returns GetServiceInstanceTopologyGetServiceInstanceTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopology) GetNodes() []GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode {
	return v.Nodes
}

// GetCalls returns GetServiceInstanceTopologyGetServiceInstanceTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopology) GetCalls() []GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall {
	return v.Calls
}

// GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetSource() string {
	return v.Source
}

// GetSourceComponents returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetTarget() string {
	return v.Target
}

// GetTargetComponents returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode includes the requested fields of the GraphQL type ServiceInstanceNode.
// The GraphQL type's documentation follows.
//
// Node in ServiceInstanceTopology
type GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode struct {
	// The instance id of each node,
	Id string `json:"id"`
	// The literal name of the #id. Instance Name.
	Name string `json:"name"`
	// Service id
	ServiceId string `json:"serviceId"`
	// The literal name of the #serviceId.
	ServiceName string `json:"serviceName"`
	// [Deprecated]
	// No type for service instance topology.
	Type string `json:"type"`
	// It is a conjecture node or real node, to represent an instance.
	IsReal bool `json:"isReal"`
}

// GetId returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.Id, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetId() string {
	return v.Id
}

// GetName returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.Name, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetName() string {
	return v.Name
}

// GetServiceId returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.ServiceId, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetServiceId() string {
	return v.ServiceId
}

// GetServiceName returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.ServiceName, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetServiceName() string {
	return v.ServiceName
}

// GetType returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.Type, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetType() string {
	return v.Type
}

// GetIsReal returns GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyGetServiceInstanceTopologyNodesServiceInstanceNode) GetIsReal() bool {
	return v.IsReal
}

// GetServiceInstanceTopologyResponse is returned by GetServiceInstanceTopology on success.
type GetServiceInstanceTopologyResponse struct {
	// Query the instance topology, based on the given clientServiceId and serverServiceId
	GetServiceInstanceTopology GetServiceInstanceTopologyGetServiceInstanceTopology `json:"getServiceInstanceTopology"`
}

// GetGetServiceInstanceTopology returns GetServiceInstanceTopologyResponse.GetServiceInstanceTopology, and is useful for accessing the field via an interface.
func (v *GetServiceInstanceTopologyResponse) GetGetServiceInstanceTopology() GetServiceInstanceTopologyGetServiceInstanceTopology {
	return v.GetServiceInstanceTopology
}

// GetServiceInstancesGetServiceInstancesServiceInstance includes the requested fields of the GraphQL type ServiceInstance.
// The GraphQL type's documentation follows.
//
// The minimal runnable unit in the service. It provides consistent and fundamental capabilities in physical perspective.
// A service, as a logic unit, have multiple instances in the runtime.
// Such as, an OS-level processor, a pod in k8s, a running function in the FAAS engine.
type GetServiceInstancesGetServiceInstancesServiceInstance struct {
	Id           string                                                                     `json:"id"`
	Name         string                                                                     `json:"name"`
	Attributes   []GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute `json:"attributes"`
	Language     Language                                                                   `json:"language"`
	InstanceUUID string                                                                     `json:"instanceUUID"`
}

// GetId returns GetServiceInstancesGetServiceInstancesServiceInstance.Id, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstance) GetId() string { return v.Id }

// GetName returns GetServiceInstancesGetServiceInstancesServiceInstance.Name, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstance) GetName() string { return v.Name }

// GetAttributes returns GetServiceInstancesGetServiceInstancesServiceInstance.Attributes, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstance) GetAttributes() []GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute {
	return v.Attributes
}

// GetLanguage returns GetServiceInstancesGetServiceInstancesServiceInstance.Language, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstance) GetLanguage() Language {
	return v.Language
}

// GetInstanceUUID returns GetServiceInstancesGetServiceInstancesServiceInstance.InstanceUUID, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstance) GetInstanceUUID() string {
	return v.InstanceUUID
}

// GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute) GetName() string {
	return v.Name
}

// GetValue returns GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesGetServiceInstancesServiceInstanceAttributesAttribute) GetValue() string {
	return v.Value
}

// GetServiceInstancesResponse is returned by GetServiceInstances on success.
type GetServiceInstancesResponse struct {
	// Service instance query
	GetServiceInstances []GetServiceInstancesGetServiceInstancesServiceInstance `json:"getServiceInstances"`
}

// GetGetServiceInstances returns GetServiceInstancesResponse.GetServiceInstances, and is useful for accessing the field via an interface.
func (v *GetServiceInstancesResponse) GetGetServiceInstances() []GetServiceInstancesGetServiceInstancesServiceInstance {
	return v.GetServiceInstances
}

// GetServiceResponse is returned by GetService on success.
type GetServiceResponse struct {
	// Find service according to given ID. Return null if not existing.
	GetService GetServiceGetService `json:"getService"`
}

// GetGetService returns GetServiceResponse.GetService, and is useful for accessing the field via an interface.
func (v *GetServiceResponse) GetGetService() GetServiceGetService { return v.GetService }

// GetServiceTopNGetServiceTopNTopNEntity includes the requested fields of the GraphQL type TopNEntity.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type GetServiceTopNGetServiceTopNTopNEntity struct {
	Name  string `json:"name"`
	Id    string `json:"id"`
	Value int64  `json:"value"`
}

// GetName returns GetServiceTopNGetServiceTopNTopNEntity.Name, and is useful for accessing the field via an interface.
func (v *GetServiceTopNGetServiceTopNTopNEntity) GetName() string { return v.Name }

// GetId returns GetServiceTopNGetServiceTopNTopNEntity.Id, and is useful for accessing the field via an interface.
func (v *GetServiceTopNGetServiceTopNTopNEntity) GetId() string { return v.Id }

// GetValue returns GetServiceTopNGetServiceTopNTopNEntity.Value, and is useful for accessing the field via an interface.
func (v *GetServiceTopNGetServiceTopNTopNEntity) GetValue() int64 { return v.Value }

// GetServiceTopNResponse is returned by GetServiceTopN on success.
type GetServiceTopNResponse struct {
	// TopN is an aggregation query.
	GetServiceTopN []GetServiceTopNGetServiceTopNTopNEntity `json:"getServiceTopN"`
}

// GetGetServiceTopN returns GetServiceTopNResponse.GetServiceTopN, and is useful for accessing the field via an interface.
func (v *GetServiceTopNResponse) GetGetServiceTopN() []GetServiceTopNGetServiceTopNTopNEntity {
	return v.GetServiceTopN
}

// GetServiceTopologyGetServiceTopology includes the requested fields of the GraphQL type Topology.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The overview topology of the whole application cluster or services,
type GetServiceTopologyGetServiceTopology struct {
	Nodes []GetServiceTopologyGetServiceTopologyNodesNode `json:"nodes"`
	Calls []GetServiceTopologyGetServiceTopologyCallsCall `json:"calls"`
}

// GetNodes returns GetServiceTopologyGetServiceTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopology) GetNodes() []GetServiceTopologyGetServiceTopologyNodesNode {
	return v.Nodes
}

// GetCalls returns GetServiceTopologyGetServiceTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopology) GetCalls() []GetServiceTopologyGetServiceTopologyCallsCall {
	return v.Calls
}

// GetServiceTopologyGetServiceTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetServiceTopologyGetServiceTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetServiceTopologyGetServiceTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetSource() string { return v.Source }

// GetSourceComponents returns GetServiceTopologyGetServiceTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetServiceTopologyGetServiceTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetTarget() string { return v.Target }

// GetTargetComponents returns GetServiceTopologyGetServiceTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetServiceTopologyGetServiceTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetServiceTopologyGetServiceTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetServiceTopologyGetServiceTopologyNodesNode includes the requested fields of the GraphQL type Node.
// The GraphQL type's documentation follows.
//
// Node in Topology
type GetServiceTopologyGetServiceTopologyNodesNode struct {
	// The service ID of the node.
	Id string `json:"id"`
	// The literal name of the #id.
	Name string `json:"name"`
	// The type name may be
	// 1. The service provider/middleware tech, such as: Tomcat, SpringMVC
	// 2. Conjectural Service, e.g. MySQL, Redis, Kafka
	Type string `json:"type"`
	// It is a conjecture node or real node, to represent a service or endpoint.
	IsReal bool `json:"isReal"`
}

// GetId returns GetServiceTopologyGetServiceTopologyNodesNode.Id, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyNodesNode) GetId() string { return v.Id }

// GetName returns GetServiceTopologyGetServiceTopologyNodesNode.Name, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyNodesNode) GetName() string { return v.Name }

// GetType returns GetServiceTopologyGetServiceTopologyNodesNode.Type, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyNodesNode) GetType() string { return v.Type }

// GetIsReal returns GetServiceTopologyGetServiceTopologyNodesNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyGetServiceTopologyNodesNode) GetIsReal() bool { return v.IsReal }

// GetServiceTopologyResponse is returned by GetServiceTopology on success.
type GetServiceTopologyResponse struct {
	// Query the topology, based on the given service
	GetServiceTopology GetServiceTopologyGetServiceTopology `json:"getServiceTopology"`
}

// GetGetServiceTopology returns GetServiceTopologyResponse.GetServiceTopology, and is useful for accessing the field via an interface.
func (v *GetServiceTopologyResponse) GetGetServiceTopology() GetServiceTopologyGetServiceTopology {
	return v.GetServiceTopology
}

// GetServicesTopologyGetServicesTopology includes the requested fields of the GraphQL type Topology.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The overview topology of the whole application cluster or services,
type GetServicesTopologyGetServicesTopology struct {
	Nodes []GetServicesTopologyGetServicesTopologyNodesNode `json:"nodes"`
	Calls []GetServicesTopologyGetServicesTopologyCallsCall `json:"calls"`
}

// GetNodes returns GetServicesTopologyGetServicesTopology.Nodes, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopology) GetNodes() []GetServicesTopologyGetServicesTopologyNodesNode {
	return v.Nodes
}

// GetCalls returns GetServicesTopologyGetServicesTopology.Calls, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopology) GetCalls() []GetServicesTopologyGetServicesTopologyCallsCall {
	return v.Calls
}

// GetServicesTopologyGetServicesTopologyCallsCall includes the requested fields of the GraphQL type Call.
// The GraphQL type's documentation follows.
//
// The Call represents a directed distributed call,
// from the `source` to the `target`.
type GetServicesTopologyGetServicesTopologyCallsCall struct {
	Source string `json:"source"`
	// The protocol and tech stack used at source side in this distributed call
	// No value in instance topology and endpoint dependency.
	SourceComponents []string `json:"sourceComponents"`
	Target           string   `json:"target"`
	// The protocol and tech stack used at target side in this distributed call
	// No value in instance topology and endpoint dependency.
	TargetComponents []string `json:"targetComponents"`
	Id               string   `json:"id"`
	// The detect Points of this distributed call.
	DetectPoints []DetectPoint `json:"detectPoints"`
}

// GetSource returns GetServicesTopologyGetServicesTopologyCallsCall.Source, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetSource() string { return v.Source }

// GetSourceComponents returns GetServicesTopologyGetServicesTopologyCallsCall.SourceComponents, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetSourceComponents() []string {
	return v.SourceComponents
}

// GetTarget returns GetServicesTopologyGetServicesTopologyCallsCall.Target, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetTarget() string { return v.Target }

// GetTargetComponents returns GetServicesTopologyGetServicesTopologyCallsCall.TargetComponents, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetTargetComponents() []string {
	return v.TargetComponents
}

// GetId returns GetServicesTopologyGetServicesTopologyCallsCall.Id, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetId() string { return v.Id }

// GetDetectPoints returns GetServicesTopologyGetServicesTopologyCallsCall.DetectPoints, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyCallsCall) GetDetectPoints() []DetectPoint {
	return v.DetectPoints
}

// GetServicesTopologyGetServicesTopologyNodesNode includes the requested fields of the GraphQL type Node.
// The GraphQL type's documentation follows.
//
// Node in Topology
type GetServicesTopologyGetServicesTopologyNodesNode struct {
	// The service ID of the node.
	Id string `json:"id"`
	// The literal name of the #id.
	Name string `json:"name"`
	// The type name may be
	// 1. The service provider/middleware tech, such as: Tomcat, SpringMVC
	// 2. Conjectural Service, e.g. MySQL, Redis, Kafka
	Type string `json:"type"`
	// It is a conjecture node or real node, to represent a service or endpoint.
	IsReal bool `json:"isReal"`
}

// GetId returns GetServicesTopologyGetServicesTopologyNodesNode.Id, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyNodesNode) GetId() string { return v.Id }

// GetName returns GetServicesTopologyGetServicesTopologyNodesNode.Name, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyNodesNode) GetName() string { return v.Name }

// GetType returns GetServicesTopologyGetServicesTopologyNodesNode.Type, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyNodesNode) GetType() string { return v.Type }

// GetIsReal returns GetServicesTopologyGetServicesTopologyNodesNode.IsReal, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyGetServicesTopologyNodesNode) GetIsReal() bool { return v.IsReal }

// GetServicesTopologyResponse is returned by GetServicesTopology on success.
type GetServicesTopologyResponse struct {
	// Query the topology, based on the given services.
	// `#getServiceTopology` could be replaced by this.
	GetServicesTopology GetServicesTopologyGetServicesTopology `json:"getServicesTopology"`
}

// GetGetServicesTopology returns GetServicesTopologyResponse.GetServicesTopology, and is useful for accessing the field via an interface.
func (v *GetServicesTopologyResponse) GetGetServicesTopology() GetServicesTopologyGetServicesTopology {
	return v.GetServicesTopology
}

// GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues includes the requested fields of the GraphQL type IntValues.
type GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues struct {
	Values []GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt `json:"values"`
}

// GetValues returns GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues.Values, and is useful for accessing the field via an interface.
func (v *GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues) GetValues() []GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt {
	return v.Values
}

// GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt) GetId() string {
	return v.Id
}

// GetValue returns GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt) GetValue() int64 {
	return v.Value
}

// GetIsEmptyValue returns GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValuesValuesKVInt) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// GetSubsetOfMultipleLinearIntValuesResponse is returned by GetSubsetOfMultipleLinearIntValues on success.
type GetSubsetOfMultipleLinearIntValuesResponse struct {
	GetSubsetOfMultipleLinearIntValues []GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues `json:"getSubsetOfMultipleLinearIntValues"`
}

// GetGetSubsetOfMultipleLinearIntValues returns GetSubsetOfMultipleLinearIntValuesResponse.GetSubsetOfMultipleLinearIntValues, and is useful for accessing the field via an interface.
func (v *GetSubsetOfMultipleLinearIntValuesResponse) GetGetSubsetOfMultipleLinearIntValues() []GetSubsetOfMultipleLinearIntValuesGetSubsetOfMultipleLinearIntValues {
	return v.GetSubsetOfMultipleLinearIntValues
}

// GetTemplateGetTemplateDashboardConfiguration includes the requested fields of the GraphQL type DashboardConfiguration.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Dashboard Configuration provides the management capabilities for SkyWalking native UI.
type GetTemplateGetTemplateDashboardConfiguration struct {
	// ID is a generated UUID.
	Id string `json:"id"`
	// JSON based configuration. The format of text is the export result on the UI page.
	Configuration string `json:"configuration"`
}

// GetId returns GetTemplateGetTemplateDashboardConfiguration.Id, and is useful for accessing the field via an interface.
func (v *GetTemplateGetTemplateDashboardConfiguration) GetId() string { return v.Id }

// GetConfiguration returns GetTemplateGetTemplateDashboardConfiguration.Configuration, and is useful for accessing the field via an interface.
func (v *GetTemplateGetTemplateDashboardConfiguration) GetConfiguration() string {
	return v.Configuration
}

// GetTemplateResponse is returned by GetTemplate on success.
type GetTemplateResponse struct {
	// Read an existing UI template according to given id.
	GetTemplate GetTemplateGetTemplateDashboardConfiguration `json:"getTemplate"`
}

// GetGetTemplate returns GetTemplateResponse.GetTemplate, and is useful for accessing the field via an interface.
func (v *GetTemplateResponse) GetGetTemplate() GetTemplateGetTemplateDashboardConfiguration {
	return v.GetTemplate
}

// GetThermodynamicGetThermodynamic includes the requested fields of the GraphQL type Thermodynamic.
type GetThermodynamicGetThermodynamic struct {
	// Each element in nodes represents a point in Thermodynamic Diagram
	// And the element includes three values:
	// 1) Time Bucket based on query duration
	// 2) Response time index.
	// Response time = [responseTimeStep * index, responseTimeStep * (index+1))
	// The last element: [Response Time * index, MAX)
	// 3) The number of calls in this response time duration.
	//
	// Example:
	// [ [0, 0, 10], [0, 1, 43], ...]
	// These ^^^ two represent the left bottom element, and another element above it.
	Nodes     [][]int `json:"nodes"`
	AxisYStep int     `json:"axisYStep"`
}

// GetNodes returns GetThermodynamicGetThermodynamic.Nodes, and is useful for accessing the field via an interface.
func (v *GetThermodynamicGetThermodynamic) GetNodes() [][]int { return v.Nodes }

// GetAxisYStep returns GetThermodynamicGetThermodynamic.AxisYStep, and is useful for accessing the field via an interface.
func (v *GetThermodynamicGetThermodynamic) GetAxisYStep() int { return v.AxisYStep }

// GetThermodynamicResponse is returned by GetThermodynamic on success.
type GetThermodynamicResponse struct {
	GetThermodynamic GetThermodynamicGetThermodynamic `json:"getThermodynamic"`
}

// GetGetThermodynamic returns GetThermodynamicResponse.GetThermodynamic, and is useful for accessing the field via an interface.
func (v *GetThermodynamicResponse) GetGetThermodynamic() GetThermodynamicGetThermodynamic {
	return v.GetThermodynamic
}

// GetTimeInfoGetTimeInfo includes the requested fields of the GraphQL type TimeInfo.
type GetTimeInfoGetTimeInfo struct {
	// server current timezone, format: +0800
	Timezone string `json:"timezone"`
	// server current timestamp, format: 1569124528392
	CurrentTimestamp int64 `json:"currentTimestamp"`
}

// GetTimezone returns GetTimeInfoGetTimeInfo.Timezone, and is useful for accessing the field via an interface.
func (v *GetTimeInfoGetTimeInfo) GetTimezone() string { return v.Timezone }

// GetCurrentTimestamp returns GetTimeInfoGetTimeInfo.CurrentTimestamp, and is useful for accessing the field via an interface.
func (v *GetTimeInfoGetTimeInfo) GetCurrentTimestamp() int64 { return v.CurrentTimestamp }

// GetTimeInfoResponse is returned by GetTimeInfo on success.
type GetTimeInfoResponse struct {
	GetTimeInfo GetTimeInfoGetTimeInfo `json:"getTimeInfo"`
}

// GetGetTimeInfo returns GetTimeInfoResponse.GetTimeInfo, and is useful for accessing the field via an interface.
func (v *GetTimeInfoResponse) GetGetTimeInfo() GetTimeInfoGetTimeInfo { return v.GetTimeInfo }

// GetTopNRecordsGetTopNRecordsTopNRecord includes the requested fields of the GraphQL type TopNRecord.
type GetTopNRecordsGetTopNRecordsTopNRecord struct {
	Statement string `json:"statement"`
	Latency   int64  `json:"latency"`
	// Have value, Only if the record has the trace id.
	// Slow record
	TraceId string `json:"traceId"`
}

// GetStatement returns GetTopNRecordsGetTopNRecordsTopNRecord.Statement, and is useful for accessing the field via an interface.
func (v *GetTopNRecordsGetTopNRecordsTopNRecord) GetStatement() string { return v.Statement }

// GetLatency returns GetTopNRecordsGetTopNRecordsTopNRecord.Latency, and is useful for accessing the field via an interface.
func (v *GetTopNRecordsGetTopNRecordsTopNRecord) GetLatency() int64 { return v.Latency }

// GetTraceId returns GetTopNRecordsGetTopNRecordsTopNRecord.TraceId, and is useful for accessing the field via an interface.
func (v *GetTopNRecordsGetTopNRecordsTopNRecord) GetTraceId() string { return v.TraceId }

// GetTopNRecordsResponse is returned by GetTopNRecords on success.
type GetTopNRecordsResponse struct {
	GetTopNRecords []GetTopNRecordsGetTopNRecordsTopNRecord `json:"getTopNRecords"`
}

// GetGetTopNRecords returns GetTopNRecordsResponse.GetTopNRecords, and is useful for accessing the field via an interface.
func (v *GetTopNRecordsResponse) GetGetTopNRecords() []GetTopNRecordsGetTopNRecordsTopNRecord {
	return v.GetTopNRecords
}

// GetValuesGetValuesIntValues includes the requested fields of the GraphQL type IntValues.
type GetValuesGetValuesIntValues struct {
	Values []GetValuesGetValuesIntValuesValuesKVInt `json:"values"`
}

// GetValues returns GetValuesGetValuesIntValues.Values, and is useful for accessing the field via an interface.
func (v *GetValuesGetValuesIntValues) GetValues() []GetValuesGetValuesIntValuesValuesKVInt {
	return v.Values
}

// GetValuesGetValuesIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type GetValuesGetValuesIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns GetValuesGetValuesIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *GetValuesGetValuesIntValuesValuesKVInt) GetId() string { return v.Id }

// GetValue returns GetValuesGetValuesIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *GetValuesGetValuesIntValuesValuesKVInt) GetValue() int64 { return v.Value }

// GetIsEmptyValue returns GetValuesGetValuesIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *GetValuesGetValuesIntValuesValuesKVInt) GetIsEmptyValue() bool { return v.IsEmptyValue }

// GetValuesResponse is returned by GetValues on success.
type GetValuesResponse struct {
	GetValues GetValuesGetValuesIntValues `json:"getValues"`
}

// GetGetValues returns GetValuesResponse.GetValues, and is useful for accessing the field via an interface.
func (v *GetValuesResponse) GetGetValues() GetValuesGetValuesIntValues { return v.GetValues }

// KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult includes the requested fields of the GraphQL type EBPFNetworkKeepProfilingResult.
// The GraphQL type's documentation follows.
//
// eBPF Profiling task keep alive result
type KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult struct {
	// TRUE if the task is kept alive successfully
	// When one of the following conditions occurs, response in error status:
	// 1. The profiling task does not exist.
	// 2. The target type of profiling task is not "NETWORK".
	// 3. The profiling task is already finished when the OAP received keep-alive request.
	Status bool `json:"status"`
	// error reason when status == FALSE
	ErrorReason string `json:"errorReason"`
}

// GetStatus returns KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult.Status, and is useful for accessing the field via an interface.
func (v *KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult) GetStatus() bool {
	return v.Status
}

// GetErrorReason returns KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult.ErrorReason, and is useful for accessing the field via an interface.
func (v *KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult) GetErrorReason() string {
	return v.ErrorReason
}

// KeepEBPFNetworkProfilingResponse is returned by KeepEBPFNetworkProfiling on success.
type KeepEBPFNetworkProfilingResponse struct {
	// keep alive the eBPF profiling task
	KeepEBPFNetworkProfiling KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult `json:"keepEBPFNetworkProfiling"`
}

// GetKeepEBPFNetworkProfiling returns KeepEBPFNetworkProfilingResponse.KeepEBPFNetworkProfiling, and is useful for accessing the field via an interface.
func (v *KeepEBPFNetworkProfilingResponse) GetKeepEBPFNetworkProfiling() KeepEBPFNetworkProfilingKeepEBPFNetworkProfilingEBPFNetworkKeepProfilingResult {
	return v.KeepEBPFNetworkProfiling
}

type Language string

const (
	// For not language based agent, the language is impossible to tell.
	LanguageUnknown Language = "UNKNOWN"
	LanguageJava    Language = "JAVA"
	LanguageDotnet  Language = "DOTNET"
	LanguageNodejs  Language = "NODEJS"
	LanguagePython  Language = "PYTHON"
	LanguageRuby    Language = "RUBY"
	LanguageGo      Language = "GO"
	LanguageLua     Language = "LUA"
	LanguagePhp     Language = "PHP"
)

// ListInstancesListInstancesServiceInstance includes the requested fields of the GraphQL type ServiceInstance.
// The GraphQL type's documentation follows.
//
// The minimal runnable unit in the service. It provides consistent and fundamental capabilities in physical perspective.
// A service, as a logic unit, have multiple instances in the runtime.
// Such as, an OS-level processor, a pod in k8s, a running function in the FAAS engine.
type ListInstancesListInstancesServiceInstance struct {
	Id           string                                                         `json:"id"`
	Name         string                                                         `json:"name"`
	Attributes   []ListInstancesListInstancesServiceInstanceAttributesAttribute `json:"attributes"`
	Language     Language                                                       `json:"language"`
	InstanceUUID string                                                         `json:"instanceUUID"`
}

// GetId returns ListInstancesListInstancesServiceInstance.Id, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstance) GetId() string { return v.Id }

// GetName returns ListInstancesListInstancesServiceInstance.Name, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstance) GetName() string { return v.Name }

// GetAttributes returns ListInstancesListInstancesServiceInstance.Attributes, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstance) GetAttributes() []ListInstancesListInstancesServiceInstanceAttributesAttribute {
	return v.Attributes
}

// GetLanguage returns ListInstancesListInstancesServiceInstance.Language, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstance) GetLanguage() Language { return v.Language }

// GetInstanceUUID returns ListInstancesListInstancesServiceInstance.InstanceUUID, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstance) GetInstanceUUID() string { return v.InstanceUUID }

// ListInstancesListInstancesServiceInstanceAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type ListInstancesListInstancesServiceInstanceAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ListInstancesListInstancesServiceInstanceAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstanceAttributesAttribute) GetName() string {
	return v.Name
}

// GetValue returns ListInstancesListInstancesServiceInstanceAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *ListInstancesListInstancesServiceInstanceAttributesAttribute) GetValue() string {
	return v.Value
}

// ListInstancesResponse is returned by ListInstances on success.
type ListInstancesResponse struct {
	// Read service instance list.
	ListInstances []ListInstancesListInstancesServiceInstance `json:"listInstances"`
}

// GetListInstances returns ListInstancesResponse.ListInstances, and is useful for accessing the field via an interface.
func (v *ListInstancesResponse) GetListInstances() []ListInstancesListInstancesServiceInstance {
	return v.ListInstances
}

// ListLayersResponse is returned by ListLayers on success.
type ListLayersResponse struct {
	// Read all available layers
	// UI could use this list to determine available dashboards/panels
	// The available layers would change with time in the runtime, because new service could be detected in any time.
	// This list should be loaded periodically.
	ListLayers []string `json:"listLayers"`
}

// GetListLayers returns ListLayersResponse.ListLayers, and is useful for accessing the field via an interface.
func (v *ListLayersResponse) GetListLayers() []string { return v.ListLayers }

// ListMetricsListMetricsMetricDefinition includes the requested fields of the GraphQL type MetricDefinition.
// The GraphQL type's documentation follows.
//
// Define the metrics provided in the OAP server.
type ListMetricsListMetricsMetricDefinition struct {
	Name string      `json:"name"`
	Type MetricsType `json:"type"`
	// Catalog includes
	// SERVICE_CATALOG,SERVICE_INSTANCE_CATALOG,ENDPOINT_CATALOG,
	// SERVICE_RELATION_CATALOG,SERVICE_INSTANCE_RELATION_CATALOG_NAME,ENDPOINT_RELATION_CATALOG_NAME
	Catalog string `json:"catalog"`
}

// GetName returns ListMetricsListMetricsMetricDefinition.Name, and is useful for accessing the field via an interface.
func (v *ListMetricsListMetricsMetricDefinition) GetName() string { return v.Name }

// GetType returns ListMetricsListMetricsMetricDefinition.Type, and is useful for accessing the field via an interface.
func (v *ListMetricsListMetricsMetricDefinition) GetType() MetricsType { return v.Type }

// GetCatalog returns ListMetricsListMetricsMetricDefinition.Catalog, and is useful for accessing the field via an interface.
func (v *ListMetricsListMetricsMetricDefinition) GetCatalog() string { return v.Catalog }

// ListMetricsResponse is returned by ListMetrics on success.
type ListMetricsResponse struct {
	// Get the list of all available metrics in the current OAP server.
	// Param, regex, could be used to filter the metrics by name.
	ListMetrics []ListMetricsListMetricsMetricDefinition `json:"listMetrics"`
}

// GetListMetrics returns ListMetricsResponse.ListMetrics, and is useful for accessing the field via an interface.
func (v *ListMetricsResponse) GetListMetrics() []ListMetricsListMetricsMetricDefinition {
	return v.ListMetrics
}

// ListProcessesListProcessesProcess includes the requested fields of the GraphQL type Process.
// The GraphQL type's documentation follows.
//
// The process is an operating system process under service instance.
type ListProcessesListProcessesProcess struct {
	// Process entity
	Id           string `json:"id"`
	Name         string `json:"name"`
	ServiceId    string `json:"serviceId"`
	ServiceName  string `json:"serviceName"`
	InstanceId   string `json:"instanceId"`
	InstanceName string `json:"instanceName"`
	// Which agent report this process.
	AgentId string `json:"agentId"`
	// The process found type.
	DetectType string `json:"detectType"`
	// The process attributes, different process detect type have different corresponding attributes.
	Attributes []ListProcessesListProcessesProcessAttributesAttribute `json:"attributes"`
	// The process labels.
	Labels []string `json:"labels"`
}

// GetId returns ListProcessesListProcessesProcess.Id, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetId() string { return v.Id }

// GetName returns ListProcessesListProcessesProcess.Name, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetName() string { return v.Name }

// GetServiceId returns ListProcessesListProcessesProcess.ServiceId, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetServiceId() string { return v.ServiceId }

// GetServiceName returns ListProcessesListProcessesProcess.ServiceName, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetServiceName() string { return v.ServiceName }

// GetInstanceId returns ListProcessesListProcessesProcess.InstanceId, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetInstanceId() string { return v.InstanceId }

// GetInstanceName returns ListProcessesListProcessesProcess.InstanceName, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetInstanceName() string { return v.InstanceName }

// GetAgentId returns ListProcessesListProcessesProcess.AgentId, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetAgentId() string { return v.AgentId }

// GetDetectType returns ListProcessesListProcessesProcess.DetectType, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetDetectType() string { return v.DetectType }

// GetAttributes returns ListProcessesListProcessesProcess.Attributes, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetAttributes() []ListProcessesListProcessesProcessAttributesAttribute {
	return v.Attributes
}

// GetLabels returns ListProcessesListProcessesProcess.Labels, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcess) GetLabels() []string { return v.Labels }

// ListProcessesListProcessesProcessAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type ListProcessesListProcessesProcessAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns ListProcessesListProcessesProcessAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcessAttributesAttribute) GetName() string { return v.Name }

// GetValue returns ListProcessesListProcessesProcessAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *ListProcessesListProcessesProcessAttributesAttribute) GetValue() string { return v.Value }

// ListProcessesResponse is returned by ListProcesses on success.
type ListProcessesResponse struct {
	// Read process list.
	ListProcesses []ListProcessesListProcessesProcess `json:"listProcesses"`
}

// GetListProcesses returns ListProcessesResponse.ListProcesses, and is useful for accessing the field via an interface.
func (v *ListProcessesResponse) GetListProcesses() []ListProcessesListProcessesProcess {
	return v.ListProcesses
}

// ListServicesListServicesService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type ListServicesListServicesService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns ListServicesListServicesService.Id, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetId() string { return v.Id }

// GetName returns ListServicesListServicesService.Name, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetName() string { return v.Name }

// GetGroup returns ListServicesListServicesService.Group, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetGroup() string { return v.Group }

// GetShortName returns ListServicesListServicesService.ShortName, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetShortName() string { return v.ShortName }

// GetLayers returns ListServicesListServicesService.Layers, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetLayers() []string { return v.Layers }

// GetNormal returns ListServicesListServicesService.Normal, and is useful for accessing the field via an interface.
func (v *ListServicesListServicesService) GetNormal() bool { return v.Normal }

// ListServicesResponse is returned by ListServices on success.
type ListServicesResponse struct {
	// Read the service list according to layer.
	ListServices []ListServicesListServicesService `json:"listServices"`
}

// GetListServices returns ListServicesResponse.ListServices, and is useful for accessing the field via an interface.
func (v *ListServicesResponse) GetListServices() []ListServicesListServicesService {
	return v.ListServices
}

// Represent the conditions used for query logs
type LogQueryCondition struct {
	// Represent the conditions used for query logs
	ServiceId string `json:"serviceId"`
	// Represent the conditions used for query logs
	ServiceInstanceId string `json:"serviceInstanceId"`
	// Represent the conditions used for query logs
	EndpointId string `json:"endpointId"`
	// Represent the conditions used for query logs
	RelatedTrace TraceScopeCondition `json:"relatedTrace"`
	// Represent the conditions used for query logs
	QueryDuration Duration `json:"queryDuration"`
	// Represent the conditions used for query logs
	Paging Pagination `json:"paging"`
	// Represent the conditions used for query logs
	Tags []LogTag `json:"tags"`
	// Represent the conditions used for query logs
	KeywordsOfContent []string `json:"keywordsOfContent"`
	// Represent the conditions used for query logs
	ExcludingKeywordsOfContent []string `json:"excludingKeywordsOfContent"`
	// Represent the conditions used for query logs
	QueryOrder Order `json:"queryOrder"`
}

// GetServiceId returns LogQueryCondition.ServiceId, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetServiceId() string { return v.ServiceId }

// GetServiceInstanceId returns LogQueryCondition.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetEndpointId returns LogQueryCondition.EndpointId, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetEndpointId() string { return v.EndpointId }

// GetRelatedTrace returns LogQueryCondition.RelatedTrace, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetRelatedTrace() TraceScopeCondition { return v.RelatedTrace }

// GetQueryDuration returns LogQueryCondition.QueryDuration, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetQueryDuration() Duration { return v.QueryDuration }

// GetPaging returns LogQueryCondition.Paging, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetPaging() Pagination { return v.Paging }

// GetTags returns LogQueryCondition.Tags, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetTags() []LogTag { return v.Tags }

// GetKeywordsOfContent returns LogQueryCondition.KeywordsOfContent, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetKeywordsOfContent() []string { return v.KeywordsOfContent }

// GetExcludingKeywordsOfContent returns LogQueryCondition.ExcludingKeywordsOfContent, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetExcludingKeywordsOfContent() []string {
	return v.ExcludingKeywordsOfContent
}

// GetQueryOrder returns LogQueryCondition.QueryOrder, and is useful for accessing the field via an interface.
func (v *LogQueryCondition) GetQueryOrder() Order { return v.QueryOrder }

type LogTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns LogTag.Key, and is useful for accessing the field via an interface.
func (v *LogTag) GetKey() string { return v.Key }

// GetValue returns LogTag.Value, and is useful for accessing the field via an interface.
func (v *LogTag) GetValue() string { return v.Value }

type LogTestRequest struct {
	Log string `json:"log"`
	Dsl string `json:"dsl"`
}

// GetLog returns LogTestRequest.Log, and is useful for accessing the field via an interface.
func (v *LogTestRequest) GetLog() string { return v.Log }

// GetDsl returns LogTestRequest.Dsl, and is useful for accessing the field via an interface.
func (v *LogTestRequest) GetDsl() string { return v.Dsl }

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
type MetricCondition struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	Name string `json:"name"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	Id string `json:"id"`
}

// GetName returns MetricCondition.Name, and is useful for accessing the field via an interface.
func (v *MetricCondition) GetName() string { return v.Name }

// GetId returns MetricCondition.Id, and is useful for accessing the field via an interface.
func (v *MetricCondition) GetId() string { return v.Id }

type MetricsCondition struct {
	Name   string `json:"name"`
	Entity Entity `json:"entity"`
}

// GetName returns MetricsCondition.Name, and is useful for accessing the field via an interface.
func (v *MetricsCondition) GetName() string { return v.Name }

// GetEntity returns MetricsCondition.Entity, and is useful for accessing the field via an interface.
func (v *MetricsCondition) GetEntity() Entity { return v.Entity }

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Legacy metrics query protocol deprecated since 9.5.0. Replaced by the metrics-v3.
// Metrics v2 query protocol is an alternative metrics query(s) of original v1,
// defined in the metric.graphql, top-n-records.graphqls, and aggregation.graphqls.
// By leveraging the new ID rule(no register) in the v8, we could query metrics based on name(s) directly.
// Metrics type is a new concept since v8.
type MetricsType string

const (
	// Can't find the metrics type definition.
	MetricsTypeUnknown MetricsType = "UNKNOWN"
	// Regular value type is suitable for readMetricsValue, readMetricsValues and sortMetrics
	MetricsTypeRegularValue MetricsType = "REGULAR_VALUE"
	// Metrics value includes multiple labels, is suitable for readLabeledMetricsValues
	// Label should be assigned before the query happens, such as at the setting stage
	MetricsTypeLabeledValue MetricsType = "LABELED_VALUE"
	// Heatmap value suitable for readHeatMap
	MetricsTypeHeatmap MetricsType = "HEATMAP"
	// Top metrics is for readSampledRecords only.
	MetricsTypeSampledRecord MetricsType = "SAMPLED_RECORD"
)

// Used for add new template
type NewDashboardSetting struct {
	// Used for add new template
	Configuration string `json:"configuration"`
}

// GetConfiguration returns NewDashboardSetting.Configuration, and is useful for accessing the field via an interface.
func (v *NewDashboardSetting) GetConfiguration() string { return v.Configuration }

type Order string

const (
	OrderAsc Order = "ASC"
	OrderDes Order = "DES"
)

type Pagination struct {
	PageNum  int `json:"pageNum"`
	PageSize int `json:"pageSize"`
}

// GetPageNum returns Pagination.PageNum, and is useful for accessing the field via an interface.
func (v *Pagination) GetPageNum() int { return v.PageNum }

// GetPageSize returns Pagination.PageSize, and is useful for accessing the field via an interface.
func (v *Pagination) GetPageSize() int { return v.PageSize }

type ProfileAnalyzeTimeRange struct {
	Start int64 `json:"start"`
	End   int64 `json:"end"`
}

// GetStart returns ProfileAnalyzeTimeRange.Start, and is useful for accessing the field via an interface.
func (v *ProfileAnalyzeTimeRange) GetStart() int64 { return v.Start }

// GetEnd returns ProfileAnalyzeTimeRange.End, and is useful for accessing the field via an interface.
func (v *ProfileAnalyzeTimeRange) GetEnd() int64 { return v.End }

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Profile task create need data
type ProfileTaskCreationRequest struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	ServiceId string `json:"serviceId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	EndpointName string `json:"endpointName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	StartTime int64 `json:"startTime"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	Duration int `json:"duration"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	MinDurationThreshold int `json:"minDurationThreshold"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	DumpPeriod int `json:"dumpPeriod"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Profile task create need data
	MaxSamplingCount int `json:"maxSamplingCount"`
}

// GetServiceId returns ProfileTaskCreationRequest.ServiceId, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetServiceId() string { return v.ServiceId }

// GetEndpointName returns ProfileTaskCreationRequest.EndpointName, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetEndpointName() string { return v.EndpointName }

// GetStartTime returns ProfileTaskCreationRequest.StartTime, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetStartTime() int64 { return v.StartTime }

// GetDuration returns ProfileTaskCreationRequest.Duration, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetDuration() int { return v.Duration }

// GetMinDurationThreshold returns ProfileTaskCreationRequest.MinDurationThreshold, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetMinDurationThreshold() int { return v.MinDurationThreshold }

// GetDumpPeriod returns ProfileTaskCreationRequest.DumpPeriod, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetDumpPeriod() int { return v.DumpPeriod }

// GetMaxSamplingCount returns ProfileTaskCreationRequest.MaxSamplingCount, and is useful for accessing the field via an interface.
func (v *ProfileTaskCreationRequest) GetMaxSamplingCount() int { return v.MaxSamplingCount }

// Profile task log operation type
type ProfileTaskLogOperationType string

const (
	// when sniffer has notified
	ProfileTaskLogOperationTypeNotified ProfileTaskLogOperationType = "NOTIFIED"
	// when sniffer has execution finished to report
	ProfileTaskLogOperationTypeExecutionFinished ProfileTaskLogOperationType = "EXECUTION_FINISHED"
)

// QueryBasicTracesQueryBasicTracesTraceBrief includes the requested fields of the GraphQL type TraceBrief.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The list of traces
type QueryBasicTracesQueryBasicTracesTraceBrief struct {
	Traces []QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace `json:"traces"`
}

// GetTraces returns QueryBasicTracesQueryBasicTracesTraceBrief.Traces, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBrief) GetTraces() []QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace {
	return v.Traces
}

// QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace includes the requested fields of the GraphQL type BasicTrace.
// The GraphQL type's documentation follows.
//
// Trace basic info
type QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace struct {
	SegmentId     string   `json:"segmentId"`
	EndpointNames []string `json:"endpointNames"`
	Duration      int      `json:"duration"`
	Start         string   `json:"start"`
	IsError       bool     `json:"isError"`
	TraceIds      []string `json:"traceIds"`
}

// GetSegmentId returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.SegmentId, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetSegmentId() string {
	return v.SegmentId
}

// GetEndpointNames returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.EndpointNames, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetEndpointNames() []string {
	return v.EndpointNames
}

// GetDuration returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.Duration, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetDuration() int {
	return v.Duration
}

// GetStart returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.Start, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetStart() string {
	return v.Start
}

// GetIsError returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.IsError, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetIsError() bool {
	return v.IsError
}

// GetTraceIds returns QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace.TraceIds, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesQueryBasicTracesTraceBriefTracesBasicTrace) GetTraceIds() []string {
	return v.TraceIds
}

// QueryBasicTracesResponse is returned by QueryBasicTraces on success.
type QueryBasicTracesResponse struct {
	// Search segment list with given conditions
	QueryBasicTraces QueryBasicTracesQueryBasicTracesTraceBrief `json:"queryBasicTraces"`
}

// GetQueryBasicTraces returns QueryBasicTracesResponse.QueryBasicTraces, and is useful for accessing the field via an interface.
func (v *QueryBasicTracesResponse) GetQueryBasicTraces() QueryBasicTracesQueryBasicTracesTraceBrief {
	return v.QueryBasicTraces
}

// QueryBrowserErrorLogsQueryBrowserErrorLogs includes the requested fields of the GraphQL type BrowserErrorLogs.
// The GraphQL type's documentation follows.
//
// The list of browser error log
type QueryBrowserErrorLogsQueryBrowserErrorLogs struct {
	Logs []QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog `json:"logs"`
}

// GetLogs returns QueryBrowserErrorLogsQueryBrowserErrorLogs.Logs, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogs) GetLogs() []QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog {
	return v.Logs
}

// QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog includes the requested fields of the GraphQL type BrowserErrorLog.
// The GraphQL type's documentation follows.
//
// Represent the browser error log
type QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog struct {
	Service            string        `json:"service"`
	ServiceVersion     string        `json:"serviceVersion"`
	Time               int64         `json:"time"`
	PagePath           string        `json:"pagePath"`
	Category           ErrorCategory `json:"category"`
	Grade              string        `json:"grade"`
	Message            string        `json:"message"`
	Line               int           `json:"line"`
	Col                int           `json:"col"`
	Stack              string        `json:"stack"`
	ErrorUrl           string        `json:"errorUrl"`
	FirstReportedError bool          `json:"firstReportedError"`
}

// GetService returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Service, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetService() string {
	return v.Service
}

// GetServiceVersion returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.ServiceVersion, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetServiceVersion() string {
	return v.ServiceVersion
}

// GetTime returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Time, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetTime() int64 {
	return v.Time
}

// GetPagePath returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.PagePath, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetPagePath() string {
	return v.PagePath
}

// GetCategory returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Category, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetCategory() ErrorCategory {
	return v.Category
}

// GetGrade returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Grade, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetGrade() string {
	return v.Grade
}

// GetMessage returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Message, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetMessage() string {
	return v.Message
}

// GetLine returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Line, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetLine() int { return v.Line }

// GetCol returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Col, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetCol() int { return v.Col }

// GetStack returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.Stack, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetStack() string {
	return v.Stack
}

// GetErrorUrl returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.ErrorUrl, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetErrorUrl() string {
	return v.ErrorUrl
}

// GetFirstReportedError returns QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog.FirstReportedError, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsQueryBrowserErrorLogsLogsBrowserErrorLog) GetFirstReportedError() bool {
	return v.FirstReportedError
}

// QueryBrowserErrorLogsResponse is returned by QueryBrowserErrorLogs on success.
type QueryBrowserErrorLogsResponse struct {
	QueryBrowserErrorLogs QueryBrowserErrorLogsQueryBrowserErrorLogs `json:"queryBrowserErrorLogs"`
}

// GetQueryBrowserErrorLogs returns QueryBrowserErrorLogsResponse.QueryBrowserErrorLogs, and is useful for accessing the field via an interface.
func (v *QueryBrowserErrorLogsResponse) GetQueryBrowserErrorLogs() QueryBrowserErrorLogsQueryBrowserErrorLogs {
	return v.QueryBrowserErrorLogs
}

// QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance includes the requested fields of the GraphQL type ContinuousProfilingMonitoringInstance.
// The GraphQL type's documentation follows.
//
// The Continuous Profiling monitoring instance
type QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance struct {
	Id                   string                                                                                                                                           `json:"id"`
	Name                 string                                                                                                                                           `json:"name"`
	Attributes           []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute `json:"attributes"`
	TriggeredCount       int                                                                                                                                              `json:"triggeredCount"`
	LastTriggerTimestamp int64                                                                                                                                            `json:"lastTriggerTimestamp"`
	// monitoring process list under the monitoring instance
	Processes []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess `json:"processes"`
}

// GetId returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.Id, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetId() string {
	return v.Id
}

// GetName returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.Name, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetName() string {
	return v.Name
}

// GetAttributes returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.Attributes, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetAttributes() []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute {
	return v.Attributes
}

// GetTriggeredCount returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.TriggeredCount, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetTriggeredCount() int {
	return v.TriggeredCount
}

// GetLastTriggerTimestamp returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.LastTriggerTimestamp, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetLastTriggerTimestamp() int64 {
	return v.LastTriggerTimestamp
}

// GetProcesses returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance.Processes, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance) GetProcesses() []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess {
	return v.Processes
}

// QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute) GetName() string {
	return v.Name
}

// GetValue returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceAttributesAttribute) GetValue() string {
	return v.Value
}

// QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess includes the requested fields of the GraphQL type ContinuousProfilingMonitoringProcess.
// The GraphQL type's documentation follows.
//
// The Continuous Profiling monitoring process
type QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess struct {
	Id                   string   `json:"id"`
	Name                 string   `json:"name"`
	DetectType           string   `json:"detectType"`
	Labels               []string `json:"labels"`
	TriggeredCount       int      `json:"triggeredCount"`
	LastTriggerTimestamp int64    `json:"lastTriggerTimestamp"`
}

// GetId returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.Id, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetId() string {
	return v.Id
}

// GetName returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.Name, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetName() string {
	return v.Name
}

// GetDetectType returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.DetectType, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetDetectType() string {
	return v.DetectType
}

// GetLabels returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.Labels, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetLabels() []string {
	return v.Labels
}

// GetTriggeredCount returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.TriggeredCount, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetTriggeredCount() int {
	return v.TriggeredCount
}

// GetLastTriggerTimestamp returns QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess.LastTriggerTimestamp, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstanceProcessesContinuousProfilingMonitoringProcess) GetLastTriggerTimestamp() int64 {
	return v.LastTriggerTimestamp
}

// QueryContinuousProfilingMonitoringInstancesResponse is returned by QueryContinuousProfilingMonitoringInstances on success.
type QueryContinuousProfilingMonitoringInstancesResponse struct {
	// query all continuous profiling monitoring instances through service and policy
	QueryContinuousProfilingMonitoringInstances []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance `json:"queryContinuousProfilingMonitoringInstances"`
}

// GetQueryContinuousProfilingMonitoringInstances returns QueryContinuousProfilingMonitoringInstancesResponse.QueryContinuousProfilingMonitoringInstances, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingMonitoringInstancesResponse) GetQueryContinuousProfilingMonitoringInstances() []QueryContinuousProfilingMonitoringInstancesQueryContinuousProfilingMonitoringInstancesContinuousProfilingMonitoringInstance {
	return v.QueryContinuousProfilingMonitoringInstances
}

// QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget includes the requested fields of the GraphQL type ContinuousProfilingPolicyTarget.
type QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget struct {
	Type                 ContinuousProfilingTargetType                                                                                                                        `json:"type"`
	CheckItems           []QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem `json:"checkItems"`
	TriggeredCount       int                                                                                                                                                  `json:"triggeredCount"`
	LastTriggerTimestamp int64                                                                                                                                                `json:"lastTriggerTimestamp"`
}

// GetType returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget.Type, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget) GetType() ContinuousProfilingTargetType {
	return v.Type
}

// GetCheckItems returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget.CheckItems, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget) GetCheckItems() []QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem {
	return v.CheckItems
}

// GetTriggeredCount returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget.TriggeredCount, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget) GetTriggeredCount() int {
	return v.TriggeredCount
}

// GetLastTriggerTimestamp returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget.LastTriggerTimestamp, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget) GetLastTriggerTimestamp() int64 {
	return v.LastTriggerTimestamp
}

// QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem includes the requested fields of the GraphQL type ContinuousProfilingPolicyItem.
type QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem struct {
	Type      ContinuousProfilingMonitorType `json:"type"`
	Threshold string                         `json:"threshold"`
	Period    int                            `json:"period"`
	Count     int                            `json:"count"`
	UriList   []string                       `json:"uriList"`
	UriRegex  string                         `json:"uriRegex"`
}

// GetType returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.Type, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetType() ContinuousProfilingMonitorType {
	return v.Type
}

// GetThreshold returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.Threshold, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetThreshold() string {
	return v.Threshold
}

// GetPeriod returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.Period, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetPeriod() int {
	return v.Period
}

// GetCount returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.Count, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetCount() int {
	return v.Count
}

// GetUriList returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.UriList, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetUriList() []string {
	return v.UriList
}

// GetUriRegex returns QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem.UriRegex, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTargetCheckItemsContinuousProfilingPolicyItem) GetUriRegex() string {
	return v.UriRegex
}

// QueryContinuousProfilingServiceTargetsResponse is returned by QueryContinuousProfilingServiceTargets on success.
type QueryContinuousProfilingServiceTargetsResponse struct {
	// query all continuous profiling task through service
	QueryContinuousProfilingServiceTargets []QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget `json:"queryContinuousProfilingServiceTargets"`
}

// GetQueryContinuousProfilingServiceTargets returns QueryContinuousProfilingServiceTargetsResponse.QueryContinuousProfilingServiceTargets, and is useful for accessing the field via an interface.
func (v *QueryContinuousProfilingServiceTargetsResponse) GetQueryContinuousProfilingServiceTargets() []QueryContinuousProfilingServiceTargetsQueryContinuousProfilingServiceTargetsContinuousProfilingPolicyTarget {
	return v.QueryContinuousProfilingServiceTargets
}

// QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule includes the requested fields of the GraphQL type EBPFProfilingSchedule.
type QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule struct {
	// profiling task schedule ID
	ScheduleId string `json:"scheduleId"`
	// profiling task ID
	TaskId string `json:"taskId"`
	// process entity
	Process QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess `json:"process"`
	// profiling schedule start timestamp(ms)
	StartTime int64 `json:"startTime"`
	// profiling schedule finished timestamp(ms)
	EndTime int64 `json:"endTime"`
}

// GetScheduleId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule.ScheduleId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule) GetScheduleId() string {
	return v.ScheduleId
}

// GetTaskId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule.TaskId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule) GetTaskId() string {
	return v.TaskId
}

// GetProcess returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule.Process, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule) GetProcess() QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess {
	return v.Process
}

// GetStartTime returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule.StartTime, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule) GetStartTime() int64 {
	return v.StartTime
}

// GetEndTime returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule.EndTime, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule) GetEndTime() int64 {
	return v.EndTime
}

// QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess includes the requested fields of the GraphQL type Process.
// The GraphQL type's documentation follows.
//
// The process is an operating system process under service instance.
type QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess struct {
	// Process entity
	Id           string `json:"id"`
	Name         string `json:"name"`
	ServiceId    string `json:"serviceId"`
	ServiceName  string `json:"serviceName"`
	InstanceId   string `json:"instanceId"`
	InstanceName string `json:"instanceName"`
	// Which agent report this process.
	AgentId string `json:"agentId"`
	// The process found type.
	DetectType string `json:"detectType"`
	// The process attributes, different process detect type have different corresponding attributes.
	Attributes []QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute `json:"attributes"`
	// The process labels.
	Labels []string `json:"labels"`
}

// GetId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.Id, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetId() string {
	return v.Id
}

// GetName returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.Name, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetName() string {
	return v.Name
}

// GetServiceId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.ServiceId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetServiceId() string {
	return v.ServiceId
}

// GetServiceName returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.ServiceName, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetServiceName() string {
	return v.ServiceName
}

// GetInstanceId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.InstanceId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetInstanceId() string {
	return v.InstanceId
}

// GetInstanceName returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.InstanceName, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetInstanceName() string {
	return v.InstanceName
}

// GetAgentId returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.AgentId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetAgentId() string {
	return v.AgentId
}

// GetDetectType returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.DetectType, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetDetectType() string {
	return v.DetectType
}

// GetAttributes returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.Attributes, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetAttributes() []QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute {
	return v.Attributes
}

// GetLabels returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess.Labels, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcess) GetLabels() []string {
	return v.Labels
}

// QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute includes the requested fields of the GraphQL type Attribute.
type QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// GetName returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute.Name, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute) GetName() string {
	return v.Name
}

// GetValue returns QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute.Value, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingScheduleProcessAttributesAttribute) GetValue() string {
	return v.Value
}

// QueryEBPFProfilingSchedulesResponse is returned by QueryEBPFProfilingSchedules on success.
type QueryEBPFProfilingSchedulesResponse struct {
	// query schedules from profiling task
	QueryEBPFProfilingSchedules []QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule `json:"queryEBPFProfilingSchedules"`
}

// GetQueryEBPFProfilingSchedules returns QueryEBPFProfilingSchedulesResponse.QueryEBPFProfilingSchedules, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingSchedulesResponse) GetQueryEBPFProfilingSchedules() []QueryEBPFProfilingSchedulesQueryEBPFProfilingSchedulesEBPFProfilingSchedule {
	return v.QueryEBPFProfilingSchedules
}

// QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask includes the requested fields of the GraphQL type EBPFProfilingTask.
// The GraphQL type's documentation follows.
//
// eBPF profiling task data
type QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask struct {
	// profiling task ID
	TaskId string `json:"taskId"`
	// service of profiling task
	ServiceId   string `json:"serviceId"`
	ServiceName string `json:"serviceName"`
	// service instance of profiling task
	ServiceInstanceId   string `json:"serviceInstanceId"`
	ServiceInstanceName string `json:"serviceInstanceName"`
	// process labels for filter
	ProcessLabels []string `json:"processLabels"`
	// process of profiling task triggered by continuous profiling
	ProcessId   string `json:"processId"`
	ProcessName string `json:"processName"`
	// Start time of the task, type is timestamp.
	TaskStartTime int64 `json:"taskStartTime"`
	// profiling task trigger type
	TriggerType EBPFProfilingTriggerType `json:"triggerType"`
	// task profiling duration
	FixedTriggerDuration int64 `json:"fixedTriggerDuration"`
	// "CONTINUOUS_PROFILING" type task causes
	ContinuousProfilingCauses []QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause `json:"continuousProfilingCauses"`
	// profiling task target type
	TargetType EBPFProfilingTargetType `json:"targetType"`
	// the timestamp of creating this task
	CreateTime int64 `json:"createTime"`
}

// GetTaskId returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.TaskId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetTaskId() string {
	return v.TaskId
}

// GetServiceId returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ServiceId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetServiceId() string {
	return v.ServiceId
}

// GetServiceName returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ServiceName, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetServiceName() string {
	return v.ServiceName
}

// GetServiceInstanceId returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetServiceInstanceId() string {
	return v.ServiceInstanceId
}

// GetServiceInstanceName returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetServiceInstanceName() string {
	return v.ServiceInstanceName
}

// GetProcessLabels returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ProcessLabels, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetProcessLabels() []string {
	return v.ProcessLabels
}

// GetProcessId returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ProcessId, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetProcessId() string {
	return v.ProcessId
}

// GetProcessName returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ProcessName, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetProcessName() string {
	return v.ProcessName
}

// GetTaskStartTime returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.TaskStartTime, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetTaskStartTime() int64 {
	return v.TaskStartTime
}

// GetTriggerType returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.TriggerType, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetTriggerType() EBPFProfilingTriggerType {
	return v.TriggerType
}

// GetFixedTriggerDuration returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.FixedTriggerDuration, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetFixedTriggerDuration() int64 {
	return v.FixedTriggerDuration
}

// GetContinuousProfilingCauses returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.ContinuousProfilingCauses, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetContinuousProfilingCauses() []QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause {
	return v.ContinuousProfilingCauses
}

// GetTargetType returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.TargetType, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetTargetType() EBPFProfilingTargetType {
	return v.TargetType
}

// GetCreateTime returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask.CreateTime, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask) GetCreateTime() int64 {
	return v.CreateTime
}

// QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause includes the requested fields of the GraphQL type ContinuousProfilingTriggeredCause.
type QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause struct {
	// which type is reached the threshold
	// all causes threshold and current value has multiply with "100" for avoid float value
	Type ContinuousProfilingMonitorType `json:"type"`
	// single value based cause
	SingleValue QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause `json:"singleValue"`
	// uri based cause
	Uri QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause `json:"uri"`
	// summary message of cause, including type, value or uri
	Message string `json:"message"`
}

// GetType returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause.Type, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause) GetType() ContinuousProfilingMonitorType {
	return v.Type
}

// GetSingleValue returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause.SingleValue, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause) GetSingleValue() QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause {
	return v.SingleValue
}

// GetUri returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause.Uri, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause) GetUri() QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause {
	return v.Uri
}

// GetMessage returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause.Message, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCause) GetMessage() string {
	return v.Message
}

// QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause includes the requested fields of the GraphQL type ContinuousProfilingSingleValueCause.
type QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause struct {
	// defined threshold
	Threshold int64 `json:"threshold"`
	// current value of the process
	Current int64 `json:"current"`
}

// GetThreshold returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause.Threshold, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause) GetThreshold() int64 {
	return v.Threshold
}

// GetCurrent returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause.Current, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseSingleValueContinuousProfilingSingleValueCause) GetCurrent() int64 {
	return v.Current
}

// QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause includes the requested fields of the GraphQL type ContinuousProfilingURICause.
type QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause struct {
	// which URI triggered threshold(one of)
	UriRegex string `json:"uriRegex"`
	UriPath  string `json:"uriPath"`
	// defined threshold
	Threshold int64 `json:"threshold"`
	// current value of the process URI
	Current int64 `json:"current"`
}

// GetUriRegex returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause.UriRegex, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause) GetUriRegex() string {
	return v.UriRegex
}

// GetUriPath returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause.UriPath, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause) GetUriPath() string {
	return v.UriPath
}

// GetThreshold returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause.Threshold, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause) GetThreshold() int64 {
	return v.Threshold
}

// GetCurrent returns QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause.Current, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTaskContinuousProfilingCausesContinuousProfilingTriggeredCauseUriContinuousProfilingURICause) GetCurrent() int64 {
	return v.Current
}

// QueryEBPFProfilingTasksResponse is returned by QueryEBPFProfilingTasks on success.
type QueryEBPFProfilingTasksResponse struct {
	// query eBPF profiling task list
	// query `triggerType == FIXED_TIME` when triggerType is absent
	QueryEBPFProfilingTasks []QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask `json:"queryEBPFProfilingTasks"`
}

// GetQueryEBPFProfilingTasks returns QueryEBPFProfilingTasksResponse.QueryEBPFProfilingTasks, and is useful for accessing the field via an interface.
func (v *QueryEBPFProfilingTasksResponse) GetQueryEBPFProfilingTasks() []QueryEBPFProfilingTasksQueryEBPFProfilingTasksEBPFProfilingTask {
	return v.QueryEBPFProfilingTasks
}

// QueryEventsQueryEvents includes the requested fields of the GraphQL type Events.
type QueryEventsQueryEvents struct {
	Events []QueryEventsQueryEventsEventsEvent `json:"events"`
}

// GetEvents returns QueryEventsQueryEvents.Events, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEvents) GetEvents() []QueryEventsQueryEventsEventsEvent { return v.Events }

// QueryEventsQueryEventsEventsEvent includes the requested fields of the GraphQL type Event.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
type QueryEventsQueryEventsEventsEvent struct {
	Uuid       string                                                `json:"uuid"`
	Source     QueryEventsQueryEventsEventsEventSource               `json:"source"`
	Name       string                                                `json:"name"`
	Type       EventType                                             `json:"type"`
	Message    string                                                `json:"message"`
	Parameters []QueryEventsQueryEventsEventsEventParametersKeyValue `json:"parameters"`
	// The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
	// This field may be 0 if the user didn't report it or the `start` event is lost due to network issues.
	StartTime int64 `json:"startTime"`
	// The end time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC. Empty or 0 if the event have not finished yet.
	// This field may be 0 if the user didn't report it or the `end` event is lost due to network issues.
	EndTime int64  `json:"endTime"`
	Layer   string `json:"layer"`
}

// GetUuid returns QueryEventsQueryEventsEventsEvent.Uuid, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetUuid() string { return v.Uuid }

// GetSource returns QueryEventsQueryEventsEventsEvent.Source, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetSource() QueryEventsQueryEventsEventsEventSource {
	return v.Source
}

// GetName returns QueryEventsQueryEventsEventsEvent.Name, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetName() string { return v.Name }

// GetType returns QueryEventsQueryEventsEventsEvent.Type, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetType() EventType { return v.Type }

// GetMessage returns QueryEventsQueryEventsEventsEvent.Message, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetMessage() string { return v.Message }

// GetParameters returns QueryEventsQueryEventsEventsEvent.Parameters, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetParameters() []QueryEventsQueryEventsEventsEventParametersKeyValue {
	return v.Parameters
}

// GetStartTime returns QueryEventsQueryEventsEventsEvent.StartTime, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetStartTime() int64 { return v.StartTime }

// GetEndTime returns QueryEventsQueryEventsEventsEvent.EndTime, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetEndTime() int64 { return v.EndTime }

// GetLayer returns QueryEventsQueryEventsEventsEvent.Layer, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEvent) GetLayer() string { return v.Layer }

// QueryEventsQueryEventsEventsEventParametersKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type QueryEventsQueryEventsEventsEventParametersKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns QueryEventsQueryEventsEventsEventParametersKeyValue.Key, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEventParametersKeyValue) GetKey() string { return v.Key }

// GetValue returns QueryEventsQueryEventsEventsEventParametersKeyValue.Value, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEventParametersKeyValue) GetValue() string { return v.Value }

// QueryEventsQueryEventsEventsEventSource includes the requested fields of the GraphQL type Source.
type QueryEventsQueryEventsEventsEventSource struct {
	Service         string `json:"service"`
	ServiceInstance string `json:"serviceInstance"`
	Endpoint        string `json:"endpoint"`
}

// GetService returns QueryEventsQueryEventsEventsEventSource.Service, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEventSource) GetService() string { return v.Service }

// GetServiceInstance returns QueryEventsQueryEventsEventsEventSource.ServiceInstance, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEventSource) GetServiceInstance() string {
	return v.ServiceInstance
}

// GetEndpoint returns QueryEventsQueryEventsEventsEventSource.Endpoint, and is useful for accessing the field via an interface.
func (v *QueryEventsQueryEventsEventsEventSource) GetEndpoint() string { return v.Endpoint }

// QueryEventsResponse is returned by QueryEvents on success.
type QueryEventsResponse struct {
	QueryEvents QueryEventsQueryEvents `json:"queryEvents"`
}

// GetQueryEvents returns QueryEventsResponse.QueryEvents, and is useful for accessing the field via an interface.
func (v *QueryEventsResponse) GetQueryEvents() QueryEventsQueryEvents { return v.QueryEvents }

// QueryLogTagAutocompleteKeysResponse is returned by QueryLogTagAutocompleteKeys on success.
type QueryLogTagAutocompleteKeysResponse struct {
	QueryLogTagAutocompleteKeys []string `json:"queryLogTagAutocompleteKeys"`
}

// GetQueryLogTagAutocompleteKeys returns QueryLogTagAutocompleteKeysResponse.QueryLogTagAutocompleteKeys, and is useful for accessing the field via an interface.
func (v *QueryLogTagAutocompleteKeysResponse) GetQueryLogTagAutocompleteKeys() []string {
	return v.QueryLogTagAutocompleteKeys
}

// QueryLogTagAutocompleteValuesResponse is returned by QueryLogTagAutocompleteValues on success.
type QueryLogTagAutocompleteValuesResponse struct {
	QueryLogTagAutocompleteValues []string `json:"queryLogTagAutocompleteValues"`
}

// GetQueryLogTagAutocompleteValues returns QueryLogTagAutocompleteValuesResponse.QueryLogTagAutocompleteValues, and is useful for accessing the field via an interface.
func (v *QueryLogTagAutocompleteValuesResponse) GetQueryLogTagAutocompleteValues() []string {
	return v.QueryLogTagAutocompleteValues
}

// QueryLogsQueryLogs includes the requested fields of the GraphQL type Logs.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// The list of logs
type QueryLogsQueryLogs struct {
	// When this field is not empty, frontend should display it in UI
	ErrorReason string                      `json:"errorReason"`
	Logs        []QueryLogsQueryLogsLogsLog `json:"logs"`
}

// GetErrorReason returns QueryLogsQueryLogs.ErrorReason, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogs) GetErrorReason() string { return v.ErrorReason }

// GetLogs returns QueryLogsQueryLogs.Logs, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogs) GetLogs() []QueryLogsQueryLogsLogsLog { return v.Logs }

// QueryLogsQueryLogsLogsLog includes the requested fields of the GraphQL type Log.
// The GraphQL type's documentation follows.
//
// Log info
type QueryLogsQueryLogsLogsLog struct {
	ServiceName         string                                  `json:"serviceName"`
	ServiceId           string                                  `json:"serviceId"`
	ServiceInstanceName string                                  `json:"serviceInstanceName"`
	ServiceInstanceId   string                                  `json:"serviceInstanceId"`
	EndpointName        string                                  `json:"endpointName"`
	EndpointId          string                                  `json:"endpointId"`
	TraceId             string                                  `json:"traceId"`
	Timestamp           int64                                   `json:"timestamp"`
	ContentType         ContentType                             `json:"contentType"`
	Content             string                                  `json:"content"`
	Tags                []QueryLogsQueryLogsLogsLogTagsKeyValue `json:"tags"`
}

// GetServiceName returns QueryLogsQueryLogsLogsLog.ServiceName, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetServiceName() string { return v.ServiceName }

// GetServiceId returns QueryLogsQueryLogsLogsLog.ServiceId, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetServiceId() string { return v.ServiceId }

// GetServiceInstanceName returns QueryLogsQueryLogsLogsLog.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetServiceInstanceName() string { return v.ServiceInstanceName }

// GetServiceInstanceId returns QueryLogsQueryLogsLogsLog.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetEndpointName returns QueryLogsQueryLogsLogsLog.EndpointName, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetEndpointName() string { return v.EndpointName }

// GetEndpointId returns QueryLogsQueryLogsLogsLog.EndpointId, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetEndpointId() string { return v.EndpointId }

// GetTraceId returns QueryLogsQueryLogsLogsLog.TraceId, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetTraceId() string { return v.TraceId }

// GetTimestamp returns QueryLogsQueryLogsLogsLog.Timestamp, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetTimestamp() int64 { return v.Timestamp }

// GetContentType returns QueryLogsQueryLogsLogsLog.ContentType, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetContentType() ContentType { return v.ContentType }

// GetContent returns QueryLogsQueryLogsLogsLog.Content, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetContent() string { return v.Content }

// GetTags returns QueryLogsQueryLogsLogsLog.Tags, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLog) GetTags() []QueryLogsQueryLogsLogsLogTagsKeyValue { return v.Tags }

// QueryLogsQueryLogsLogsLogTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type QueryLogsQueryLogsLogsLogTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns QueryLogsQueryLogsLogsLogTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLogTagsKeyValue) GetKey() string { return v.Key }

// GetValue returns QueryLogsQueryLogsLogsLogTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *QueryLogsQueryLogsLogsLogTagsKeyValue) GetValue() string { return v.Value }

// QueryLogsResponse is returned by QueryLogs on success.
type QueryLogsResponse struct {
	QueryLogs QueryLogsQueryLogs `json:"queryLogs"`
}

// GetQueryLogs returns QueryLogsResponse.QueryLogs, and is useful for accessing the field via an interface.
func (v *QueryLogsResponse) GetQueryLogs() QueryLogsQueryLogs { return v.QueryLogs }

type QueryOrder string

const (
	QueryOrderByStartTime QueryOrder = "BY_START_TIME"
	QueryOrderByDuration  QueryOrder = "BY_DURATION"
)

// QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare includes the requested fields of the GraphQL type EBPFProfilingTaskPrepare.
// The GraphQL type's documentation follows.
//
// Prepare for creating the eBPF profiling task needs data
type QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare struct {
	// have enough process could profiling
	CouldProfiling bool `json:"couldProfiling"`
	// all process unique labels for filter
	ProcessLabels []string `json:"processLabels"`
}

// GetCouldProfiling returns QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare.CouldProfiling, and is useful for accessing the field via an interface.
func (v *QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare) GetCouldProfiling() bool {
	return v.CouldProfiling
}

// GetProcessLabels returns QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare.ProcessLabels, and is useful for accessing the field via an interface.
func (v *QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare) GetProcessLabels() []string {
	return v.ProcessLabels
}

// QueryPrepareCreateEBPFProfilingTaskDataResponse is returned by QueryPrepareCreateEBPFProfilingTaskData on success.
type QueryPrepareCreateEBPFProfilingTaskDataResponse struct {
	// query eBPF profiling data for prepare create task
	QueryPrepareCreateEBPFProfilingTaskData QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare `json:"queryPrepareCreateEBPFProfilingTaskData"`
}

// GetQueryPrepareCreateEBPFProfilingTaskData returns QueryPrepareCreateEBPFProfilingTaskDataResponse.QueryPrepareCreateEBPFProfilingTaskData, and is useful for accessing the field via an interface.
func (v *QueryPrepareCreateEBPFProfilingTaskDataResponse) GetQueryPrepareCreateEBPFProfilingTaskData() QueryPrepareCreateEBPFProfilingTaskDataQueryPrepareCreateEBPFProfilingTaskDataEBPFProfilingTaskPrepare {
	return v.QueryPrepareCreateEBPFProfilingTaskData
}

// QueryTraceQueryTrace includes the requested fields of the GraphQL type Trace.
// The GraphQL type's documentation follows.
//
// The trace represents a distributed trace, includes all segments and spans.
type QueryTraceQueryTrace struct {
	Spans []QueryTraceQueryTraceSpansSpan `json:"spans"`
}

// GetSpans returns QueryTraceQueryTrace.Spans, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTrace) GetSpans() []QueryTraceQueryTraceSpansSpan { return v.Spans }

// QueryTraceQueryTraceSpansSpan includes the requested fields of the GraphQL type Span.
type QueryTraceQueryTraceSpansSpan struct {
	TraceId             string                                 `json:"traceId"`
	SegmentId           string                                 `json:"segmentId"`
	SpanId              int                                    `json:"spanId"`
	ParentSpanId        int                                    `json:"parentSpanId"`
	Refs                []QueryTraceQueryTraceSpansSpanRefsRef `json:"refs"`
	ServiceCode         string                                 `json:"serviceCode"`
	ServiceInstanceName string                                 `json:"serviceInstanceName"`
	// The start timestamp of the span in millisecond
	StartTime int64 `json:"startTime"`
	// The end timestamp of the span in millisecond
	EndTime      int64  `json:"endTime"`
	EndpointName string `json:"endpointName"`
	// There are three span types: Local, Entry and Exit
	Type string `json:"type"`
	// Peer network id, e.g. host+port, ip+port
	Peer string `json:"peer"`
	// The name of the tech stack component used for the execution represented by the span.
	Component string `json:"component"`
	// The error status is true when the execution returns error code or throws an exception(determined by the language).
	IsError bool `json:"isError"`
	// There are 5 layers: Unknown, Database, RPCFramework, Http, MQ and Cache
	Layer string `json:"layer"`
	// key-value(string) pairs to specify unique attributes of ths span
	Tags []QueryTraceQueryTraceSpansSpanTagsKeyValue `json:"tags"`
	// The events happen of the span, especially in-process.
	Logs []QueryTraceQueryTraceSpansSpanLogsLogEntity `json:"logs"`
	// The attached events happen in the span's context but out-of-process.
	// Check SpanAttachedEvent definition for more details.
	AttachedEvents []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent `json:"attachedEvents"`
}

// GetTraceId returns QueryTraceQueryTraceSpansSpan.TraceId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetTraceId() string { return v.TraceId }

// GetSegmentId returns QueryTraceQueryTraceSpansSpan.SegmentId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetSegmentId() string { return v.SegmentId }

// GetSpanId returns QueryTraceQueryTraceSpansSpan.SpanId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetSpanId() int { return v.SpanId }

// GetParentSpanId returns QueryTraceQueryTraceSpansSpan.ParentSpanId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetParentSpanId() int { return v.ParentSpanId }

// GetRefs returns QueryTraceQueryTraceSpansSpan.Refs, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetRefs() []QueryTraceQueryTraceSpansSpanRefsRef {
	return v.Refs
}

// GetServiceCode returns QueryTraceQueryTraceSpansSpan.ServiceCode, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetServiceCode() string { return v.ServiceCode }

// GetServiceInstanceName returns QueryTraceQueryTraceSpansSpan.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetServiceInstanceName() string { return v.ServiceInstanceName }

// GetStartTime returns QueryTraceQueryTraceSpansSpan.StartTime, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetStartTime() int64 { return v.StartTime }

// GetEndTime returns QueryTraceQueryTraceSpansSpan.EndTime, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetEndTime() int64 { return v.EndTime }

// GetEndpointName returns QueryTraceQueryTraceSpansSpan.EndpointName, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetEndpointName() string { return v.EndpointName }

// GetType returns QueryTraceQueryTraceSpansSpan.Type, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetType() string { return v.Type }

// GetPeer returns QueryTraceQueryTraceSpansSpan.Peer, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetPeer() string { return v.Peer }

// GetComponent returns QueryTraceQueryTraceSpansSpan.Component, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetComponent() string { return v.Component }

// GetIsError returns QueryTraceQueryTraceSpansSpan.IsError, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetIsError() bool { return v.IsError }

// GetLayer returns QueryTraceQueryTraceSpansSpan.Layer, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetLayer() string { return v.Layer }

// GetTags returns QueryTraceQueryTraceSpansSpan.Tags, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetTags() []QueryTraceQueryTraceSpansSpanTagsKeyValue {
	return v.Tags
}

// GetLogs returns QueryTraceQueryTraceSpansSpan.Logs, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetLogs() []QueryTraceQueryTraceSpansSpanLogsLogEntity {
	return v.Logs
}

// GetAttachedEvents returns QueryTraceQueryTraceSpansSpan.AttachedEvents, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpan) GetAttachedEvents() []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent {
	return v.AttachedEvents
}

// QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent includes the requested fields of the GraphQL type SpanAttachedEvent.
// The GraphQL type's documentation follows.
//
// SpanAttachedEvent represents an attached event for a traced RPC.
// When an RPC is being traced by the in-process language agent, a span would be reported by the client-side agent.
// And the rover would be aware of this RPC due to the existing tracing header.
// Then, the rover agent collects extra information from the OS level to provide assistance information to diagnose network performance.
//
// Notice, THIS IS ALSO AVAILABLE FOR ZIPKIN SPAN.
// -----------------------------------------------
// In SkyWalking, ZipkinQueryHandler provides full support for all Zipkin span queries.
// SpanAttachedEvent query is supported through the trace query URI: /api/v2/trace/{traceId}
// A new `attachedEvents` field would be added in JSONArray format with SpanAttachedEvent in JSON as elements.
type QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent struct {
	// The nanosecond timestamp of the event's start time.
	// Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
	// Because the attached event happens in the OS syscall level, most of them are executed rapidly.
	StartTime QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant `json:"startTime"`
	// The official event name.
	// For example, the event name is a method signature from syscall stack.
	Event string `json:"event"`
	// [Optional] The nanosecond timestamp of the event's end time.
	EndTime QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant `json:"endTime"`
	// The tags for this event includes some extra OS level information,
	// such as
	// 1. net_device used for this exit span.
	// 2. network L7 protocol
	Tags []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue `json:"tags"`
	// The summary of statistics during this event.
	// Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
	Summary []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue `json:"summary"`
}

// GetStartTime returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent.StartTime, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent) GetStartTime() QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant {
	return v.StartTime
}

// GetEvent returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent.Event, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent) GetEvent() string {
	return v.Event
}

// GetEndTime returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent.EndTime, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent) GetEndTime() QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant {
	return v.EndTime
}

// GetTags returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent.Tags, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent) GetTags() []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue {
	return v.Tags
}

// GetSummary returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent.Summary, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEvent) GetSummary() []QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue {
	return v.Summary
}

// QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant includes the requested fields of the GraphQL type Instant.
// The GraphQL type's documentation follows.
//
// An instantaneous point on the time-line.
// An instant represents a data point accurate to the nanosecond.
// It is constituted by a long representing epoch-seconds and an int representing nanosecond-of-second,
// which will always be between 0 and 999,999,999
type QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant struct {
	// The number of seconds from the epoch of 1970-01-01T00:00:00Z.
	Seconds int64 `json:"seconds"`
	// The number of nanoseconds, later along the time-line, from the seconds field.
	// This is always positive, and never exceeds 999,999,999.
	Nanos int `json:"nanos"`
}

// GetSeconds returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant.Seconds, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant) GetSeconds() int64 {
	return v.Seconds
}

// GetNanos returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant.Nanos, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventEndTimeInstant) GetNanos() int {
	return v.Nanos
}

// QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant includes the requested fields of the GraphQL type Instant.
// The GraphQL type's documentation follows.
//
// An instantaneous point on the time-line.
// An instant represents a data point accurate to the nanosecond.
// It is constituted by a long representing epoch-seconds and an int representing nanosecond-of-second,
// which will always be between 0 and 999,999,999
type QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant struct {
	// The number of seconds from the epoch of 1970-01-01T00:00:00Z.
	Seconds int64 `json:"seconds"`
	// The number of nanoseconds, later along the time-line, from the seconds field.
	// This is always positive, and never exceeds 999,999,999.
	Nanos int `json:"nanos"`
}

// GetSeconds returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant.Seconds, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant) GetSeconds() int64 {
	return v.Seconds
}

// GetNanos returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant.Nanos, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventStartTimeInstant) GetNanos() int {
	return v.Nanos
}

// QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue includes the requested fields of the GraphQL type KeyNumericValue.
// The GraphQL type's documentation follows.
//
// String key, Long/Int value pair.
type QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue struct {
	Key   string `json:"key"`
	Value int64  `json:"value"`
}

// GetKey returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue.Key, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue) GetKey() string {
	return v.Key
}

// GetValue returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue.Value, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventSummaryKeyNumericValue) GetValue() int64 {
	return v.Value
}

// QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue) GetKey() string {
	return v.Key
}

// GetValue returns QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanAttachedEventsSpanAttachedEventTagsKeyValue) GetValue() string {
	return v.Value
}

// QueryTraceQueryTraceSpansSpanLogsLogEntity includes the requested fields of the GraphQL type LogEntity.
type QueryTraceQueryTraceSpansSpanLogsLogEntity struct {
	// The timestamp of the log in millisecond
	Time int64                                                    `json:"time"`
	Data []QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue `json:"data"`
}

// GetTime returns QueryTraceQueryTraceSpansSpanLogsLogEntity.Time, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanLogsLogEntity) GetTime() int64 { return v.Time }

// GetData returns QueryTraceQueryTraceSpansSpanLogsLogEntity.Data, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanLogsLogEntity) GetData() []QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue {
	return v.Data
}

// QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue.Key, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue) GetKey() string { return v.Key }

// GetValue returns QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue.Value, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanLogsLogEntityDataKeyValue) GetValue() string { return v.Value }

// QueryTraceQueryTraceSpansSpanRefsRef includes the requested fields of the GraphQL type Ref.
// The GraphQL type's documentation follows.
//
// Ref represents the link between the segment and its parents.
// The parent(ref) may not exists, which means batch process.
// The UI should display a list, representing the other trace IDs.
type QueryTraceQueryTraceSpansSpanRefsRef struct {
	TraceId         string `json:"traceId"`
	ParentSegmentId string `json:"parentSegmentId"`
	ParentSpanId    int    `json:"parentSpanId"`
	// Ref type represents why did the ref happen.
	// Include: 1) CrossProcess 2) CrossThread
	Type RefType `json:"type"`
}

// GetTraceId returns QueryTraceQueryTraceSpansSpanRefsRef.TraceId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanRefsRef) GetTraceId() string { return v.TraceId }

// GetParentSegmentId returns QueryTraceQueryTraceSpansSpanRefsRef.ParentSegmentId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanRefsRef) GetParentSegmentId() string { return v.ParentSegmentId }

// GetParentSpanId returns QueryTraceQueryTraceSpansSpanRefsRef.ParentSpanId, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanRefsRef) GetParentSpanId() int { return v.ParentSpanId }

// GetType returns QueryTraceQueryTraceSpansSpanRefsRef.Type, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanRefsRef) GetType() RefType { return v.Type }

// QueryTraceQueryTraceSpansSpanTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type QueryTraceQueryTraceSpansSpanTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns QueryTraceQueryTraceSpansSpanTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanTagsKeyValue) GetKey() string { return v.Key }

// GetValue returns QueryTraceQueryTraceSpansSpanTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *QueryTraceQueryTraceSpansSpanTagsKeyValue) GetValue() string { return v.Value }

// QueryTraceResponse is returned by QueryTrace on success.
type QueryTraceResponse struct {
	// Read the specific trace ID with given trace ID
	QueryTrace QueryTraceQueryTrace `json:"queryTrace"`
}

// GetQueryTrace returns QueryTraceResponse.QueryTrace, and is useful for accessing the field via an interface.
func (v *QueryTraceResponse) GetQueryTrace() QueryTraceQueryTrace { return v.QueryTrace }

// QueryTraceTagAutocompleteKeysResponse is returned by QueryTraceTagAutocompleteKeys on success.
type QueryTraceTagAutocompleteKeysResponse struct {
	// Read the list of searchable keys
	QueryTraceTagAutocompleteKeys []string `json:"queryTraceTagAutocompleteKeys"`
}

// GetQueryTraceTagAutocompleteKeys returns QueryTraceTagAutocompleteKeysResponse.QueryTraceTagAutocompleteKeys, and is useful for accessing the field via an interface.
func (v *QueryTraceTagAutocompleteKeysResponse) GetQueryTraceTagAutocompleteKeys() []string {
	return v.QueryTraceTagAutocompleteKeys
}

// QueryTraceTagAutocompleteValuesResponse is returned by QueryTraceTagAutocompleteValues on success.
type QueryTraceTagAutocompleteValuesResponse struct {
	// Search the available value options of the given key.
	QueryTraceTagAutocompleteValues []string `json:"queryTraceTagAutocompleteValues"`
}

// GetQueryTraceTagAutocompleteValues returns QueryTraceTagAutocompleteValuesResponse.QueryTraceTagAutocompleteValues, and is useful for accessing the field via an interface.
func (v *QueryTraceTagAutocompleteValuesResponse) GetQueryTraceTagAutocompleteValues() []string {
	return v.QueryTraceTagAutocompleteValues
}

// ReadHeatMapReadHeatMap includes the requested fields of the GraphQL type HeatMap.
type ReadHeatMapReadHeatMap struct {
	// Each element of values matches the time point of the query duration.
	// The element in the IntValues represents the value of the same index bucket
	Values []ReadHeatMapReadHeatMapValuesHeatMapColumn `json:"values"`
	// Bucket describes the ranges of #values represent.
	Buckets []ReadHeatMapReadHeatMapBucketsBucket `json:"buckets"`
}

// GetValues returns ReadHeatMapReadHeatMap.Values, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMap) GetValues() []ReadHeatMapReadHeatMapValuesHeatMapColumn {
	return v.Values
}

// GetBuckets returns ReadHeatMapReadHeatMap.Buckets, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMap) GetBuckets() []ReadHeatMapReadHeatMapBucketsBucket { return v.Buckets }

// ReadHeatMapReadHeatMapBucketsBucket includes the requested fields of the GraphQL type Bucket.
// The GraphQL type's documentation follows.
//
// Bucket represents the value range.
type ReadHeatMapReadHeatMapBucketsBucket struct {
	// Usually the number represents the min value of this bucket,
	// could be `infinite-` string as unbounded value
	Min string `json:"min"`
	// Usually the number represents the max value of this bucket,
	// could be `infinite+` string as unbounded value
	Max string `json:"max"`
}

// GetMin returns ReadHeatMapReadHeatMapBucketsBucket.Min, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMapBucketsBucket) GetMin() string { return v.Min }

// GetMax returns ReadHeatMapReadHeatMapBucketsBucket.Max, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMapBucketsBucket) GetMax() string { return v.Max }

// ReadHeatMapReadHeatMapValuesHeatMapColumn includes the requested fields of the GraphQL type HeatMapColumn.
type ReadHeatMapReadHeatMapValuesHeatMapColumn struct {
	Id     string  `json:"id"`
	Values []int64 `json:"values"`
}

// GetId returns ReadHeatMapReadHeatMapValuesHeatMapColumn.Id, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMapValuesHeatMapColumn) GetId() string { return v.Id }

// GetValues returns ReadHeatMapReadHeatMapValuesHeatMapColumn.Values, and is useful for accessing the field via an interface.
func (v *ReadHeatMapReadHeatMapValuesHeatMapColumn) GetValues() []int64 { return v.Values }

// ReadHeatMapResponse is returned by ReadHeatMap on success.
type ReadHeatMapResponse struct {
	// Heatmap is bucket based value statistic result.
	ReadHeatMap ReadHeatMapReadHeatMap `json:"readHeatMap"`
}

// GetReadHeatMap returns ReadHeatMapResponse.ReadHeatMap, and is useful for accessing the field via an interface.
func (v *ReadHeatMapResponse) GetReadHeatMap() ReadHeatMapReadHeatMap { return v.ReadHeatMap }

// ReadLabeledMetricsValuesReadLabeledMetricsValues includes the requested fields of the GraphQL type MetricsValues.
type ReadLabeledMetricsValuesReadLabeledMetricsValues struct {
	// Could be null if no label assigned in the query condition
	Label string `json:"label"`
	// Values of this label value.
	Values ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues `json:"values"`
}

// GetLabel returns ReadLabeledMetricsValuesReadLabeledMetricsValues.Label, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValues) GetLabel() string { return v.Label }

// GetValues returns ReadLabeledMetricsValuesReadLabeledMetricsValues.Values, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValues) GetValues() ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues {
	return v.Values
}

// ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues includes the requested fields of the GraphQL type IntValues.
type ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues struct {
	Values []ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt `json:"values"`
}

// GetValues returns ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues.Values, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValues) GetValues() []ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt {
	return v.Values
}

// ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt) GetId() string {
	return v.Id
}

// GetValue returns ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt) GetValue() int64 {
	return v.Value
}

// GetIsEmptyValue returns ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesReadLabeledMetricsValuesValuesIntValuesValuesKVInt) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// ReadLabeledMetricsValuesResponse is returned by ReadLabeledMetricsValues on success.
type ReadLabeledMetricsValuesResponse struct {
	// Read value in the given time duration, usually as a linear.
	// labels: the labels you need to query.
	ReadLabeledMetricsValues []ReadLabeledMetricsValuesReadLabeledMetricsValues `json:"readLabeledMetricsValues"`
}

// GetReadLabeledMetricsValues returns ReadLabeledMetricsValuesResponse.ReadLabeledMetricsValues, and is useful for accessing the field via an interface.
func (v *ReadLabeledMetricsValuesResponse) GetReadLabeledMetricsValues() []ReadLabeledMetricsValuesReadLabeledMetricsValues {
	return v.ReadLabeledMetricsValues
}

// ReadMetricsValueResponse is returned by ReadMetricsValue on success.
type ReadMetricsValueResponse struct {
	// Since 9.5.0 `typeOfMetrics` and `listMetrics` are moved to metrics-v3.
	// Metrics definition metadata query. Response the metrics type which determines the suitable query methods.
	// typeOfMetrics(name: String!): MetricsType!
	// Get the list of all available metrics in the current OAP server.
	// Param, regex, could be used to filter the metrics by name.
	// listMetrics(regex: String): [MetricDefinition!]!
	// Read metrics single value in the duration of required metrics
	ReadMetricsValue int64 `json:"readMetricsValue"`
}

// GetReadMetricsValue returns ReadMetricsValueResponse.ReadMetricsValue, and is useful for accessing the field via an interface.
func (v *ReadMetricsValueResponse) GetReadMetricsValue() int64 { return v.ReadMetricsValue }

// ReadMetricsValuesReadMetricsValues includes the requested fields of the GraphQL type MetricsValues.
type ReadMetricsValuesReadMetricsValues struct {
	// Could be null if no label assigned in the query condition
	Label string `json:"label"`
	// Values of this label value.
	Values ReadMetricsValuesReadMetricsValuesValuesIntValues `json:"values"`
}

// GetLabel returns ReadMetricsValuesReadMetricsValues.Label, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValues) GetLabel() string { return v.Label }

// GetValues returns ReadMetricsValuesReadMetricsValues.Values, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValues) GetValues() ReadMetricsValuesReadMetricsValuesValuesIntValues {
	return v.Values
}

// ReadMetricsValuesReadMetricsValuesValuesIntValues includes the requested fields of the GraphQL type IntValues.
type ReadMetricsValuesReadMetricsValuesValuesIntValues struct {
	Values []ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt `json:"values"`
}

// GetValues returns ReadMetricsValuesReadMetricsValuesValuesIntValues.Values, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValuesValuesIntValues) GetValues() []ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt {
	return v.Values
}

// ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt includes the requested fields of the GraphQL type KVInt.
type ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt struct {
	Id string `json:"id"`
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// Since 9.5.0, isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetId returns ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt.Id, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt) GetId() string { return v.Id }

// GetValue returns ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt.Value, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt) GetValue() int64 {
	return v.Value
}

// GetIsEmptyValue returns ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesReadMetricsValuesValuesIntValuesValuesKVInt) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// ReadMetricsValuesResponse is returned by ReadMetricsValues on success.
type ReadMetricsValuesResponse struct {
	// Read time-series values in the duration of required metrics
	ReadMetricsValues ReadMetricsValuesReadMetricsValues `json:"readMetricsValues"`
}

// GetReadMetricsValues returns ReadMetricsValuesResponse.ReadMetricsValues, and is useful for accessing the field via an interface.
func (v *ReadMetricsValuesResponse) GetReadMetricsValues() ReadMetricsValuesReadMetricsValues {
	return v.ReadMetricsValues
}

// ReadNullableMetricsValueReadNullableMetricsValueNullableValue includes the requested fields of the GraphQL type NullableValue.
// The GraphQL type's documentation follows.
//
// Since 9.5.0, a value is Long type, and also nullable.
type ReadNullableMetricsValueReadNullableMetricsValueNullableValue struct {
	// This is the value, the caller must understand the Unit.
	// Such as:
	// 1. If ask for cpm metric, the unit and result should be count.
	// 2. If ask for response time (p99 or avg), the unit should be millisecond.
	Value int64 `json:"value"`
	// isEmptyValue indicates whether value == 0 represents actually zero(false, default) or no data(true).
	IsEmptyValue bool `json:"isEmptyValue"`
}

// GetValue returns ReadNullableMetricsValueReadNullableMetricsValueNullableValue.Value, and is useful for accessing the field via an interface.
func (v *ReadNullableMetricsValueReadNullableMetricsValueNullableValue) GetValue() int64 {
	return v.Value
}

// GetIsEmptyValue returns ReadNullableMetricsValueReadNullableMetricsValueNullableValue.IsEmptyValue, and is useful for accessing the field via an interface.
func (v *ReadNullableMetricsValueReadNullableMetricsValueNullableValue) GetIsEmptyValue() bool {
	return v.IsEmptyValue
}

// ReadNullableMetricsValueResponse is returned by ReadNullableMetricsValue on success.
type ReadNullableMetricsValueResponse struct {
	// Read metrics single value in the duration of required metrics
	// NullableValue#isEmptyValue == true indicates no telemetry data rather than aggregated value is actually zero.
	ReadNullableMetricsValue ReadNullableMetricsValueReadNullableMetricsValueNullableValue `json:"readNullableMetricsValue"`
}

// GetReadNullableMetricsValue returns ReadNullableMetricsValueResponse.ReadNullableMetricsValue, and is useful for accessing the field via an interface.
func (v *ReadNullableMetricsValueResponse) GetReadNullableMetricsValue() ReadNullableMetricsValueReadNullableMetricsValueNullableValue {
	return v.ReadNullableMetricsValue
}

// ReadRecordsReadRecordsRecord includes the requested fields of the GraphQL type Record.
type ReadRecordsReadRecordsRecord struct {
	// Literal string name for visualization
	Name string `json:"name"`
	// ID of this record
	Id string `json:"id"`
	// Usually an integer value as this is a metric to measure this entity ID.
	Value string `json:"value"`
	// Have value, Only if the record has related trace id.
	// UI should show this as an attached value.
	RefId string `json:"refId"`
}

// GetName returns ReadRecordsReadRecordsRecord.Name, and is useful for accessing the field via an interface.
func (v *ReadRecordsReadRecordsRecord) GetName() string { return v.Name }

// GetId returns ReadRecordsReadRecordsRecord.Id, and is useful for accessing the field via an interface.
func (v *ReadRecordsReadRecordsRecord) GetId() string { return v.Id }

// GetValue returns ReadRecordsReadRecordsRecord.Value, and is useful for accessing the field via an interface.
func (v *ReadRecordsReadRecordsRecord) GetValue() string { return v.Value }

// GetRefId returns ReadRecordsReadRecordsRecord.RefId, and is useful for accessing the field via an interface.
func (v *ReadRecordsReadRecordsRecord) GetRefId() string { return v.RefId }

// ReadRecordsResponse is returned by ReadRecords on success.
type ReadRecordsResponse struct {
	// Query collected records with given metric name and parent entity conditions, and return in the requested order.
	ReadRecords []ReadRecordsReadRecordsRecord `json:"readRecords"`
}

// GetReadRecords returns ReadRecordsResponse.ReadRecords, and is useful for accessing the field via an interface.
func (v *ReadRecordsResponse) GetReadRecords() []ReadRecordsReadRecordsRecord { return v.ReadRecords }

// ReadSampledRecordsReadSampledRecordsSelectedRecord includes the requested fields of the GraphQL type SelectedRecord.
type ReadSampledRecordsReadSampledRecordsSelectedRecord struct {
	// Literal string name for visualization
	Name string `json:"name"`
	// ID represents the owner of this entity.
	Id string `json:"id"`
	// Usually an integer value as this is metrics.
	Value string `json:"value"`
	// Have value, Only if the record has related trace id.
	// UI should show this as an attached value.
	RefId string `json:"refId"`
}

// GetName returns ReadSampledRecordsReadSampledRecordsSelectedRecord.Name, and is useful for accessing the field via an interface.
func (v *ReadSampledRecordsReadSampledRecordsSelectedRecord) GetName() string { return v.Name }

// GetId returns ReadSampledRecordsReadSampledRecordsSelectedRecord.Id, and is useful for accessing the field via an interface.
func (v *ReadSampledRecordsReadSampledRecordsSelectedRecord) GetId() string { return v.Id }

// GetValue returns ReadSampledRecordsReadSampledRecordsSelectedRecord.Value, and is useful for accessing the field via an interface.
func (v *ReadSampledRecordsReadSampledRecordsSelectedRecord) GetValue() string { return v.Value }

// GetRefId returns ReadSampledRecordsReadSampledRecordsSelectedRecord.RefId, and is useful for accessing the field via an interface.
func (v *ReadSampledRecordsReadSampledRecordsSelectedRecord) GetRefId() string { return v.RefId }

// ReadSampledRecordsResponse is returned by ReadSampledRecords on success.
type ReadSampledRecordsResponse struct {
	// Deprecated since 9.3.0, replaced by readRecords defined in record.graphqls
	// Read the sampled records
	// TopNCondition#scope is not required.
	ReadSampledRecords []ReadSampledRecordsReadSampledRecordsSelectedRecord `json:"readSampledRecords"`
}

// GetReadSampledRecords returns ReadSampledRecordsResponse.ReadSampledRecords, and is useful for accessing the field via an interface.
func (v *ReadSampledRecordsResponse) GetReadSampledRecords() []ReadSampledRecordsReadSampledRecordsSelectedRecord {
	return v.ReadSampledRecords
}

type RecordCondition struct {
	Name         string `json:"name"`
	ParentEntity Entity `json:"parentEntity"`
	TopN         int    `json:"topN"`
	Order        Order  `json:"order"`
}

// GetName returns RecordCondition.Name, and is useful for accessing the field via an interface.
func (v *RecordCondition) GetName() string { return v.Name }

// GetParentEntity returns RecordCondition.ParentEntity, and is useful for accessing the field via an interface.
func (v *RecordCondition) GetParentEntity() Entity { return v.ParentEntity }

// GetTopN returns RecordCondition.TopN, and is useful for accessing the field via an interface.
func (v *RecordCondition) GetTopN() int { return v.TopN }

// GetOrder returns RecordCondition.Order, and is useful for accessing the field via an interface.
func (v *RecordCondition) GetOrder() Order { return v.Order }

type RefType string

const (
	RefTypeCrossProcess RefType = "CROSS_PROCESS"
	RefTypeCrossThread  RefType = "CROSS_THREAD"
)

type Scope string

const (
	ScopeAll                     Scope = "All"
	ScopeService                 Scope = "Service"
	ScopeServiceinstance         Scope = "ServiceInstance"
	ScopeEndpoint                Scope = "Endpoint"
	ScopeProcess                 Scope = "Process"
	ScopeServicerelation         Scope = "ServiceRelation"
	ScopeServiceinstancerelation Scope = "ServiceInstanceRelation"
	ScopeEndpointrelation        Scope = "EndpointRelation"
	ScopeProcessrelation         Scope = "ProcessRelation"
)

// SearchBrowserServiceResponse is returned by SearchBrowserService on success.
type SearchBrowserServiceResponse struct {
	SearchBrowserService SearchBrowserServiceSearchBrowserService `json:"searchBrowserService"`
}

// GetSearchBrowserService returns SearchBrowserServiceResponse.SearchBrowserService, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceResponse) GetSearchBrowserService() SearchBrowserServiceSearchBrowserService {
	return v.SearchBrowserService
}

// SearchBrowserServiceSearchBrowserService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type SearchBrowserServiceSearchBrowserService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns SearchBrowserServiceSearchBrowserService.Id, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetId() string { return v.Id }

// GetName returns SearchBrowserServiceSearchBrowserService.Name, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetName() string { return v.Name }

// GetGroup returns SearchBrowserServiceSearchBrowserService.Group, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetGroup() string { return v.Group }

// GetShortName returns SearchBrowserServiceSearchBrowserService.ShortName, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetShortName() string { return v.ShortName }

// GetLayers returns SearchBrowserServiceSearchBrowserService.Layers, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetLayers() []string { return v.Layers }

// GetNormal returns SearchBrowserServiceSearchBrowserService.Normal, and is useful for accessing the field via an interface.
func (v *SearchBrowserServiceSearchBrowserService) GetNormal() bool { return v.Normal }

// SearchBrowserServicesResponse is returned by SearchBrowserServices on success.
type SearchBrowserServicesResponse struct {
	SearchBrowserServices []SearchBrowserServicesSearchBrowserServicesService `json:"searchBrowserServices"`
}

// GetSearchBrowserServices returns SearchBrowserServicesResponse.SearchBrowserServices, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesResponse) GetSearchBrowserServices() []SearchBrowserServicesSearchBrowserServicesService {
	return v.SearchBrowserServices
}

// SearchBrowserServicesSearchBrowserServicesService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type SearchBrowserServicesSearchBrowserServicesService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns SearchBrowserServicesSearchBrowserServicesService.Id, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetId() string { return v.Id }

// GetName returns SearchBrowserServicesSearchBrowserServicesService.Name, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetName() string { return v.Name }

// GetGroup returns SearchBrowserServicesSearchBrowserServicesService.Group, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetGroup() string { return v.Group }

// GetShortName returns SearchBrowserServicesSearchBrowserServicesService.ShortName, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetShortName() string { return v.ShortName }

// GetLayers returns SearchBrowserServicesSearchBrowserServicesService.Layers, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetLayers() []string { return v.Layers }

// GetNormal returns SearchBrowserServicesSearchBrowserServicesService.Normal, and is useful for accessing the field via an interface.
func (v *SearchBrowserServicesSearchBrowserServicesService) GetNormal() bool { return v.Normal }

// SearchEndpointResponse is returned by SearchEndpoint on success.
type SearchEndpointResponse struct {
	// Endpoint query
	// Consider there are huge numbers of endpoint,
	// must use endpoint owner's service id, keyword and limit filter to do query.
	SearchEndpoint []SearchEndpointSearchEndpoint `json:"searchEndpoint"`
}

// GetSearchEndpoint returns SearchEndpointResponse.SearchEndpoint, and is useful for accessing the field via an interface.
func (v *SearchEndpointResponse) GetSearchEndpoint() []SearchEndpointSearchEndpoint {
	return v.SearchEndpoint
}

// SearchEndpointSearchEndpoint includes the requested fields of the GraphQL type Endpoint.
// The GraphQL type's documentation follows.
//
// The endpoint is the minimal functional unit.
// Typically, it presents a URI or gRPC service name in the service.
// Different from instance, this is a logical functional unit.
type SearchEndpointSearchEndpoint struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns SearchEndpointSearchEndpoint.Id, and is useful for accessing the field via an interface.
func (v *SearchEndpointSearchEndpoint) GetId() string { return v.Id }

// GetName returns SearchEndpointSearchEndpoint.Name, and is useful for accessing the field via an interface.
func (v *SearchEndpointSearchEndpoint) GetName() string { return v.Name }

// SearchServiceResponse is returned by SearchService on success.
type SearchServiceResponse struct {
	SearchService SearchServiceSearchService `json:"searchService"`
}

// GetSearchService returns SearchServiceResponse.SearchService, and is useful for accessing the field via an interface.
func (v *SearchServiceResponse) GetSearchService() SearchServiceSearchService { return v.SearchService }

// SearchServiceSearchService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type SearchServiceSearchService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns SearchServiceSearchService.Id, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetId() string { return v.Id }

// GetName returns SearchServiceSearchService.Name, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetName() string { return v.Name }

// GetGroup returns SearchServiceSearchService.Group, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetGroup() string { return v.Group }

// GetShortName returns SearchServiceSearchService.ShortName, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetShortName() string { return v.ShortName }

// GetLayers returns SearchServiceSearchService.Layers, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetLayers() []string { return v.Layers }

// GetNormal returns SearchServiceSearchService.Normal, and is useful for accessing the field via an interface.
func (v *SearchServiceSearchService) GetNormal() bool { return v.Normal }

// SearchServicesResponse is returned by SearchServices on success.
type SearchServicesResponse struct {
	SearchServices []SearchServicesSearchServicesService `json:"searchServices"`
}

// GetSearchServices returns SearchServicesResponse.SearchServices, and is useful for accessing the field via an interface.
func (v *SearchServicesResponse) GetSearchServices() []SearchServicesSearchServicesService {
	return v.SearchServices
}

// SearchServicesSearchServicesService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Metadata query v2 protocol provides the layer-based query to various services monitored by SkyWalking ecosystem.
// It would adopt multiple-layer modern cloud native infrastructure.
// In the v9 core, v1 protocol is provided on the top of the v2 implementation.
// The v1's services, Databases, Browsers are all services with layer=general, layer=database, layer=browser.
// Each service would have native definition about instance and endpoint.
// Service is a logic concept, representing a collection of runnable context.
type SearchServicesSearchServicesService struct {
	// Service ID = BASE64(name) + '.1' which keeps the most compatibility to 8.x data formats.
	// All metrics of the service would refer to this ID.
	// The layer ID would not be included in the service ID, as a service could have multidimensional monitoring, such as ALS + DP for the same service
	// ----- Storage -----
	// Row ID in service_traffic entity includes layer ID.
	// Service ID = BASE64(name) + '.' + Layer ID
	// -------------------
	Id string `json:"id"`
	// The unqiue name gloablly.
	// Typically, name could be formated as `group::name` which would be recognized as a group and a short name.
	Name string `json:"name"`
	// The custom/logic group of the service
	Group string `json:"group"`
	// The unique name in the group. Mostly for visualization.
	ShortName string `json:"shortName"`
	// Layer represents an abstract framework in the computer science, such as operation system(VM layer), Kubernetes(k8s layer),
	// Service Mesh(typical Istio+Envoy layer).
	// The name of layer is a string, but we would reserve the following for visualization(UI)
	// https://github.com/apache/skywalking/blob/master/oap-server/server-core/src/main/java/org/apache/skywalking/oap/server/core/analysis/Layer.java
	//
	// UI uses this literal layer names to provide various layout for their services with metrics.
	//
	// The layer collection is from the instances of this service. So, one service could have multiple layer due to instance-level registration.
	Layers []string `json:"layers"`
	// Normal service is the service having installed agent or metrics reported directly.
	// Unnormal service is conjectural service, usually detected by the agent.
	Normal bool `json:"normal"`
}

// GetId returns SearchServicesSearchServicesService.Id, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetId() string { return v.Id }

// GetName returns SearchServicesSearchServicesService.Name, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetName() string { return v.Name }

// GetGroup returns SearchServicesSearchServicesService.Group, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetGroup() string { return v.Group }

// GetShortName returns SearchServicesSearchServicesService.ShortName, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetShortName() string { return v.ShortName }

// GetLayers returns SearchServicesSearchServicesService.Layers, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetLayers() []string { return v.Layers }

// GetNormal returns SearchServicesSearchServicesService.Normal, and is useful for accessing the field via an interface.
func (v *SearchServicesSearchServicesService) GetNormal() bool { return v.Normal }

type SegmentProfileAnalyzeQuery struct {
	SegmentId string                  `json:"segmentId"`
	TimeRange ProfileAnalyzeTimeRange `json:"timeRange"`
}

// GetSegmentId returns SegmentProfileAnalyzeQuery.SegmentId, and is useful for accessing the field via an interface.
func (v *SegmentProfileAnalyzeQuery) GetSegmentId() string { return v.SegmentId }

// GetTimeRange returns SegmentProfileAnalyzeQuery.TimeRange, and is useful for accessing the field via an interface.
func (v *SegmentProfileAnalyzeQuery) GetTimeRange() ProfileAnalyzeTimeRange { return v.TimeRange }

// SetContinuousProfilingPolicyResponse is returned by SetContinuousProfilingPolicy on success.
type SetContinuousProfilingPolicyResponse struct {
	// set the continuous profiling policy
	SetContinuousProfilingPolicy SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult `json:"setContinuousProfilingPolicy"`
}

// GetSetContinuousProfilingPolicy returns SetContinuousProfilingPolicyResponse.SetContinuousProfilingPolicy, and is useful for accessing the field via an interface.
func (v *SetContinuousProfilingPolicyResponse) GetSetContinuousProfilingPolicy() SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult {
	return v.SetContinuousProfilingPolicy
}

// SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult includes the requested fields of the GraphQL type ContinuousProfilingSetResult.
type SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult struct {
	// TRUE if the policy is set successfully
	Status bool `json:"status"`
	// error reason when status == FALSE
	ErrorReason string `json:"errorReason"`
}

// GetStatus returns SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult.Status, and is useful for accessing the field via an interface.
func (v *SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult) GetStatus() bool {
	return v.Status
}

// GetErrorReason returns SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult.ErrorReason, and is useful for accessing the field via an interface.
func (v *SetContinuousProfilingPolicySetContinuousProfilingPolicyContinuousProfilingSetResult) GetErrorReason() string {
	return v.ErrorReason
}

// SortMetricsResponse is returned by SortMetrics on success.
type SortMetricsResponse struct {
	// Read entity list of required metrics and parent entity type.
	SortMetrics []SortMetricsSortMetricsSelectedRecord `json:"sortMetrics"`
}

// GetSortMetrics returns SortMetricsResponse.SortMetrics, and is useful for accessing the field via an interface.
func (v *SortMetricsResponse) GetSortMetrics() []SortMetricsSortMetricsSelectedRecord {
	return v.SortMetrics
}

// SortMetricsSortMetricsSelectedRecord includes the requested fields of the GraphQL type SelectedRecord.
type SortMetricsSortMetricsSelectedRecord struct {
	// Literal string name for visualization
	Name string `json:"name"`
	// ID represents the owner of this entity.
	Id string `json:"id"`
	// Usually an integer value as this is metrics.
	Value string `json:"value"`
	// Have value, Only if the record has related trace id.
	// UI should show this as an attached value.
	RefId string `json:"refId"`
}

// GetName returns SortMetricsSortMetricsSelectedRecord.Name, and is useful for accessing the field via an interface.
func (v *SortMetricsSortMetricsSelectedRecord) GetName() string { return v.Name }

// GetId returns SortMetricsSortMetricsSelectedRecord.Id, and is useful for accessing the field via an interface.
func (v *SortMetricsSortMetricsSelectedRecord) GetId() string { return v.Id }

// GetValue returns SortMetricsSortMetricsSelectedRecord.Value, and is useful for accessing the field via an interface.
func (v *SortMetricsSortMetricsSelectedRecord) GetValue() string { return v.Value }

// GetRefId returns SortMetricsSortMetricsSelectedRecord.RefId, and is useful for accessing the field via an interface.
func (v *SortMetricsSortMetricsSelectedRecord) GetRefId() string { return v.RefId }

type SourceInput struct {
	Service         string `json:"service"`
	ServiceInstance string `json:"serviceInstance"`
	Endpoint        string `json:"endpoint"`
}

// GetService returns SourceInput.Service, and is useful for accessing the field via an interface.
func (v *SourceInput) GetService() string { return v.Service }

// GetServiceInstance returns SourceInput.ServiceInstance, and is useful for accessing the field via an interface.
func (v *SourceInput) GetServiceInstance() string { return v.ServiceInstance }

// GetEndpoint returns SourceInput.Endpoint, and is useful for accessing the field via an interface.
func (v *SourceInput) GetEndpoint() string { return v.Endpoint }

type SpanTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns SpanTag.Key, and is useful for accessing the field via an interface.
func (v *SpanTag) GetKey() string { return v.Key }

// GetValue returns SpanTag.Value, and is useful for accessing the field via an interface.
func (v *SpanTag) GetValue() string { return v.Value }

type Step string

const (
	StepDay    Step = "DAY"
	StepHour   Step = "HOUR"
	StepMinute Step = "MINUTE"
	StepSecond Step = "SECOND"
)

// SupportQueryLogsByKeywordsResponse is returned by SupportQueryLogsByKeywords on success.
type SupportQueryLogsByKeywordsResponse struct {
	// Return true if the current storage implementation supports fuzzy query for logs.
	SupportQueryLogsByKeywords bool `json:"supportQueryLogsByKeywords"`
}

// GetSupportQueryLogsByKeywords returns SupportQueryLogsByKeywordsResponse.SupportQueryLogsByKeywords, and is useful for accessing the field via an interface.
func (v *SupportQueryLogsByKeywordsResponse) GetSupportQueryLogsByKeywords() bool {
	return v.SupportQueryLogsByKeywords
}

// TestResponse is returned by Test on success.
type TestResponse struct {
	// Test the logs and get the results of the LAL output.
	Test TestTestLogTestResponse `json:"test"`
}

// GetTest returns TestResponse.Test, and is useful for accessing the field via an interface.
func (v *TestResponse) GetTest() TestTestLogTestResponse { return v.Test }

// TestTestLogTestResponse includes the requested fields of the GraphQL type LogTestResponse.
type TestTestLogTestResponse struct {
	// The final log if it will be persisted, this can be empty if the log is dropped.
	Log TestTestLogTestResponseLog `json:"log"`
	// The metrics generated during the LAL when testing a LogTestRequest
	Metrics []TestTestLogTestResponseMetricsLogTestMetrics `json:"metrics"`
}

// GetLog returns TestTestLogTestResponse.Log, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponse) GetLog() TestTestLogTestResponseLog { return v.Log }

// GetMetrics returns TestTestLogTestResponse.Metrics, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponse) GetMetrics() []TestTestLogTestResponseMetricsLogTestMetrics {
	return v.Metrics
}

// TestTestLogTestResponseLog includes the requested fields of the GraphQL type Log.
// The GraphQL type's documentation follows.
//
// Log info
type TestTestLogTestResponseLog struct {
	ServiceName         string                                   `json:"serviceName"`
	ServiceId           string                                   `json:"serviceId"`
	ServiceInstanceName string                                   `json:"serviceInstanceName"`
	ServiceInstanceId   string                                   `json:"serviceInstanceId"`
	EndpointName        string                                   `json:"endpointName"`
	EndpointId          string                                   `json:"endpointId"`
	TraceId             string                                   `json:"traceId"`
	Timestamp           int64                                    `json:"timestamp"`
	ContentType         ContentType                              `json:"contentType"`
	Content             string                                   `json:"content"`
	Tags                []TestTestLogTestResponseLogTagsKeyValue `json:"tags"`
}

// GetServiceName returns TestTestLogTestResponseLog.ServiceName, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetServiceName() string { return v.ServiceName }

// GetServiceId returns TestTestLogTestResponseLog.ServiceId, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetServiceId() string { return v.ServiceId }

// GetServiceInstanceName returns TestTestLogTestResponseLog.ServiceInstanceName, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetServiceInstanceName() string { return v.ServiceInstanceName }

// GetServiceInstanceId returns TestTestLogTestResponseLog.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetEndpointName returns TestTestLogTestResponseLog.EndpointName, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetEndpointName() string { return v.EndpointName }

// GetEndpointId returns TestTestLogTestResponseLog.EndpointId, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetEndpointId() string { return v.EndpointId }

// GetTraceId returns TestTestLogTestResponseLog.TraceId, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetTraceId() string { return v.TraceId }

// GetTimestamp returns TestTestLogTestResponseLog.Timestamp, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetTimestamp() int64 { return v.Timestamp }

// GetContentType returns TestTestLogTestResponseLog.ContentType, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetContentType() ContentType { return v.ContentType }

// GetContent returns TestTestLogTestResponseLog.Content, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetContent() string { return v.Content }

// GetTags returns TestTestLogTestResponseLog.Tags, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLog) GetTags() []TestTestLogTestResponseLogTagsKeyValue {
	return v.Tags
}

// TestTestLogTestResponseLogTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type TestTestLogTestResponseLogTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns TestTestLogTestResponseLogTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLogTagsKeyValue) GetKey() string { return v.Key }

// GetValue returns TestTestLogTestResponseLogTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseLogTagsKeyValue) GetValue() string { return v.Value }

// TestTestLogTestResponseMetricsLogTestMetrics includes the requested fields of the GraphQL type LogTestMetrics.
// The GraphQL type's documentation follows.
//
// The metrics generated during the LAL when testing a LogTestRequest
type TestTestLogTestResponseMetricsLogTestMetrics struct {
	Name      string                                                     `json:"name"`
	Tags      []TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue `json:"tags"`
	Value     int64                                                      `json:"value"`
	Timestamp int64                                                      `json:"timestamp"`
}

// GetName returns TestTestLogTestResponseMetricsLogTestMetrics.Name, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetrics) GetName() string { return v.Name }

// GetTags returns TestTestLogTestResponseMetricsLogTestMetrics.Tags, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetrics) GetTags() []TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue {
	return v.Tags
}

// GetValue returns TestTestLogTestResponseMetricsLogTestMetrics.Value, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetrics) GetValue() int64 { return v.Value }

// GetTimestamp returns TestTestLogTestResponseMetricsLogTestMetrics.Timestamp, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetrics) GetTimestamp() int64 { return v.Timestamp }

// TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue includes the requested fields of the GraphQL type KeyValue.
// The GraphQL type's documentation follows.
//
// String key, String value pair.
type TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// GetKey returns TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue.Key, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue) GetKey() string { return v.Key }

// GetValue returns TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue.Value, and is useful for accessing the field via an interface.
func (v *TestTestLogTestResponseMetricsLogTestMetricsTagsKeyValue) GetValue() string { return v.Value }

type TopNCondition struct {
	Name          string `json:"name"`
	ParentService string `json:"parentService"`
	Normal        bool   `json:"normal"`
	Scope         Scope  `json:"scope"`
	TopN          int    `json:"topN"`
	Order         Order  `json:"order"`
}

// GetName returns TopNCondition.Name, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetName() string { return v.Name }

// GetParentService returns TopNCondition.ParentService, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetParentService() string { return v.ParentService }

// GetNormal returns TopNCondition.Normal, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetNormal() bool { return v.Normal }

// GetScope returns TopNCondition.Scope, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetScope() Scope { return v.Scope }

// GetTopN returns TopNCondition.TopN, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetTopN() int { return v.TopN }

// GetOrder returns TopNCondition.Order, and is useful for accessing the field via an interface.
func (v *TopNCondition) GetOrder() Order { return v.Order }

// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Top N record query is different with aggregation Query.
// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
// the top N record query is just do order and get the list.
// Legacy metrics query protocol
// Replaced by the metrics-v2 in the future
// Top N query is based on latency order by given service and metric name.
type TopNRecordsCondition struct {
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Top N record query is different with aggregation Query.
	// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
	// the top N record query is just do order and get the list.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	// Top N query is based on latency order by given service and metric name.
	ServiceId string `json:"serviceId"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Top N record query is different with aggregation Query.
	// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
	// the top N record query is just do order and get the list.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	// Top N query is based on latency order by given service and metric name.
	MetricName string `json:"metricName"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Top N record query is different with aggregation Query.
	// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
	// the top N record query is just do order and get the list.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	// Top N query is based on latency order by given service and metric name.
	TopN int `json:"topN"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Top N record query is different with aggregation Query.
	// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
	// the top N record query is just do order and get the list.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	// Top N query is based on latency order by given service and metric name.
	Order Order `json:"order"`
	// Licensed to the Apache Software Foundation (ASF) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The ASF licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	// http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.
	// Top N record query is different with aggregation Query.
	// Both of query results are top N, but aggregation topN query needs to do aggregation at query stage,
	// the top N record query is just do order and get the list.
	// Legacy metrics query protocol
	// Replaced by the metrics-v2 in the future
	// Top N query is based on latency order by given service and metric name.
	Duration Duration `json:"duration"`
}

// GetServiceId returns TopNRecordsCondition.ServiceId, and is useful for accessing the field via an interface.
func (v *TopNRecordsCondition) GetServiceId() string { return v.ServiceId }

// GetMetricName returns TopNRecordsCondition.MetricName, and is useful for accessing the field via an interface.
func (v *TopNRecordsCondition) GetMetricName() string { return v.MetricName }

// GetTopN returns TopNRecordsCondition.TopN, and is useful for accessing the field via an interface.
func (v *TopNRecordsCondition) GetTopN() int { return v.TopN }

// GetOrder returns TopNRecordsCondition.Order, and is useful for accessing the field via an interface.
func (v *TopNRecordsCondition) GetOrder() Order { return v.Order }

// GetDuration returns TopNRecordsCondition.Duration, and is useful for accessing the field via an interface.
func (v *TopNRecordsCondition) GetDuration() Duration { return v.Duration }

// Represent the conditions used for query TraceBrief
type TraceQueryCondition struct {
	// Represent the conditions used for query TraceBrief
	ServiceId string `json:"serviceId"`
	// Represent the conditions used for query TraceBrief
	ServiceInstanceId string `json:"serviceInstanceId"`
	// Represent the conditions used for query TraceBrief
	TraceId string `json:"traceId"`
	// Represent the conditions used for query TraceBrief
	EndpointId string `json:"endpointId"`
	// Represent the conditions used for query TraceBrief
	QueryDuration Duration `json:"queryDuration"`
	// Represent the conditions used for query TraceBrief
	MinTraceDuration int `json:"minTraceDuration"`
	// Represent the conditions used for query TraceBrief
	MaxTraceDuration int `json:"maxTraceDuration"`
	// Represent the conditions used for query TraceBrief
	TraceState TraceState `json:"traceState"`
	// Represent the conditions used for query TraceBrief
	QueryOrder QueryOrder `json:"queryOrder"`
	// Represent the conditions used for query TraceBrief
	Tags []SpanTag `json:"tags"`
	// Represent the conditions used for query TraceBrief
	Paging Pagination `json:"paging"`
}

// GetServiceId returns TraceQueryCondition.ServiceId, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetServiceId() string { return v.ServiceId }

// GetServiceInstanceId returns TraceQueryCondition.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetTraceId returns TraceQueryCondition.TraceId, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetTraceId() string { return v.TraceId }

// GetEndpointId returns TraceQueryCondition.EndpointId, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetEndpointId() string { return v.EndpointId }

// GetQueryDuration returns TraceQueryCondition.QueryDuration, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetQueryDuration() Duration { return v.QueryDuration }

// GetMinTraceDuration returns TraceQueryCondition.MinTraceDuration, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetMinTraceDuration() int { return v.MinTraceDuration }

// GetMaxTraceDuration returns TraceQueryCondition.MaxTraceDuration, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetMaxTraceDuration() int { return v.MaxTraceDuration }

// GetTraceState returns TraceQueryCondition.TraceState, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetTraceState() TraceState { return v.TraceState }

// GetQueryOrder returns TraceQueryCondition.QueryOrder, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetQueryOrder() QueryOrder { return v.QueryOrder }

// GetTags returns TraceQueryCondition.Tags, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetTags() []SpanTag { return v.Tags }

// GetPaging returns TraceQueryCondition.Paging, and is useful for accessing the field via an interface.
func (v *TraceQueryCondition) GetPaging() Pagination { return v.Paging }

// Trace related condition
type TraceScopeCondition struct {
	// Trace related condition
	TraceId string `json:"traceId"`
	// Trace related condition
	SegmentId string `json:"segmentId"`
	// Trace related condition
	SpanId int `json:"spanId"`
}

// GetTraceId returns TraceScopeCondition.TraceId, and is useful for accessing the field via an interface.
func (v *TraceScopeCondition) GetTraceId() string { return v.TraceId }

// GetSegmentId returns TraceScopeCondition.SegmentId, and is useful for accessing the field via an interface.
func (v *TraceScopeCondition) GetSegmentId() string { return v.SegmentId }

// GetSpanId returns TraceScopeCondition.SpanId, and is useful for accessing the field via an interface.
func (v *TraceScopeCondition) GetSpanId() int { return v.SpanId }

type TraceState string

const (
	TraceStateAll     TraceState = "ALL"
	TraceStateSuccess TraceState = "SUCCESS"
	TraceStateError   TraceState = "ERROR"
)

// TypeOfMetricsResponse is returned by TypeOfMetrics on success.
type TypeOfMetricsResponse struct {
	// Metrics definition metadata query. Response the metrics type which determines the suitable query methods.
	TypeOfMetrics MetricsType `json:"typeOfMetrics"`
}

// GetTypeOfMetrics returns TypeOfMetricsResponse.TypeOfMetrics, and is useful for accessing the field via an interface.
func (v *TypeOfMetricsResponse) GetTypeOfMetrics() MetricsType { return v.TypeOfMetrics }

// VersionResponse is returned by Version on success.
type VersionResponse struct {
	Version string `json:"version"`
}

// GetVersion returns VersionResponse.Version, and is useful for accessing the field via an interface.
func (v *VersionResponse) GetVersion() string { return v.Version }

// __AddTemplateInput is used internally by genqlient
type __AddTemplateInput struct {
	Setting NewDashboardSetting `json:"setting"`
}

// GetSetting returns __AddTemplateInput.Setting, and is useful for accessing the field via an interface.
func (v *__AddTemplateInput) GetSetting() NewDashboardSetting { return v.Setting }

// __AnalysisEBPFProfilingResultInput is used internally by genqlient
type __AnalysisEBPFProfilingResultInput struct {
	ScheduleIdList []string                          `json:"scheduleIdList"`
	TimeRanges     []EBPFProfilingAnalyzeTimeRange   `json:"timeRanges"`
	AggregateType  EBPFProfilingAnalyzeAggregateType `json:"aggregateType"`
}

// GetScheduleIdList returns __AnalysisEBPFProfilingResultInput.ScheduleIdList, and is useful for accessing the field via an interface.
func (v *__AnalysisEBPFProfilingResultInput) GetScheduleIdList() []string { return v.ScheduleIdList }

// GetTimeRanges returns __AnalysisEBPFProfilingResultInput.TimeRanges, and is useful for accessing the field via an interface.
func (v *__AnalysisEBPFProfilingResultInput) GetTimeRanges() []EBPFProfilingAnalyzeTimeRange {
	return v.TimeRanges
}

// GetAggregateType returns __AnalysisEBPFProfilingResultInput.AggregateType, and is useful for accessing the field via an interface.
func (v *__AnalysisEBPFProfilingResultInput) GetAggregateType() EBPFProfilingAnalyzeAggregateType {
	return v.AggregateType
}

// __ChangeTemplateInput is used internally by genqlient
type __ChangeTemplateInput struct {
	Setting DashboardSetting `json:"setting"`
}

// GetSetting returns __ChangeTemplateInput.Setting, and is useful for accessing the field via an interface.
func (v *__ChangeTemplateInput) GetSetting() DashboardSetting { return v.Setting }

// __CreateEBPFNetworkProfilingInput is used internally by genqlient
type __CreateEBPFNetworkProfilingInput struct {
	Request EBPFProfilingNetworkTaskRequest `json:"request"`
}

// GetRequest returns __CreateEBPFNetworkProfilingInput.Request, and is useful for accessing the field via an interface.
func (v *__CreateEBPFNetworkProfilingInput) GetRequest() EBPFProfilingNetworkTaskRequest {
	return v.Request
}

// __CreateEBPFProfilingFixedTimeTaskInput is used internally by genqlient
type __CreateEBPFProfilingFixedTimeTaskInput struct {
	Request EBPFProfilingTaskFixedTimeCreationRequest `json:"request"`
}

// GetRequest returns __CreateEBPFProfilingFixedTimeTaskInput.Request, and is useful for accessing the field via an interface.
func (v *__CreateEBPFProfilingFixedTimeTaskInput) GetRequest() EBPFProfilingTaskFixedTimeCreationRequest {
	return v.Request
}

// __CreateProfileTaskInput is used internally by genqlient
type __CreateProfileTaskInput struct {
	CreationRequest ProfileTaskCreationRequest `json:"creationRequest"`
}

// GetCreationRequest returns __CreateProfileTaskInput.CreationRequest, and is useful for accessing the field via an interface.
func (v *__CreateProfileTaskInput) GetCreationRequest() ProfileTaskCreationRequest {
	return v.CreationRequest
}

// __DisableTemplateInput is used internally by genqlient
type __DisableTemplateInput struct {
	Id string `json:"id"`
}

// GetId returns __DisableTemplateInput.Id, and is useful for accessing the field via an interface.
func (v *__DisableTemplateInput) GetId() string { return v.Id }

// __EstimateProcessScaleInput is used internally by genqlient
type __EstimateProcessScaleInput struct {
	ServiceId string   `json:"serviceId"`
	Labels    []string `json:"labels"`
}

// GetServiceId returns __EstimateProcessScaleInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__EstimateProcessScaleInput) GetServiceId() string { return v.ServiceId }

// GetLabels returns __EstimateProcessScaleInput.Labels, and is useful for accessing the field via an interface.
func (v *__EstimateProcessScaleInput) GetLabels() []string { return v.Labels }

// __ExecExpressionInput is used internally by genqlient
type __ExecExpressionInput struct {
	Expression string   `json:"expression"`
	Entity     Entity   `json:"entity"`
	Duration   Duration `json:"duration"`
}

// GetExpression returns __ExecExpressionInput.Expression, and is useful for accessing the field via an interface.
func (v *__ExecExpressionInput) GetExpression() string { return v.Expression }

// GetEntity returns __ExecExpressionInput.Entity, and is useful for accessing the field via an interface.
func (v *__ExecExpressionInput) GetEntity() Entity { return v.Entity }

// GetDuration returns __ExecExpressionInput.Duration, and is useful for accessing the field via an interface.
func (v *__ExecExpressionInput) GetDuration() Duration { return v.Duration }

// __FindEndpointInput is used internally by genqlient
type __FindEndpointInput struct {
	Keyword   string `json:"keyword"`
	ServiceId string `json:"serviceId"`
	Limit     int    `json:"limit"`
}

// GetKeyword returns __FindEndpointInput.Keyword, and is useful for accessing the field via an interface.
func (v *__FindEndpointInput) GetKeyword() string { return v.Keyword }

// GetServiceId returns __FindEndpointInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__FindEndpointInput) GetServiceId() string { return v.ServiceId }

// GetLimit returns __FindEndpointInput.Limit, and is useful for accessing the field via an interface.
func (v *__FindEndpointInput) GetLimit() int { return v.Limit }

// __FindServiceInput is used internally by genqlient
type __FindServiceInput struct {
	ServiceName string `json:"serviceName"`
}

// GetServiceName returns __FindServiceInput.ServiceName, and is useful for accessing the field via an interface.
func (v *__FindServiceInput) GetServiceName() string { return v.ServiceName }

// __GetAlarmInput is used internally by genqlient
type __GetAlarmInput struct {
	Duration Duration   `json:"duration"`
	Scope    Scope      `json:"scope"`
	Keyword  string     `json:"keyword"`
	Paging   Pagination `json:"paging"`
	Tags     []AlarmTag `json:"tags"`
}

// GetDuration returns __GetAlarmInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAlarmInput) GetDuration() Duration { return v.Duration }

// GetScope returns __GetAlarmInput.Scope, and is useful for accessing the field via an interface.
func (v *__GetAlarmInput) GetScope() Scope { return v.Scope }

// GetKeyword returns __GetAlarmInput.Keyword, and is useful for accessing the field via an interface.
func (v *__GetAlarmInput) GetKeyword() string { return v.Keyword }

// GetPaging returns __GetAlarmInput.Paging, and is useful for accessing the field via an interface.
func (v *__GetAlarmInput) GetPaging() Pagination { return v.Paging }

// GetTags returns __GetAlarmInput.Tags, and is useful for accessing the field via an interface.
func (v *__GetAlarmInput) GetTags() []AlarmTag { return v.Tags }

// __GetAlarmTrendInput is used internally by genqlient
type __GetAlarmTrendInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __GetAlarmTrendInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAlarmTrendInput) GetDuration() Duration { return v.Duration }

// __GetAllBrowserServicesInput is used internally by genqlient
type __GetAllBrowserServicesInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __GetAllBrowserServicesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAllBrowserServicesInput) GetDuration() Duration { return v.Duration }

// __GetAllDatabasesInput is used internally by genqlient
type __GetAllDatabasesInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __GetAllDatabasesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAllDatabasesInput) GetDuration() Duration { return v.Duration }

// __GetAllEndpointTopNInput is used internally by genqlient
type __GetAllEndpointTopNInput struct {
	Name     string   `json:"name"`
	TopN     int      `json:"topN"`
	Duration Duration `json:"duration"`
	Order    Order    `json:"order"`
}

// GetName returns __GetAllEndpointTopNInput.Name, and is useful for accessing the field via an interface.
func (v *__GetAllEndpointTopNInput) GetName() string { return v.Name }

// GetTopN returns __GetAllEndpointTopNInput.TopN, and is useful for accessing the field via an interface.
func (v *__GetAllEndpointTopNInput) GetTopN() int { return v.TopN }

// GetDuration returns __GetAllEndpointTopNInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAllEndpointTopNInput) GetDuration() Duration { return v.Duration }

// GetOrder returns __GetAllEndpointTopNInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAllEndpointTopNInput) GetOrder() Order { return v.Order }

// __GetAllServiceInstanceTopNInput is used internally by genqlient
type __GetAllServiceInstanceTopNInput struct {
	Name     string   `json:"name"`
	TopN     int      `json:"topN"`
	Duration Duration `json:"duration"`
	Order    Order    `json:"order"`
}

// GetName returns __GetAllServiceInstanceTopNInput.Name, and is useful for accessing the field via an interface.
func (v *__GetAllServiceInstanceTopNInput) GetName() string { return v.Name }

// GetTopN returns __GetAllServiceInstanceTopNInput.TopN, and is useful for accessing the field via an interface.
func (v *__GetAllServiceInstanceTopNInput) GetTopN() int { return v.TopN }

// GetDuration returns __GetAllServiceInstanceTopNInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAllServiceInstanceTopNInput) GetDuration() Duration { return v.Duration }

// GetOrder returns __GetAllServiceInstanceTopNInput.Order, and is useful for accessing the field via an interface.
func (v *__GetAllServiceInstanceTopNInput) GetOrder() Order { return v.Order }

// __GetAllServicesInput is used internally by genqlient
type __GetAllServicesInput struct {
	Duration Duration `json:"duration"`
	Group    string   `json:"group"`
}

// GetDuration returns __GetAllServicesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetAllServicesInput) GetDuration() Duration { return v.Duration }

// GetGroup returns __GetAllServicesInput.Group, and is useful for accessing the field via an interface.
func (v *__GetAllServicesInput) GetGroup() string { return v.Group }

// __GetEndpointDependenciesInput is used internally by genqlient
type __GetEndpointDependenciesInput struct {
	EndpointId string   `json:"endpointId"`
	Duration   Duration `json:"duration"`
}

// GetEndpointId returns __GetEndpointDependenciesInput.EndpointId, and is useful for accessing the field via an interface.
func (v *__GetEndpointDependenciesInput) GetEndpointId() string { return v.EndpointId }

// GetDuration returns __GetEndpointDependenciesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetEndpointDependenciesInput) GetDuration() Duration { return v.Duration }

// __GetEndpointInfoInput is used internally by genqlient
type __GetEndpointInfoInput struct {
	EndpointId string `json:"endpointId"`
}

// GetEndpointId returns __GetEndpointInfoInput.EndpointId, and is useful for accessing the field via an interface.
func (v *__GetEndpointInfoInput) GetEndpointId() string { return v.EndpointId }

// __GetEndpointTopNInput is used internally by genqlient
type __GetEndpointTopNInput struct {
	ServiceId string   `json:"serviceId"`
	Name      string   `json:"name"`
	TopN      int      `json:"topN"`
	Duration  Duration `json:"duration"`
	Order     Order    `json:"order"`
}

// GetServiceId returns __GetEndpointTopNInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopNInput) GetServiceId() string { return v.ServiceId }

// GetName returns __GetEndpointTopNInput.Name, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopNInput) GetName() string { return v.Name }

// GetTopN returns __GetEndpointTopNInput.TopN, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopNInput) GetTopN() int { return v.TopN }

// GetDuration returns __GetEndpointTopNInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopNInput) GetDuration() Duration { return v.Duration }

// GetOrder returns __GetEndpointTopNInput.Order, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopNInput) GetOrder() Order { return v.Order }

// __GetEndpointTopologyInput is used internally by genqlient
type __GetEndpointTopologyInput struct {
	EndpointId string   `json:"endpointId"`
	Duration   Duration `json:"duration"`
}

// GetEndpointId returns __GetEndpointTopologyInput.EndpointId, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopologyInput) GetEndpointId() string { return v.EndpointId }

// GetDuration returns __GetEndpointTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetEndpointTopologyInput) GetDuration() Duration { return v.Duration }

// __GetGlobalTopologyInput is used internally by genqlient
type __GetGlobalTopologyInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __GetGlobalTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetGlobalTopologyInput) GetDuration() Duration { return v.Duration }

// __GetInstanceInput is used internally by genqlient
type __GetInstanceInput struct {
	InstanceId string `json:"instanceId"`
}

// GetInstanceId returns __GetInstanceInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__GetInstanceInput) GetInstanceId() string { return v.InstanceId }

// __GetLinearIntValuesInput is used internally by genqlient
type __GetLinearIntValuesInput struct {
	Metric   MetricCondition `json:"metric"`
	Duration Duration        `json:"duration"`
}

// GetMetric returns __GetLinearIntValuesInput.Metric, and is useful for accessing the field via an interface.
func (v *__GetLinearIntValuesInput) GetMetric() MetricCondition { return v.Metric }

// GetDuration returns __GetLinearIntValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetLinearIntValuesInput) GetDuration() Duration { return v.Duration }

// __GetMultipleLinearIntValuesInput is used internally by genqlient
type __GetMultipleLinearIntValuesInput struct {
	Metric      MetricCondition `json:"metric"`
	NumOfLinear int             `json:"numOfLinear"`
	Duration    Duration        `json:"duration"`
}

// GetMetric returns __GetMultipleLinearIntValuesInput.Metric, and is useful for accessing the field via an interface.
func (v *__GetMultipleLinearIntValuesInput) GetMetric() MetricCondition { return v.Metric }

// GetNumOfLinear returns __GetMultipleLinearIntValuesInput.NumOfLinear, and is useful for accessing the field via an interface.
func (v *__GetMultipleLinearIntValuesInput) GetNumOfLinear() int { return v.NumOfLinear }

// GetDuration returns __GetMultipleLinearIntValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetMultipleLinearIntValuesInput) GetDuration() Duration { return v.Duration }

// __GetProcessInput is used internally by genqlient
type __GetProcessInput struct {
	ProcessId string `json:"processId"`
}

// GetProcessId returns __GetProcessInput.ProcessId, and is useful for accessing the field via an interface.
func (v *__GetProcessInput) GetProcessId() string { return v.ProcessId }

// __GetProcessTopologyInput is used internally by genqlient
type __GetProcessTopologyInput struct {
	ServiceInstanceId string   `json:"serviceInstanceId"`
	Duration          Duration `json:"duration"`
}

// GetServiceInstanceId returns __GetProcessTopologyInput.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *__GetProcessTopologyInput) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetDuration returns __GetProcessTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetProcessTopologyInput) GetDuration() Duration { return v.Duration }

// __GetProfileTaskListInput is used internally by genqlient
type __GetProfileTaskListInput struct {
	ServiceId    string `json:"serviceId"`
	EndpointName string `json:"endpointName"`
}

// GetServiceId returns __GetProfileTaskListInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetProfileTaskListInput) GetServiceId() string { return v.ServiceId }

// GetEndpointName returns __GetProfileTaskListInput.EndpointName, and is useful for accessing the field via an interface.
func (v *__GetProfileTaskListInput) GetEndpointName() string { return v.EndpointName }

// __GetProfileTaskLogsInput is used internally by genqlient
type __GetProfileTaskLogsInput struct {
	TaskID string `json:"taskID"`
}

// GetTaskID returns __GetProfileTaskLogsInput.TaskID, and is useful for accessing the field via an interface.
func (v *__GetProfileTaskLogsInput) GetTaskID() string { return v.TaskID }

// __GetProfileTaskSegmentsInput is used internally by genqlient
type __GetProfileTaskSegmentsInput struct {
	TaskID string `json:"taskID"`
}

// GetTaskID returns __GetProfileTaskSegmentsInput.TaskID, and is useful for accessing the field via an interface.
func (v *__GetProfileTaskSegmentsInput) GetTaskID() string { return v.TaskID }

// __GetSegmentsProfileAnalyzeInput is used internally by genqlient
type __GetSegmentsProfileAnalyzeInput struct {
	Queries []SegmentProfileAnalyzeQuery `json:"queries"`
}

// GetQueries returns __GetSegmentsProfileAnalyzeInput.Queries, and is useful for accessing the field via an interface.
func (v *__GetSegmentsProfileAnalyzeInput) GetQueries() []SegmentProfileAnalyzeQuery {
	return v.Queries
}

// __GetServiceInput is used internally by genqlient
type __GetServiceInput struct {
	ServiceId string `json:"serviceId"`
}

// GetServiceId returns __GetServiceInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceInput) GetServiceId() string { return v.ServiceId }

// __GetServiceInstanceTopNInput is used internally by genqlient
type __GetServiceInstanceTopNInput struct {
	ServiceId string   `json:"serviceId"`
	Name      string   `json:"name"`
	TopN      int      `json:"topN"`
	Duration  Duration `json:"duration"`
	Order     Order    `json:"order"`
}

// GetServiceId returns __GetServiceInstanceTopNInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopNInput) GetServiceId() string { return v.ServiceId }

// GetName returns __GetServiceInstanceTopNInput.Name, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopNInput) GetName() string { return v.Name }

// GetTopN returns __GetServiceInstanceTopNInput.TopN, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopNInput) GetTopN() int { return v.TopN }

// GetDuration returns __GetServiceInstanceTopNInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopNInput) GetDuration() Duration { return v.Duration }

// GetOrder returns __GetServiceInstanceTopNInput.Order, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopNInput) GetOrder() Order { return v.Order }

// __GetServiceInstanceTopologyInput is used internally by genqlient
type __GetServiceInstanceTopologyInput struct {
	ClientServiceId string   `json:"clientServiceId"`
	ServerServiceId string   `json:"serverServiceId"`
	Duration        Duration `json:"duration"`
}

// GetClientServiceId returns __GetServiceInstanceTopologyInput.ClientServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopologyInput) GetClientServiceId() string { return v.ClientServiceId }

// GetServerServiceId returns __GetServiceInstanceTopologyInput.ServerServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopologyInput) GetServerServiceId() string { return v.ServerServiceId }

// GetDuration returns __GetServiceInstanceTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServiceInstanceTopologyInput) GetDuration() Duration { return v.Duration }

// __GetServiceInstancesInput is used internally by genqlient
type __GetServiceInstancesInput struct {
	Duration  Duration `json:"duration"`
	ServiceId string   `json:"serviceId"`
}

// GetDuration returns __GetServiceInstancesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServiceInstancesInput) GetDuration() Duration { return v.Duration }

// GetServiceId returns __GetServiceInstancesInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceInstancesInput) GetServiceId() string { return v.ServiceId }

// __GetServiceTopNInput is used internally by genqlient
type __GetServiceTopNInput struct {
	Name     string   `json:"name"`
	TopN     int      `json:"topN"`
	Duration Duration `json:"duration"`
	Order    Order    `json:"order"`
}

// GetName returns __GetServiceTopNInput.Name, and is useful for accessing the field via an interface.
func (v *__GetServiceTopNInput) GetName() string { return v.Name }

// GetTopN returns __GetServiceTopNInput.TopN, and is useful for accessing the field via an interface.
func (v *__GetServiceTopNInput) GetTopN() int { return v.TopN }

// GetDuration returns __GetServiceTopNInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServiceTopNInput) GetDuration() Duration { return v.Duration }

// GetOrder returns __GetServiceTopNInput.Order, and is useful for accessing the field via an interface.
func (v *__GetServiceTopNInput) GetOrder() Order { return v.Order }

// __GetServiceTopologyInput is used internally by genqlient
type __GetServiceTopologyInput struct {
	ServiceId string   `json:"serviceId"`
	Duration  Duration `json:"duration"`
}

// GetServiceId returns __GetServiceTopologyInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__GetServiceTopologyInput) GetServiceId() string { return v.ServiceId }

// GetDuration returns __GetServiceTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServiceTopologyInput) GetDuration() Duration { return v.Duration }

// __GetServicesTopologyInput is used internally by genqlient
type __GetServicesTopologyInput struct {
	ServiceIds []string `json:"serviceIds"`
	Duration   Duration `json:"duration"`
}

// GetServiceIds returns __GetServicesTopologyInput.ServiceIds, and is useful for accessing the field via an interface.
func (v *__GetServicesTopologyInput) GetServiceIds() []string { return v.ServiceIds }

// GetDuration returns __GetServicesTopologyInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetServicesTopologyInput) GetDuration() Duration { return v.Duration }

// __GetSubsetOfMultipleLinearIntValuesInput is used internally by genqlient
type __GetSubsetOfMultipleLinearIntValuesInput struct {
	Metric      MetricCondition `json:"metric"`
	LinearIndex []int           `json:"linearIndex"`
	Duration    Duration        `json:"duration"`
}

// GetMetric returns __GetSubsetOfMultipleLinearIntValuesInput.Metric, and is useful for accessing the field via an interface.
func (v *__GetSubsetOfMultipleLinearIntValuesInput) GetMetric() MetricCondition { return v.Metric }

// GetLinearIndex returns __GetSubsetOfMultipleLinearIntValuesInput.LinearIndex, and is useful for accessing the field via an interface.
func (v *__GetSubsetOfMultipleLinearIntValuesInput) GetLinearIndex() []int { return v.LinearIndex }

// GetDuration returns __GetSubsetOfMultipleLinearIntValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetSubsetOfMultipleLinearIntValuesInput) GetDuration() Duration { return v.Duration }

// __GetTemplateInput is used internally by genqlient
type __GetTemplateInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTemplateInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTemplateInput) GetId() string { return v.Id }

// __GetThermodynamicInput is used internally by genqlient
type __GetThermodynamicInput struct {
	Metric   MetricCondition `json:"metric"`
	Duration Duration        `json:"duration"`
}

// GetMetric returns __GetThermodynamicInput.Metric, and is useful for accessing the field via an interface.
func (v *__GetThermodynamicInput) GetMetric() MetricCondition { return v.Metric }

// GetDuration returns __GetThermodynamicInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetThermodynamicInput) GetDuration() Duration { return v.Duration }

// __GetTopNRecordsInput is used internally by genqlient
type __GetTopNRecordsInput struct {
	Condition TopNRecordsCondition `json:"condition"`
}

// GetCondition returns __GetTopNRecordsInput.Condition, and is useful for accessing the field via an interface.
func (v *__GetTopNRecordsInput) GetCondition() TopNRecordsCondition { return v.Condition }

// __GetValuesInput is used internally by genqlient
type __GetValuesInput struct {
	Metric   BatchMetricConditions `json:"metric"`
	Duration Duration              `json:"duration"`
}

// GetMetric returns __GetValuesInput.Metric, and is useful for accessing the field via an interface.
func (v *__GetValuesInput) GetMetric() BatchMetricConditions { return v.Metric }

// GetDuration returns __GetValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__GetValuesInput) GetDuration() Duration { return v.Duration }

// __KeepEBPFNetworkProfilingInput is used internally by genqlient
type __KeepEBPFNetworkProfilingInput struct {
	TaskId string `json:"taskId"`
}

// GetTaskId returns __KeepEBPFNetworkProfilingInput.TaskId, and is useful for accessing the field via an interface.
func (v *__KeepEBPFNetworkProfilingInput) GetTaskId() string { return v.TaskId }

// __ListInstancesInput is used internally by genqlient
type __ListInstancesInput struct {
	Duration  Duration `json:"duration"`
	ServiceId string   `json:"serviceId"`
}

// GetDuration returns __ListInstancesInput.Duration, and is useful for accessing the field via an interface.
func (v *__ListInstancesInput) GetDuration() Duration { return v.Duration }

// GetServiceId returns __ListInstancesInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__ListInstancesInput) GetServiceId() string { return v.ServiceId }

// __ListMetricsInput is used internally by genqlient
type __ListMetricsInput struct {
	Regex string `json:"regex"`
}

// GetRegex returns __ListMetricsInput.Regex, and is useful for accessing the field via an interface.
func (v *__ListMetricsInput) GetRegex() string { return v.Regex }

// __ListProcessesInput is used internally by genqlient
type __ListProcessesInput struct {
	Duration   Duration `json:"duration"`
	InstanceId string   `json:"instanceId"`
}

// GetDuration returns __ListProcessesInput.Duration, and is useful for accessing the field via an interface.
func (v *__ListProcessesInput) GetDuration() Duration { return v.Duration }

// GetInstanceId returns __ListProcessesInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__ListProcessesInput) GetInstanceId() string { return v.InstanceId }

// __ListServicesInput is used internally by genqlient
type __ListServicesInput struct {
	Layer string `json:"layer"`
}

// GetLayer returns __ListServicesInput.Layer, and is useful for accessing the field via an interface.
func (v *__ListServicesInput) GetLayer() string { return v.Layer }

// __QueryBasicTracesInput is used internally by genqlient
type __QueryBasicTracesInput struct {
	Condition TraceQueryCondition `json:"condition"`
}

// GetCondition returns __QueryBasicTracesInput.Condition, and is useful for accessing the field via an interface.
func (v *__QueryBasicTracesInput) GetCondition() TraceQueryCondition { return v.Condition }

// __QueryBrowserErrorLogsInput is used internally by genqlient
type __QueryBrowserErrorLogsInput struct {
	Condition BrowserErrorLogQueryCondition `json:"condition"`
}

// GetCondition returns __QueryBrowserErrorLogsInput.Condition, and is useful for accessing the field via an interface.
func (v *__QueryBrowserErrorLogsInput) GetCondition() BrowserErrorLogQueryCondition {
	return v.Condition
}

// __QueryContinuousProfilingMonitoringInstancesInput is used internally by genqlient
type __QueryContinuousProfilingMonitoringInstancesInput struct {
	ServiceId string                        `json:"serviceId"`
	Target    ContinuousProfilingTargetType `json:"target"`
}

// GetServiceId returns __QueryContinuousProfilingMonitoringInstancesInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__QueryContinuousProfilingMonitoringInstancesInput) GetServiceId() string {
	return v.ServiceId
}

// GetTarget returns __QueryContinuousProfilingMonitoringInstancesInput.Target, and is useful for accessing the field via an interface.
func (v *__QueryContinuousProfilingMonitoringInstancesInput) GetTarget() ContinuousProfilingTargetType {
	return v.Target
}

// __QueryContinuousProfilingServiceTargetsInput is used internally by genqlient
type __QueryContinuousProfilingServiceTargetsInput struct {
	ServiceId string `json:"serviceId"`
}

// GetServiceId returns __QueryContinuousProfilingServiceTargetsInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__QueryContinuousProfilingServiceTargetsInput) GetServiceId() string { return v.ServiceId }

// __QueryEBPFProfilingSchedulesInput is used internally by genqlient
type __QueryEBPFProfilingSchedulesInput struct {
	TaskId string `json:"taskId"`
}

// GetTaskId returns __QueryEBPFProfilingSchedulesInput.TaskId, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingSchedulesInput) GetTaskId() string { return v.TaskId }

// __QueryEBPFProfilingTasksInput is used internally by genqlient
type __QueryEBPFProfilingTasksInput struct {
	ServiceId         string                    `json:"serviceId"`
	ServiceInstanceId string                    `json:"serviceInstanceId"`
	Targets           []EBPFProfilingTargetType `json:"targets"`
	TriggerType       EBPFProfilingTriggerType  `json:"triggerType"`
	Duration          Duration                  `json:"duration"`
}

// GetServiceId returns __QueryEBPFProfilingTasksInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingTasksInput) GetServiceId() string { return v.ServiceId }

// GetServiceInstanceId returns __QueryEBPFProfilingTasksInput.ServiceInstanceId, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingTasksInput) GetServiceInstanceId() string { return v.ServiceInstanceId }

// GetTargets returns __QueryEBPFProfilingTasksInput.Targets, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingTasksInput) GetTargets() []EBPFProfilingTargetType { return v.Targets }

// GetTriggerType returns __QueryEBPFProfilingTasksInput.TriggerType, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingTasksInput) GetTriggerType() EBPFProfilingTriggerType {
	return v.TriggerType
}

// GetDuration returns __QueryEBPFProfilingTasksInput.Duration, and is useful for accessing the field via an interface.
func (v *__QueryEBPFProfilingTasksInput) GetDuration() Duration { return v.Duration }

// __QueryEventsInput is used internally by genqlient
type __QueryEventsInput struct {
	Condition EventQueryCondition `json:"condition"`
}

// GetCondition returns __QueryEventsInput.Condition, and is useful for accessing the field via an interface.
func (v *__QueryEventsInput) GetCondition() EventQueryCondition { return v.Condition }

// __QueryLogTagAutocompleteKeysInput is used internally by genqlient
type __QueryLogTagAutocompleteKeysInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __QueryLogTagAutocompleteKeysInput.Duration, and is useful for accessing the field via an interface.
func (v *__QueryLogTagAutocompleteKeysInput) GetDuration() Duration { return v.Duration }

// __QueryLogTagAutocompleteValuesInput is used internally by genqlient
type __QueryLogTagAutocompleteValuesInput struct {
	TagKey   string   `json:"tagKey"`
	Duration Duration `json:"duration"`
}

// GetTagKey returns __QueryLogTagAutocompleteValuesInput.TagKey, and is useful for accessing the field via an interface.
func (v *__QueryLogTagAutocompleteValuesInput) GetTagKey() string { return v.TagKey }

// GetDuration returns __QueryLogTagAutocompleteValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__QueryLogTagAutocompleteValuesInput) GetDuration() Duration { return v.Duration }

// __QueryLogsInput is used internally by genqlient
type __QueryLogsInput struct {
	Condition LogQueryCondition `json:"condition"`
}

// GetCondition returns __QueryLogsInput.Condition, and is useful for accessing the field via an interface.
func (v *__QueryLogsInput) GetCondition() LogQueryCondition { return v.Condition }

// __QueryPrepareCreateEBPFProfilingTaskDataInput is used internally by genqlient
type __QueryPrepareCreateEBPFProfilingTaskDataInput struct {
	ServiceId string `json:"serviceId"`
}

// GetServiceId returns __QueryPrepareCreateEBPFProfilingTaskDataInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__QueryPrepareCreateEBPFProfilingTaskDataInput) GetServiceId() string { return v.ServiceId }

// __QueryTraceInput is used internally by genqlient
type __QueryTraceInput struct {
	TraceId string `json:"traceId"`
}

// GetTraceId returns __QueryTraceInput.TraceId, and is useful for accessing the field via an interface.
func (v *__QueryTraceInput) GetTraceId() string { return v.TraceId }

// __QueryTraceTagAutocompleteKeysInput is used internally by genqlient
type __QueryTraceTagAutocompleteKeysInput struct {
	Duration Duration `json:"duration"`
}

// GetDuration returns __QueryTraceTagAutocompleteKeysInput.Duration, and is useful for accessing the field via an interface.
func (v *__QueryTraceTagAutocompleteKeysInput) GetDuration() Duration { return v.Duration }

// __QueryTraceTagAutocompleteValuesInput is used internally by genqlient
type __QueryTraceTagAutocompleteValuesInput struct {
	TagKey   string   `json:"tagKey"`
	Duration Duration `json:"duration"`
}

// GetTagKey returns __QueryTraceTagAutocompleteValuesInput.TagKey, and is useful for accessing the field via an interface.
func (v *__QueryTraceTagAutocompleteValuesInput) GetTagKey() string { return v.TagKey }

// GetDuration returns __QueryTraceTagAutocompleteValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__QueryTraceTagAutocompleteValuesInput) GetDuration() Duration { return v.Duration }

// __ReadHeatMapInput is used internally by genqlient
type __ReadHeatMapInput struct {
	Condition MetricsCondition `json:"condition"`
	Duration  Duration         `json:"duration"`
}

// GetCondition returns __ReadHeatMapInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadHeatMapInput) GetCondition() MetricsCondition { return v.Condition }

// GetDuration returns __ReadHeatMapInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadHeatMapInput) GetDuration() Duration { return v.Duration }

// __ReadLabeledMetricsValuesInput is used internally by genqlient
type __ReadLabeledMetricsValuesInput struct {
	Condition MetricsCondition `json:"condition"`
	Labels    []string         `json:"labels"`
	Duration  Duration         `json:"duration"`
}

// GetCondition returns __ReadLabeledMetricsValuesInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadLabeledMetricsValuesInput) GetCondition() MetricsCondition { return v.Condition }

// GetLabels returns __ReadLabeledMetricsValuesInput.Labels, and is useful for accessing the field via an interface.
func (v *__ReadLabeledMetricsValuesInput) GetLabels() []string { return v.Labels }

// GetDuration returns __ReadLabeledMetricsValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadLabeledMetricsValuesInput) GetDuration() Duration { return v.Duration }

// __ReadMetricsValueInput is used internally by genqlient
type __ReadMetricsValueInput struct {
	Condition MetricsCondition `json:"condition"`
	Duration  Duration         `json:"duration"`
}

// GetCondition returns __ReadMetricsValueInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadMetricsValueInput) GetCondition() MetricsCondition { return v.Condition }

// GetDuration returns __ReadMetricsValueInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadMetricsValueInput) GetDuration() Duration { return v.Duration }

// __ReadMetricsValuesInput is used internally by genqlient
type __ReadMetricsValuesInput struct {
	Condition MetricsCondition `json:"condition"`
	Duration  Duration         `json:"duration"`
}

// GetCondition returns __ReadMetricsValuesInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadMetricsValuesInput) GetCondition() MetricsCondition { return v.Condition }

// GetDuration returns __ReadMetricsValuesInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadMetricsValuesInput) GetDuration() Duration { return v.Duration }

// __ReadNullableMetricsValueInput is used internally by genqlient
type __ReadNullableMetricsValueInput struct {
	Condition MetricsCondition `json:"condition"`
	Duration  Duration         `json:"duration"`
}

// GetCondition returns __ReadNullableMetricsValueInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadNullableMetricsValueInput) GetCondition() MetricsCondition { return v.Condition }

// GetDuration returns __ReadNullableMetricsValueInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadNullableMetricsValueInput) GetDuration() Duration { return v.Duration }

// __ReadRecordsInput is used internally by genqlient
type __ReadRecordsInput struct {
	Condition RecordCondition `json:"condition"`
	Duration  Duration        `json:"duration"`
}

// GetCondition returns __ReadRecordsInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadRecordsInput) GetCondition() RecordCondition { return v.Condition }

// GetDuration returns __ReadRecordsInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadRecordsInput) GetDuration() Duration { return v.Duration }

// __ReadSampledRecordsInput is used internally by genqlient
type __ReadSampledRecordsInput struct {
	Condition TopNCondition `json:"condition"`
	Duration  Duration      `json:"duration"`
}

// GetCondition returns __ReadSampledRecordsInput.Condition, and is useful for accessing the field via an interface.
func (v *__ReadSampledRecordsInput) GetCondition() TopNCondition { return v.Condition }

// GetDuration returns __ReadSampledRecordsInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadSampledRecordsInput) GetDuration() Duration { return v.Duration }

// __SearchBrowserServiceInput is used internally by genqlient
type __SearchBrowserServiceInput struct {
	ServiceCode string `json:"serviceCode"`
}

// GetServiceCode returns __SearchBrowserServiceInput.ServiceCode, and is useful for accessing the field via an interface.
func (v *__SearchBrowserServiceInput) GetServiceCode() string { return v.ServiceCode }

// __SearchBrowserServicesInput is used internally by genqlient
type __SearchBrowserServicesInput struct {
	Duration Duration `json:"duration"`
	Keyword  string   `json:"keyword"`
}

// GetDuration returns __SearchBrowserServicesInput.Duration, and is useful for accessing the field via an interface.
func (v *__SearchBrowserServicesInput) GetDuration() Duration { return v.Duration }

// GetKeyword returns __SearchBrowserServicesInput.Keyword, and is useful for accessing the field via an interface.
func (v *__SearchBrowserServicesInput) GetKeyword() string { return v.Keyword }

// __SearchEndpointInput is used internally by genqlient
type __SearchEndpointInput struct {
	Keyword   string `json:"keyword"`
	ServiceId string `json:"serviceId"`
	Limit     int    `json:"limit"`
}

// GetKeyword returns __SearchEndpointInput.Keyword, and is useful for accessing the field via an interface.
func (v *__SearchEndpointInput) GetKeyword() string { return v.Keyword }

// GetServiceId returns __SearchEndpointInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__SearchEndpointInput) GetServiceId() string { return v.ServiceId }

// GetLimit returns __SearchEndpointInput.Limit, and is useful for accessing the field via an interface.
func (v *__SearchEndpointInput) GetLimit() int { return v.Limit }

// __SearchServiceInput is used internally by genqlient
type __SearchServiceInput struct {
	ServiceCode string `json:"serviceCode"`
}

// GetServiceCode returns __SearchServiceInput.ServiceCode, and is useful for accessing the field via an interface.
func (v *__SearchServiceInput) GetServiceCode() string { return v.ServiceCode }

// __SearchServicesInput is used internally by genqlient
type __SearchServicesInput struct {
	Duration Duration `json:"duration"`
	Keyword  string   `json:"keyword"`
}

// GetDuration returns __SearchServicesInput.Duration, and is useful for accessing the field via an interface.
func (v *__SearchServicesInput) GetDuration() Duration { return v.Duration }

// GetKeyword returns __SearchServicesInput.Keyword, and is useful for accessing the field via an interface.
func (v *__SearchServicesInput) GetKeyword() string { return v.Keyword }

// __SetContinuousProfilingPolicyInput is used internally by genqlient
type __SetContinuousProfilingPolicyInput struct {
	Request ContinuousProfilingPolicyCreation `json:"request"`
}

// GetRequest returns __SetContinuousProfilingPolicyInput.Request, and is useful for accessing the field via an interface.
func (v *__SetContinuousProfilingPolicyInput) GetRequest() ContinuousProfilingPolicyCreation {
	return v.Request
}

// __SortMetricsInput is used internally by genqlient
type __SortMetricsInput struct {
	Condition TopNCondition `json:"condition"`
	Duration  Duration      `json:"duration"`
}

// GetCondition returns __SortMetricsInput.Condition, and is useful for accessing the field via an interface.
func (v *__SortMetricsInput) GetCondition() TopNCondition { return v.Condition }

// GetDuration returns __SortMetricsInput.Duration, and is useful for accessing the field via an interface.
func (v *__SortMetricsInput) GetDuration() Duration { return v.Duration }

// __TestInput is used internally by genqlient
type __TestInput struct {
	Requests LogTestRequest `json:"requests"`
}

// GetRequests returns __TestInput.Requests, and is useful for accessing the field via an interface.
func (v *__TestInput) GetRequests() LogTestRequest { return v.Requests }

// __TypeOfMetricsInput is used internally by genqlient
type __TypeOfMetricsInput struct {
	Name string `json:"name"`
}

// GetName returns __TypeOfMetricsInput.Name, and is useful for accessing the field via an interface.
func (v *__TypeOfMetricsInput) GetName() string { return v.Name }

// The query or mutation executed by AddTemplate.
const AddTemplate_Operation = `
mutation AddTemplate ($setting: NewDashboardSetting!) {
	addTemplate(setting: $setting) {
		id
		status
		message
	}
}
`

func AddTemplate(
	ctx_ context.Context,
	client_ graphql.Client,
	setting NewDashboardSetting,
) (*AddTemplateResponse, error) {
	req_ := &graphql.Request{
		OpName: "AddTemplate",
		Query:  AddTemplate_Operation,
		Variables: &__AddTemplateInput{
			Setting: setting,
		},
	}
	var err_ error

	var data_ AddTemplateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by AnalysisEBPFProfilingResult.
const AnalysisEBPFProfilingResult_Operation = `
query AnalysisEBPFProfilingResult ($scheduleIdList: [ID!]!, $timeRanges: [EBPFProfilingAnalyzeTimeRange!]!, $aggregateType: EBPFProfilingAnalyzeAggregateType) {
	analysisEBPFProfilingResult(scheduleIdList: $scheduleIdList, timeRanges: $timeRanges, aggregateType: $aggregateType) {
		tip
		trees {
			elements {
				id
				parentId
				symbol
				stackType
				dumpCount
			}
		}
	}
}
`

func AnalysisEBPFProfilingResult(
	ctx_ context.Context,
	client_ graphql.Client,
	scheduleIdList []string,
	timeRanges []EBPFProfilingAnalyzeTimeRange,
	aggregateType EBPFProfilingAnalyzeAggregateType,
) (*AnalysisEBPFProfilingResultResponse, error) {
	req_ := &graphql.Request{
		OpName: "AnalysisEBPFProfilingResult",
		Query:  AnalysisEBPFProfilingResult_Operation,
		Variables: &__AnalysisEBPFProfilingResultInput{
			ScheduleIdList: scheduleIdList,
			TimeRanges:     timeRanges,
			AggregateType:  aggregateType,
		},
	}
	var err_ error

	var data_ AnalysisEBPFProfilingResultResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ChangeTemplate.
const ChangeTemplate_Operation = `
mutation ChangeTemplate ($setting: DashboardSetting!) {
	changeTemplate(setting: $setting) {
		id
		status
		message
	}
}
`

func ChangeTemplate(
	ctx_ context.Context,
	client_ graphql.Client,
	setting DashboardSetting,
) (*ChangeTemplateResponse, error) {
	req_ := &graphql.Request{
		OpName: "ChangeTemplate",
		Query:  ChangeTemplate_Operation,
		Variables: &__ChangeTemplateInput{
			Setting: setting,
		},
	}
	var err_ error

	var data_ ChangeTemplateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CheckHealth.
const CheckHealth_Operation = `
query CheckHealth {
	checkHealth {
		score
		details
	}
}
`

func CheckHealth(
	ctx_ context.Context,
	client_ graphql.Client,
) (*CheckHealthResponse, error) {
	req_ := &graphql.Request{
		OpName: "CheckHealth",
		Query:  CheckHealth_Operation,
	}
	var err_ error

	var data_ CheckHealthResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateEBPFNetworkProfiling.
const CreateEBPFNetworkProfiling_Operation = `
mutation CreateEBPFNetworkProfiling ($request: EBPFProfilingNetworkTaskRequest!) {
	createEBPFNetworkProfiling(request: $request) {
		status
		errorReason
		id
	}
}
`

func CreateEBPFNetworkProfiling(
	ctx_ context.Context,
	client_ graphql.Client,
	request EBPFProfilingNetworkTaskRequest,
) (*CreateEBPFNetworkProfilingResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateEBPFNetworkProfiling",
		Query:  CreateEBPFNetworkProfiling_Operation,
		Variables: &__CreateEBPFNetworkProfilingInput{
			Request: request,
		},
	}
	var err_ error

	var data_ CreateEBPFNetworkProfilingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateEBPFProfilingFixedTimeTask.
const CreateEBPFProfilingFixedTimeTask_Operation = `
mutation CreateEBPFProfilingFixedTimeTask ($request: EBPFProfilingTaskFixedTimeCreationRequest!) {
	createEBPFProfilingFixedTimeTask(request: $request) {
		status
		errorReason
		id
	}
}
`

func CreateEBPFProfilingFixedTimeTask(
	ctx_ context.Context,
	client_ graphql.Client,
	request EBPFProfilingTaskFixedTimeCreationRequest,
) (*CreateEBPFProfilingFixedTimeTaskResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateEBPFProfilingFixedTimeTask",
		Query:  CreateEBPFProfilingFixedTimeTask_Operation,
		Variables: &__CreateEBPFProfilingFixedTimeTaskInput{
			Request: request,
		},
	}
	var err_ error

	var data_ CreateEBPFProfilingFixedTimeTaskResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by CreateProfileTask.
const CreateProfileTask_Operation = `
mutation CreateProfileTask ($creationRequest: ProfileTaskCreationRequest) {
	createProfileTask(creationRequest: $creationRequest) {
		errorReason
		id
	}
}
`

func CreateProfileTask(
	ctx_ context.Context,
	client_ graphql.Client,
	creationRequest ProfileTaskCreationRequest,
) (*CreateProfileTaskResponse, error) {
	req_ := &graphql.Request{
		OpName: "CreateProfileTask",
		Query:  CreateProfileTask_Operation,
		Variables: &__CreateProfileTaskInput{
			CreationRequest: creationRequest,
		},
	}
	var err_ error

	var data_ CreateProfileTaskResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by DisableTemplate.
const DisableTemplate_Operation = `
mutation DisableTemplate ($id: String!) {
	disableTemplate(id: $id) {
		id
		status
		message
	}
}
`

func DisableTemplate(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*DisableTemplateResponse, error) {
	req_ := &graphql.Request{
		OpName: "DisableTemplate",
		Query:  DisableTemplate_Operation,
		Variables: &__DisableTemplateInput{
			Id: id,
		},
	}
	var err_ error

	var data_ DisableTemplateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by EstimateProcessScale.
const EstimateProcessScale_Operation = `
query EstimateProcessScale ($serviceId: ID!, $labels: [String!]!) {
	estimateProcessScale(serviceId: $serviceId, labels: $labels)
}
`

func EstimateProcessScale(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	labels []string,
) (*EstimateProcessScaleResponse, error) {
	req_ := &graphql.Request{
		OpName: "EstimateProcessScale",
		Query:  EstimateProcessScale_Operation,
		Variables: &__EstimateProcessScaleInput{
			ServiceId: serviceId,
			Labels:    labels,
		},
	}
	var err_ error

	var data_ EstimateProcessScaleResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ExecExpression.
const ExecExpression_Operation = `
query ExecExpression ($expression: String!, $entity: Entity!, $duration: Duration!) {
	execExpression(expression: $expression, entity: $entity, duration: $duration) {
		type
		results {
			metric {
				labels {
					key
					value
				}
			}
			values {
				id
				value
				traceID
			}
		}
		error
	}
}
`

func ExecExpression(
	ctx_ context.Context,
	client_ graphql.Client,
	expression string,
	entity Entity,
	duration Duration,
) (*ExecExpressionResponse, error) {
	req_ := &graphql.Request{
		OpName: "ExecExpression",
		Query:  ExecExpression_Operation,
		Variables: &__ExecExpressionInput{
			Expression: expression,
			Entity:     entity,
			Duration:   duration,
		},
	}
	var err_ error

	var data_ ExecExpressionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FindEndpoint.
const FindEndpoint_Operation = `
query FindEndpoint ($keyword: String, $serviceId: ID!, $limit: Int!) {
	findEndpoint(keyword: $keyword, serviceId: $serviceId, limit: $limit) {
		id
		name
	}
}
`

func FindEndpoint(
	ctx_ context.Context,
	client_ graphql.Client,
	keyword string,
	serviceId string,
	limit int,
) (*FindEndpointResponse, error) {
	req_ := &graphql.Request{
		OpName: "FindEndpoint",
		Query:  FindEndpoint_Operation,
		Variables: &__FindEndpointInput{
			Keyword:   keyword,
			ServiceId: serviceId,
			Limit:     limit,
		},
	}
	var err_ error

	var data_ FindEndpointResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by FindService.
const FindService_Operation = `
query FindService ($serviceName: String!) {
	findService(serviceName: $serviceName) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func FindService(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceName string,
) (*FindServiceResponse, error) {
	req_ := &graphql.Request{
		OpName: "FindService",
		Query:  FindService_Operation,
		Variables: &__FindServiceInput{
			ServiceName: serviceName,
		},
	}
	var err_ error

	var data_ FindServiceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAlarm.
const GetAlarm_Operation = `
query GetAlarm ($duration: Duration!, $scope: Scope, $keyword: String, $paging: Pagination!, $tags: [AlarmTag]) {
	getAlarm(duration: $duration, scope: $scope, keyword: $keyword, paging: $paging, tags: $tags) {
		msgs {
			startTime
			scope
			id
			message
			events {
				uuid
				source {
					service
					serviceInstance
					endpoint
				}
				name
				type
				message
				parameters {
					key
					value
				}
				startTime
				endTime
				layer
			}
			tags {
				key
				value
			}
		}
	}
}
`

func GetAlarm(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	scope Scope,
	keyword string,
	paging Pagination,
	tags []AlarmTag,
) (*GetAlarmResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAlarm",
		Query:  GetAlarm_Operation,
		Variables: &__GetAlarmInput{
			Duration: duration,
			Scope:    scope,
			Keyword:  keyword,
			Paging:   paging,
			Tags:     tags,
		},
	}
	var err_ error

	var data_ GetAlarmResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAlarmTrend.
const GetAlarmTrend_Operation = `
query GetAlarmTrend ($duration: Duration!) {
	getAlarmTrend(duration: $duration) {
		numOfAlarm
	}
}
`

func GetAlarmTrend(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*GetAlarmTrendResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAlarmTrend",
		Query:  GetAlarmTrend_Operation,
		Variables: &__GetAlarmTrendInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetAlarmTrendResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllBrowserServices.
const GetAllBrowserServices_Operation = `
query GetAllBrowserServices ($duration: Duration!) {
	getAllBrowserServices(duration: $duration) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func GetAllBrowserServices(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*GetAllBrowserServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllBrowserServices",
		Query:  GetAllBrowserServices_Operation,
		Variables: &__GetAllBrowserServicesInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetAllBrowserServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllDatabases.
const GetAllDatabases_Operation = `
query GetAllDatabases ($duration: Duration!) {
	getAllDatabases(duration: $duration) {
		id
		name
		type
	}
}
`

func GetAllDatabases(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*GetAllDatabasesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllDatabases",
		Query:  GetAllDatabases_Operation,
		Variables: &__GetAllDatabasesInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetAllDatabasesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllEndpointTopN.
const GetAllEndpointTopN_Operation = `
query GetAllEndpointTopN ($name: String!, $topN: Int!, $duration: Duration!, $order: Order!) {
	getAllEndpointTopN(name: $name, topN: $topN, duration: $duration, order: $order) {
		name
		id
		value
	}
}
`

func GetAllEndpointTopN(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	topN int,
	duration Duration,
	order Order,
) (*GetAllEndpointTopNResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllEndpointTopN",
		Query:  GetAllEndpointTopN_Operation,
		Variables: &__GetAllEndpointTopNInput{
			Name:     name,
			TopN:     topN,
			Duration: duration,
			Order:    order,
		},
	}
	var err_ error

	var data_ GetAllEndpointTopNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllServiceInstanceTopN.
const GetAllServiceInstanceTopN_Operation = `
query GetAllServiceInstanceTopN ($name: String!, $topN: Int!, $duration: Duration!, $order: Order!) {
	getAllServiceInstanceTopN(name: $name, topN: $topN, duration: $duration, order: $order) {
		name
		id
		value
	}
}
`

func GetAllServiceInstanceTopN(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	topN int,
	duration Duration,
	order Order,
) (*GetAllServiceInstanceTopNResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllServiceInstanceTopN",
		Query:  GetAllServiceInstanceTopN_Operation,
		Variables: &__GetAllServiceInstanceTopNInput{
			Name:     name,
			TopN:     topN,
			Duration: duration,
			Order:    order,
		},
	}
	var err_ error

	var data_ GetAllServiceInstanceTopNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllServices.
const GetAllServices_Operation = `
query GetAllServices ($duration: Duration!, $group: String) {
	getAllServices(duration: $duration, group: $group) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func GetAllServices(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	group string,
) (*GetAllServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllServices",
		Query:  GetAllServices_Operation,
		Variables: &__GetAllServicesInput{
			Duration: duration,
			Group:    group,
		},
	}
	var err_ error

	var data_ GetAllServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetAllTemplates.
const GetAllTemplates_Operation = `
query GetAllTemplates {
	getAllTemplates {
		id
		configuration
	}
}
`

func GetAllTemplates(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetAllTemplatesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetAllTemplates",
		Query:  GetAllTemplates_Operation,
	}
	var err_ error

	var data_ GetAllTemplatesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetEndpointDependencies.
const GetEndpointDependencies_Operation = `
query GetEndpointDependencies ($endpointId: ID!, $duration: Duration!) {
	getEndpointDependencies(endpointId: $endpointId, duration: $duration) {
		nodes {
			id
			name
			serviceId
			serviceName
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetEndpointDependencies(
	ctx_ context.Context,
	client_ graphql.Client,
	endpointId string,
	duration Duration,
) (*GetEndpointDependenciesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetEndpointDependencies",
		Query:  GetEndpointDependencies_Operation,
		Variables: &__GetEndpointDependenciesInput{
			EndpointId: endpointId,
			Duration:   duration,
		},
	}
	var err_ error

	var data_ GetEndpointDependenciesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetEndpointInfo.
const GetEndpointInfo_Operation = `
query GetEndpointInfo ($endpointId: ID!) {
	getEndpointInfo(endpointId: $endpointId) {
		id
		name
		serviceId
		serviceName
	}
}
`

func GetEndpointInfo(
	ctx_ context.Context,
	client_ graphql.Client,
	endpointId string,
) (*GetEndpointInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetEndpointInfo",
		Query:  GetEndpointInfo_Operation,
		Variables: &__GetEndpointInfoInput{
			EndpointId: endpointId,
		},
	}
	var err_ error

	var data_ GetEndpointInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetEndpointTopN.
const GetEndpointTopN_Operation = `
query GetEndpointTopN ($serviceId: ID!, $name: String!, $topN: Int!, $duration: Duration!, $order: Order!) {
	getEndpointTopN(serviceId: $serviceId, name: $name, topN: $topN, duration: $duration, order: $order) {
		name
		id
		value
	}
}
`

func GetEndpointTopN(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	name string,
	topN int,
	duration Duration,
	order Order,
) (*GetEndpointTopNResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetEndpointTopN",
		Query:  GetEndpointTopN_Operation,
		Variables: &__GetEndpointTopNInput{
			ServiceId: serviceId,
			Name:      name,
			TopN:      topN,
			Duration:  duration,
			Order:     order,
		},
	}
	var err_ error

	var data_ GetEndpointTopNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetEndpointTopology.
const GetEndpointTopology_Operation = `
query GetEndpointTopology ($endpointId: ID!, $duration: Duration!) {
	getEndpointTopology(endpointId: $endpointId, duration: $duration) {
		nodes {
			id
			name
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetEndpointTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	endpointId string,
	duration Duration,
) (*GetEndpointTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetEndpointTopology",
		Query:  GetEndpointTopology_Operation,
		Variables: &__GetEndpointTopologyInput{
			EndpointId: endpointId,
			Duration:   duration,
		},
	}
	var err_ error

	var data_ GetEndpointTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetGlobalTopology.
const GetGlobalTopology_Operation = `
query GetGlobalTopology ($duration: Duration!) {
	getGlobalTopology(duration: $duration) {
		nodes {
			id
			name
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetGlobalTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*GetGlobalTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetGlobalTopology",
		Query:  GetGlobalTopology_Operation,
		Variables: &__GetGlobalTopologyInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetGlobalTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetInstance.
const GetInstance_Operation = `
query GetInstance ($instanceId: String!) {
	getInstance(instanceId: $instanceId) {
		id
		name
		attributes {
			name
			value
		}
		language
		instanceUUID
	}
}
`

func GetInstance(
	ctx_ context.Context,
	client_ graphql.Client,
	instanceId string,
) (*GetInstanceResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetInstance",
		Query:  GetInstance_Operation,
		Variables: &__GetInstanceInput{
			InstanceId: instanceId,
		},
	}
	var err_ error

	var data_ GetInstanceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetLinearIntValues.
const GetLinearIntValues_Operation = `
query GetLinearIntValues ($metric: MetricCondition!, $duration: Duration!) {
	getLinearIntValues(metric: $metric, duration: $duration) {
		values {
			id
			value
			isEmptyValue
		}
	}
}
`

func GetLinearIntValues(
	ctx_ context.Context,
	client_ graphql.Client,
	metric MetricCondition,
	duration Duration,
) (*GetLinearIntValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetLinearIntValues",
		Query:  GetLinearIntValues_Operation,
		Variables: &__GetLinearIntValuesInput{
			Metric:   metric,
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetLinearIntValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetMenuItems.
const GetMenuItems_Operation = `
query GetMenuItems {
	getMenuItems {
		title
		icon
		layer
		activate
		subItems {
			title
			icon
			layer
			activate
			subItems {
				title
				icon
				layer
				activate
				description
				documentLink
				i18nKey
			}
			description
			documentLink
			i18nKey
		}
		description
		documentLink
		i18nKey
	}
}
`

func GetMenuItems(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetMenuItemsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetMenuItems",
		Query:  GetMenuItems_Operation,
	}
	var err_ error

	var data_ GetMenuItemsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetMultipleLinearIntValues.
const GetMultipleLinearIntValues_Operation = `
query GetMultipleLinearIntValues ($metric: MetricCondition!, $numOfLinear: Int!, $duration: Duration!) {
	getMultipleLinearIntValues(metric: $metric, numOfLinear: $numOfLinear, duration: $duration) {
		values {
			id
			value
			isEmptyValue
		}
	}
}
`

func GetMultipleLinearIntValues(
	ctx_ context.Context,
	client_ graphql.Client,
	metric MetricCondition,
	numOfLinear int,
	duration Duration,
) (*GetMultipleLinearIntValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetMultipleLinearIntValues",
		Query:  GetMultipleLinearIntValues_Operation,
		Variables: &__GetMultipleLinearIntValuesInput{
			Metric:      metric,
			NumOfLinear: numOfLinear,
			Duration:    duration,
		},
	}
	var err_ error

	var data_ GetMultipleLinearIntValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProcess.
const GetProcess_Operation = `
query GetProcess ($processId: ID!) {
	getProcess(processId: $processId) {
		id
		name
		serviceId
		serviceName
		instanceId
		instanceName
		agentId
		detectType
		attributes {
			name
			value
		}
		labels
	}
}
`

func GetProcess(
	ctx_ context.Context,
	client_ graphql.Client,
	processId string,
) (*GetProcessResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProcess",
		Query:  GetProcess_Operation,
		Variables: &__GetProcessInput{
			ProcessId: processId,
		},
	}
	var err_ error

	var data_ GetProcessResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProcessTopology.
const GetProcessTopology_Operation = `
query GetProcessTopology ($serviceInstanceId: ID!, $duration: Duration!) {
	getProcessTopology(serviceInstanceId: $serviceInstanceId, duration: $duration) {
		nodes {
			id
			serviceId
			serviceName
			serviceInstanceId
			serviceInstanceName
			name
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetProcessTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceInstanceId string,
	duration Duration,
) (*GetProcessTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProcessTopology",
		Query:  GetProcessTopology_Operation,
		Variables: &__GetProcessTopologyInput{
			ServiceInstanceId: serviceInstanceId,
			Duration:          duration,
		},
	}
	var err_ error

	var data_ GetProcessTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProfileTaskList.
const GetProfileTaskList_Operation = `
query GetProfileTaskList ($serviceId: ID, $endpointName: String) {
	getProfileTaskList(serviceId: $serviceId, endpointName: $endpointName) {
		id
		serviceId
		serviceName
		endpointName
		startTime
		duration
		minDurationThreshold
		dumpPeriod
		maxSamplingCount
		logs {
			id
			instanceId
			instanceName
			operationType
			operationTime
		}
	}
}
`

func GetProfileTaskList(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	endpointName string,
) (*GetProfileTaskListResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProfileTaskList",
		Query:  GetProfileTaskList_Operation,
		Variables: &__GetProfileTaskListInput{
			ServiceId:    serviceId,
			EndpointName: endpointName,
		},
	}
	var err_ error

	var data_ GetProfileTaskListResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProfileTaskLogs.
const GetProfileTaskLogs_Operation = `
query GetProfileTaskLogs ($taskID: String) {
	getProfileTaskLogs(taskID: $taskID) {
		id
		instanceId
		instanceName
		operationType
		operationTime
	}
}
`

func GetProfileTaskLogs(
	ctx_ context.Context,
	client_ graphql.Client,
	taskID string,
) (*GetProfileTaskLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProfileTaskLogs",
		Query:  GetProfileTaskLogs_Operation,
		Variables: &__GetProfileTaskLogsInput{
			TaskID: taskID,
		},
	}
	var err_ error

	var data_ GetProfileTaskLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetProfileTaskSegments.
const GetProfileTaskSegments_Operation = `
query GetProfileTaskSegments ($taskID: ID!) {
	getProfileTaskSegments(taskID: $taskID) {
		traceId
		instanceId
		instanceName
		endpointNames
		duration
		start
		spans {
			spanId
			parentSpanId
			segmentId
			refs {
				traceId
				parentSegmentId
				parentSpanId
				type
			}
			serviceCode
			serviceInstanceName
			startTime
			endTime
			endpointName
			type
			peer
			component
			isError
			layer
			tags {
				key
				value
			}
			logs {
				time
				data {
					key
					value
				}
			}
			profiled
		}
	}
}
`

func GetProfileTaskSegments(
	ctx_ context.Context,
	client_ graphql.Client,
	taskID string,
) (*GetProfileTaskSegmentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetProfileTaskSegments",
		Query:  GetProfileTaskSegments_Operation,
		Variables: &__GetProfileTaskSegmentsInput{
			TaskID: taskID,
		},
	}
	var err_ error

	var data_ GetProfileTaskSegmentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetSegmentsProfileAnalyze.
const GetSegmentsProfileAnalyze_Operation = `
query GetSegmentsProfileAnalyze ($queries: [SegmentProfileAnalyzeQuery!]!) {
	getSegmentsProfileAnalyze(queries: $queries) {
		tip
		trees {
			elements {
				id
				parentId
				codeSignature
				duration
				durationChildExcluded
				count
			}
		}
	}
}
`

func GetSegmentsProfileAnalyze(
	ctx_ context.Context,
	client_ graphql.Client,
	queries []SegmentProfileAnalyzeQuery,
) (*GetSegmentsProfileAnalyzeResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetSegmentsProfileAnalyze",
		Query:  GetSegmentsProfileAnalyze_Operation,
		Variables: &__GetSegmentsProfileAnalyzeInput{
			Queries: queries,
		},
	}
	var err_ error

	var data_ GetSegmentsProfileAnalyzeResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetService.
const GetService_Operation = `
query GetService ($serviceId: String!) {
	getService(serviceId: $serviceId) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func GetService(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
) (*GetServiceResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetService",
		Query:  GetService_Operation,
		Variables: &__GetServiceInput{
			ServiceId: serviceId,
		},
	}
	var err_ error

	var data_ GetServiceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServiceInstanceTopN.
const GetServiceInstanceTopN_Operation = `
query GetServiceInstanceTopN ($serviceId: ID!, $name: String!, $topN: Int!, $duration: Duration!, $order: Order!) {
	getServiceInstanceTopN(serviceId: $serviceId, name: $name, topN: $topN, duration: $duration, order: $order) {
		name
		id
		value
	}
}
`

func GetServiceInstanceTopN(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	name string,
	topN int,
	duration Duration,
	order Order,
) (*GetServiceInstanceTopNResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServiceInstanceTopN",
		Query:  GetServiceInstanceTopN_Operation,
		Variables: &__GetServiceInstanceTopNInput{
			ServiceId: serviceId,
			Name:      name,
			TopN:      topN,
			Duration:  duration,
			Order:     order,
		},
	}
	var err_ error

	var data_ GetServiceInstanceTopNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServiceInstanceTopology.
const GetServiceInstanceTopology_Operation = `
query GetServiceInstanceTopology ($clientServiceId: ID!, $serverServiceId: ID!, $duration: Duration!) {
	getServiceInstanceTopology(clientServiceId: $clientServiceId, serverServiceId: $serverServiceId, duration: $duration) {
		nodes {
			id
			name
			serviceId
			serviceName
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetServiceInstanceTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	clientServiceId string,
	serverServiceId string,
	duration Duration,
) (*GetServiceInstanceTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServiceInstanceTopology",
		Query:  GetServiceInstanceTopology_Operation,
		Variables: &__GetServiceInstanceTopologyInput{
			ClientServiceId: clientServiceId,
			ServerServiceId: serverServiceId,
			Duration:        duration,
		},
	}
	var err_ error

	var data_ GetServiceInstanceTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServiceInstances.
const GetServiceInstances_Operation = `
query GetServiceInstances ($duration: Duration!, $serviceId: ID!) {
	getServiceInstances(duration: $duration, serviceId: $serviceId) {
		id
		name
		attributes {
			name
			value
		}
		language
		instanceUUID
	}
}
`

func GetServiceInstances(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	serviceId string,
) (*GetServiceInstancesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServiceInstances",
		Query:  GetServiceInstances_Operation,
		Variables: &__GetServiceInstancesInput{
			Duration:  duration,
			ServiceId: serviceId,
		},
	}
	var err_ error

	var data_ GetServiceInstancesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServiceTopN.
const GetServiceTopN_Operation = `
query GetServiceTopN ($name: String!, $topN: Int!, $duration: Duration!, $order: Order!) {
	getServiceTopN(name: $name, topN: $topN, duration: $duration, order: $order) {
		name
		id
		value
	}
}
`

func GetServiceTopN(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
	topN int,
	duration Duration,
	order Order,
) (*GetServiceTopNResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServiceTopN",
		Query:  GetServiceTopN_Operation,
		Variables: &__GetServiceTopNInput{
			Name:     name,
			TopN:     topN,
			Duration: duration,
			Order:    order,
		},
	}
	var err_ error

	var data_ GetServiceTopNResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServiceTopology.
const GetServiceTopology_Operation = `
query GetServiceTopology ($serviceId: ID!, $duration: Duration!) {
	getServiceTopology(serviceId: $serviceId, duration: $duration) {
		nodes {
			id
			name
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetServiceTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	duration Duration,
) (*GetServiceTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServiceTopology",
		Query:  GetServiceTopology_Operation,
		Variables: &__GetServiceTopologyInput{
			ServiceId: serviceId,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ GetServiceTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetServicesTopology.
const GetServicesTopology_Operation = `
query GetServicesTopology ($serviceIds: [ID!]!, $duration: Duration!) {
	getServicesTopology(serviceIds: $serviceIds, duration: $duration) {
		nodes {
			id
			name
			type
			isReal
		}
		calls {
			source
			sourceComponents
			target
			targetComponents
			id
			detectPoints
		}
	}
}
`

func GetServicesTopology(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceIds []string,
	duration Duration,
) (*GetServicesTopologyResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetServicesTopology",
		Query:  GetServicesTopology_Operation,
		Variables: &__GetServicesTopologyInput{
			ServiceIds: serviceIds,
			Duration:   duration,
		},
	}
	var err_ error

	var data_ GetServicesTopologyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetSubsetOfMultipleLinearIntValues.
const GetSubsetOfMultipleLinearIntValues_Operation = `
query GetSubsetOfMultipleLinearIntValues ($metric: MetricCondition!, $linearIndex: [Int!]!, $duration: Duration!) {
	getSubsetOfMultipleLinearIntValues(metric: $metric, linearIndex: $linearIndex, duration: $duration) {
		values {
			id
			value
			isEmptyValue
		}
	}
}
`

func GetSubsetOfMultipleLinearIntValues(
	ctx_ context.Context,
	client_ graphql.Client,
	metric MetricCondition,
	linearIndex []int,
	duration Duration,
) (*GetSubsetOfMultipleLinearIntValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetSubsetOfMultipleLinearIntValues",
		Query:  GetSubsetOfMultipleLinearIntValues_Operation,
		Variables: &__GetSubsetOfMultipleLinearIntValuesInput{
			Metric:      metric,
			LinearIndex: linearIndex,
			Duration:    duration,
		},
	}
	var err_ error

	var data_ GetSubsetOfMultipleLinearIntValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetTemplate.
const GetTemplate_Operation = `
query GetTemplate ($id: String!) {
	getTemplate(id: $id) {
		id
		configuration
	}
}
`

func GetTemplate(
	ctx_ context.Context,
	client_ graphql.Client,
	id string,
) (*GetTemplateResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetTemplate",
		Query:  GetTemplate_Operation,
		Variables: &__GetTemplateInput{
			Id: id,
		},
	}
	var err_ error

	var data_ GetTemplateResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetThermodynamic.
const GetThermodynamic_Operation = `
query GetThermodynamic ($metric: MetricCondition!, $duration: Duration!) {
	getThermodynamic(metric: $metric, duration: $duration) {
		nodes
		axisYStep
	}
}
`

func GetThermodynamic(
	ctx_ context.Context,
	client_ graphql.Client,
	metric MetricCondition,
	duration Duration,
) (*GetThermodynamicResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetThermodynamic",
		Query:  GetThermodynamic_Operation,
		Variables: &__GetThermodynamicInput{
			Metric:   metric,
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetThermodynamicResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetTimeInfo.
const GetTimeInfo_Operation = `
query GetTimeInfo {
	getTimeInfo {
		timezone
		currentTimestamp
	}
}
`

func GetTimeInfo(
	ctx_ context.Context,
	client_ graphql.Client,
) (*GetTimeInfoResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetTimeInfo",
		Query:  GetTimeInfo_Operation,
	}
	var err_ error

	var data_ GetTimeInfoResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetTopNRecords.
const GetTopNRecords_Operation = `
query GetTopNRecords ($condition: TopNRecordsCondition!) {
	getTopNRecords(condition: $condition) {
		statement
		latency
		traceId
	}
}
`

func GetTopNRecords(
	ctx_ context.Context,
	client_ graphql.Client,
	condition TopNRecordsCondition,
) (*GetTopNRecordsResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetTopNRecords",
		Query:  GetTopNRecords_Operation,
		Variables: &__GetTopNRecordsInput{
			Condition: condition,
		},
	}
	var err_ error

	var data_ GetTopNRecordsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by GetValues.
const GetValues_Operation = `
query GetValues ($metric: BatchMetricConditions!, $duration: Duration!) {
	getValues(metric: $metric, duration: $duration) {
		values {
			id
			value
			isEmptyValue
		}
	}
}
`

func GetValues(
	ctx_ context.Context,
	client_ graphql.Client,
	metric BatchMetricConditions,
	duration Duration,
) (*GetValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "GetValues",
		Query:  GetValues_Operation,
		Variables: &__GetValuesInput{
			Metric:   metric,
			Duration: duration,
		},
	}
	var err_ error

	var data_ GetValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by KeepEBPFNetworkProfiling.
const KeepEBPFNetworkProfiling_Operation = `
mutation KeepEBPFNetworkProfiling ($taskId: ID!) {
	keepEBPFNetworkProfiling(taskId: $taskId) {
		status
		errorReason
	}
}
`

func KeepEBPFNetworkProfiling(
	ctx_ context.Context,
	client_ graphql.Client,
	taskId string,
) (*KeepEBPFNetworkProfilingResponse, error) {
	req_ := &graphql.Request{
		OpName: "KeepEBPFNetworkProfiling",
		Query:  KeepEBPFNetworkProfiling_Operation,
		Variables: &__KeepEBPFNetworkProfilingInput{
			TaskId: taskId,
		},
	}
	var err_ error

	var data_ KeepEBPFNetworkProfilingResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListInstances.
const ListInstances_Operation = `
query ListInstances ($duration: Duration!, $serviceId: ID!) {
	listInstances(duration: $duration, serviceId: $serviceId) {
		id
		name
		attributes {
			name
			value
		}
		language
		instanceUUID
	}
}
`

func ListInstances(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	serviceId string,
) (*ListInstancesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListInstances",
		Query:  ListInstances_Operation,
		Variables: &__ListInstancesInput{
			Duration:  duration,
			ServiceId: serviceId,
		},
	}
	var err_ error

	var data_ ListInstancesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListLayers.
const ListLayers_Operation = `
query ListLayers {
	listLayers
}
`

func ListLayers(
	ctx_ context.Context,
	client_ graphql.Client,
) (*ListLayersResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListLayers",
		Query:  ListLayers_Operation,
	}
	var err_ error

	var data_ ListLayersResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListMetrics.
const ListMetrics_Operation = `
query ListMetrics ($regex: String) {
	listMetrics(regex: $regex) {
		name
		type
		catalog
	}
}
`

func ListMetrics(
	ctx_ context.Context,
	client_ graphql.Client,
	regex string,
) (*ListMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListMetrics",
		Query:  ListMetrics_Operation,
		Variables: &__ListMetricsInput{
			Regex: regex,
		},
	}
	var err_ error

	var data_ ListMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListProcesses.
const ListProcesses_Operation = `
query ListProcesses ($duration: Duration!, $instanceId: ID!) {
	listProcesses(duration: $duration, instanceId: $instanceId) {
		id
		name
		serviceId
		serviceName
		instanceId
		instanceName
		agentId
		detectType
		attributes {
			name
			value
		}
		labels
	}
}
`

func ListProcesses(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	instanceId string,
) (*ListProcessesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListProcesses",
		Query:  ListProcesses_Operation,
		Variables: &__ListProcessesInput{
			Duration:   duration,
			InstanceId: instanceId,
		},
	}
	var err_ error

	var data_ ListProcessesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ListServices.
const ListServices_Operation = `
query ListServices ($layer: String) {
	listServices(layer: $layer) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func ListServices(
	ctx_ context.Context,
	client_ graphql.Client,
	layer string,
) (*ListServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ListServices",
		Query:  ListServices_Operation,
		Variables: &__ListServicesInput{
			Layer: layer,
		},
	}
	var err_ error

	var data_ ListServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryBasicTraces.
const QueryBasicTraces_Operation = `
query QueryBasicTraces ($condition: TraceQueryCondition) {
	queryBasicTraces(condition: $condition) {
		traces {
			segmentId
			endpointNames
			duration
			start
			isError
			traceIds
		}
	}
}
`

func QueryBasicTraces(
	ctx_ context.Context,
	client_ graphql.Client,
	condition TraceQueryCondition,
) (*QueryBasicTracesResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryBasicTraces",
		Query:  QueryBasicTraces_Operation,
		Variables: &__QueryBasicTracesInput{
			Condition: condition,
		},
	}
	var err_ error

	var data_ QueryBasicTracesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryBrowserErrorLogs.
const QueryBrowserErrorLogs_Operation = `
query QueryBrowserErrorLogs ($condition: BrowserErrorLogQueryCondition) {
	queryBrowserErrorLogs(condition: $condition) {
		logs {
			service
			serviceVersion
			time
			pagePath
			category
			grade
			message
			line
			col
			stack
			errorUrl
			firstReportedError
		}
	}
}
`

func QueryBrowserErrorLogs(
	ctx_ context.Context,
	client_ graphql.Client,
	condition BrowserErrorLogQueryCondition,
) (*QueryBrowserErrorLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryBrowserErrorLogs",
		Query:  QueryBrowserErrorLogs_Operation,
		Variables: &__QueryBrowserErrorLogsInput{
			Condition: condition,
		},
	}
	var err_ error

	var data_ QueryBrowserErrorLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryContinuousProfilingMonitoringInstances.
const QueryContinuousProfilingMonitoringInstances_Operation = `
query QueryContinuousProfilingMonitoringInstances ($serviceId: ID!, $target: ContinuousProfilingTargetType!) {
	queryContinuousProfilingMonitoringInstances(serviceId: $serviceId, target: $target) {
		id
		name
		attributes {
			name
			value
		}
		triggeredCount
		lastTriggerTimestamp
		processes {
			id
			name
			detectType
			labels
			triggeredCount
			lastTriggerTimestamp
		}
	}
}
`

func QueryContinuousProfilingMonitoringInstances(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	target ContinuousProfilingTargetType,
) (*QueryContinuousProfilingMonitoringInstancesResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryContinuousProfilingMonitoringInstances",
		Query:  QueryContinuousProfilingMonitoringInstances_Operation,
		Variables: &__QueryContinuousProfilingMonitoringInstancesInput{
			ServiceId: serviceId,
			Target:    target,
		},
	}
	var err_ error

	var data_ QueryContinuousProfilingMonitoringInstancesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryContinuousProfilingServiceTargets.
const QueryContinuousProfilingServiceTargets_Operation = `
query QueryContinuousProfilingServiceTargets ($serviceId: ID!) {
	queryContinuousProfilingServiceTargets(serviceId: $serviceId) {
		type
		checkItems {
			type
			threshold
			period
			count
			uriList
			uriRegex
		}
		triggeredCount
		lastTriggerTimestamp
	}
}
`

func QueryContinuousProfilingServiceTargets(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
) (*QueryContinuousProfilingServiceTargetsResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryContinuousProfilingServiceTargets",
		Query:  QueryContinuousProfilingServiceTargets_Operation,
		Variables: &__QueryContinuousProfilingServiceTargetsInput{
			ServiceId: serviceId,
		},
	}
	var err_ error

	var data_ QueryContinuousProfilingServiceTargetsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryEBPFProfilingSchedules.
const QueryEBPFProfilingSchedules_Operation = `
query QueryEBPFProfilingSchedules ($taskId: ID!) {
	queryEBPFProfilingSchedules(taskId: $taskId) {
		scheduleId
		taskId
		process {
			id
			name
			serviceId
			serviceName
			instanceId
			instanceName
			agentId
			detectType
			attributes {
				name
				value
			}
			labels
		}
		startTime
		endTime
	}
}
`

func QueryEBPFProfilingSchedules(
	ctx_ context.Context,
	client_ graphql.Client,
	taskId string,
) (*QueryEBPFProfilingSchedulesResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryEBPFProfilingSchedules",
		Query:  QueryEBPFProfilingSchedules_Operation,
		Variables: &__QueryEBPFProfilingSchedulesInput{
			TaskId: taskId,
		},
	}
	var err_ error

	var data_ QueryEBPFProfilingSchedulesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryEBPFProfilingTasks.
const QueryEBPFProfilingTasks_Operation = `
query QueryEBPFProfilingTasks ($serviceId: ID, $serviceInstanceId: ID, $targets: [EBPFProfilingTargetType!], $triggerType: EBPFProfilingTriggerType, $duration: Duration) {
	queryEBPFProfilingTasks(serviceId: $serviceId, serviceInstanceId: $serviceInstanceId, targets: $targets, triggerType: $triggerType, duration: $duration) {
		taskId
		serviceId
		serviceName
		serviceInstanceId
		serviceInstanceName
		processLabels
		processId
		processName
		taskStartTime
		triggerType
		fixedTriggerDuration
		continuousProfilingCauses {
			type
			singleValue {
				threshold
				current
			}
			uri {
				uriRegex
				uriPath
				threshold
				current
			}
			message
		}
		targetType
		createTime
	}
}
`

func QueryEBPFProfilingTasks(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
	serviceInstanceId string,
	targets []EBPFProfilingTargetType,
	triggerType EBPFProfilingTriggerType,
	duration Duration,
) (*QueryEBPFProfilingTasksResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryEBPFProfilingTasks",
		Query:  QueryEBPFProfilingTasks_Operation,
		Variables: &__QueryEBPFProfilingTasksInput{
			ServiceId:         serviceId,
			ServiceInstanceId: serviceInstanceId,
			Targets:           targets,
			TriggerType:       triggerType,
			Duration:          duration,
		},
	}
	var err_ error

	var data_ QueryEBPFProfilingTasksResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryEvents.
const QueryEvents_Operation = `
query QueryEvents ($condition: EventQueryCondition) {
	queryEvents(condition: $condition) {
		events {
			uuid
			source {
				service
				serviceInstance
				endpoint
			}
			name
			type
			message
			parameters {
				key
				value
			}
			startTime
			endTime
			layer
		}
	}
}
`

func QueryEvents(
	ctx_ context.Context,
	client_ graphql.Client,
	condition EventQueryCondition,
) (*QueryEventsResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryEvents",
		Query:  QueryEvents_Operation,
		Variables: &__QueryEventsInput{
			Condition: condition,
		},
	}
	var err_ error

	var data_ QueryEventsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryLogTagAutocompleteKeys.
const QueryLogTagAutocompleteKeys_Operation = `
query QueryLogTagAutocompleteKeys ($duration: Duration!) {
	queryLogTagAutocompleteKeys(duration: $duration)
}
`

func QueryLogTagAutocompleteKeys(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*QueryLogTagAutocompleteKeysResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryLogTagAutocompleteKeys",
		Query:  QueryLogTagAutocompleteKeys_Operation,
		Variables: &__QueryLogTagAutocompleteKeysInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ QueryLogTagAutocompleteKeysResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryLogTagAutocompleteValues.
const QueryLogTagAutocompleteValues_Operation = `
query QueryLogTagAutocompleteValues ($tagKey: String!, $duration: Duration!) {
	queryLogTagAutocompleteValues(tagKey: $tagKey, duration: $duration)
}
`

func QueryLogTagAutocompleteValues(
	ctx_ context.Context,
	client_ graphql.Client,
	tagKey string,
	duration Duration,
) (*QueryLogTagAutocompleteValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryLogTagAutocompleteValues",
		Query:  QueryLogTagAutocompleteValues_Operation,
		Variables: &__QueryLogTagAutocompleteValuesInput{
			TagKey:   tagKey,
			Duration: duration,
		},
	}
	var err_ error

	var data_ QueryLogTagAutocompleteValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryLogs.
const QueryLogs_Operation = `
query QueryLogs ($condition: LogQueryCondition) {
	queryLogs(condition: $condition) {
		errorReason
		logs {
			serviceName
			serviceId
			serviceInstanceName
			serviceInstanceId
			endpointName
			endpointId
			traceId
			timestamp
			contentType
			content
			tags {
				key
				value
			}
		}
	}
}
`

func QueryLogs(
	ctx_ context.Context,
	client_ graphql.Client,
	condition LogQueryCondition,
) (*QueryLogsResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryLogs",
		Query:  QueryLogs_Operation,
		Variables: &__QueryLogsInput{
			Condition: condition,
		},
	}
	var err_ error

	var data_ QueryLogsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryPrepareCreateEBPFProfilingTaskData.
const QueryPrepareCreateEBPFProfilingTaskData_Operation = `
query QueryPrepareCreateEBPFProfilingTaskData ($serviceId: ID!) {
	queryPrepareCreateEBPFProfilingTaskData(serviceId: $serviceId) {
		couldProfiling
		processLabels
	}
}
`

func QueryPrepareCreateEBPFProfilingTaskData(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceId string,
) (*QueryPrepareCreateEBPFProfilingTaskDataResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryPrepareCreateEBPFProfilingTaskData",
		Query:  QueryPrepareCreateEBPFProfilingTaskData_Operation,
		Variables: &__QueryPrepareCreateEBPFProfilingTaskDataInput{
			ServiceId: serviceId,
		},
	}
	var err_ error

	var data_ QueryPrepareCreateEBPFProfilingTaskDataResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryTrace.
const QueryTrace_Operation = `
query QueryTrace ($traceId: ID!) {
	queryTrace(traceId: $traceId) {
		spans {
			traceId
			segmentId
			spanId
			parentSpanId
			refs {
				traceId
				parentSegmentId
				parentSpanId
				type
			}
			serviceCode
			serviceInstanceName
			startTime
			endTime
			endpointName
			type
			peer
			component
			isError
			layer
			tags {
				key
				value
			}
			logs {
				time
				data {
					key
					value
				}
			}
			attachedEvents {
				startTime {
					seconds
					nanos
				}
				event
				endTime {
					seconds
					nanos
				}
				tags {
					key
					value
				}
				summary {
					key
					value
				}
			}
		}
	}
}
`

func QueryTrace(
	ctx_ context.Context,
	client_ graphql.Client,
	traceId string,
) (*QueryTraceResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryTrace",
		Query:  QueryTrace_Operation,
		Variables: &__QueryTraceInput{
			TraceId: traceId,
		},
	}
	var err_ error

	var data_ QueryTraceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryTraceTagAutocompleteKeys.
const QueryTraceTagAutocompleteKeys_Operation = `
query QueryTraceTagAutocompleteKeys ($duration: Duration!) {
	queryTraceTagAutocompleteKeys(duration: $duration)
}
`

func QueryTraceTagAutocompleteKeys(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
) (*QueryTraceTagAutocompleteKeysResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryTraceTagAutocompleteKeys",
		Query:  QueryTraceTagAutocompleteKeys_Operation,
		Variables: &__QueryTraceTagAutocompleteKeysInput{
			Duration: duration,
		},
	}
	var err_ error

	var data_ QueryTraceTagAutocompleteKeysResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by QueryTraceTagAutocompleteValues.
const QueryTraceTagAutocompleteValues_Operation = `
query QueryTraceTagAutocompleteValues ($tagKey: String!, $duration: Duration!) {
	queryTraceTagAutocompleteValues(tagKey: $tagKey, duration: $duration)
}
`

func QueryTraceTagAutocompleteValues(
	ctx_ context.Context,
	client_ graphql.Client,
	tagKey string,
	duration Duration,
) (*QueryTraceTagAutocompleteValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "QueryTraceTagAutocompleteValues",
		Query:  QueryTraceTagAutocompleteValues_Operation,
		Variables: &__QueryTraceTagAutocompleteValuesInput{
			TagKey:   tagKey,
			Duration: duration,
		},
	}
	var err_ error

	var data_ QueryTraceTagAutocompleteValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadHeatMap.
const ReadHeatMap_Operation = `
query ReadHeatMap ($condition: MetricsCondition!, $duration: Duration!) {
	readHeatMap(condition: $condition, duration: $duration) {
		values {
			id
			values
		}
		buckets {
			min
			max
		}
	}
}
`

func ReadHeatMap(
	ctx_ context.Context,
	client_ graphql.Client,
	condition MetricsCondition,
	duration Duration,
) (*ReadHeatMapResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadHeatMap",
		Query:  ReadHeatMap_Operation,
		Variables: &__ReadHeatMapInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadHeatMapResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadLabeledMetricsValues.
const ReadLabeledMetricsValues_Operation = `
query ReadLabeledMetricsValues ($condition: MetricsCondition!, $labels: [String!]!, $duration: Duration!) {
	readLabeledMetricsValues(condition: $condition, labels: $labels, duration: $duration) {
		label
		values {
			values {
				id
				value
				isEmptyValue
			}
		}
	}
}
`

func ReadLabeledMetricsValues(
	ctx_ context.Context,
	client_ graphql.Client,
	condition MetricsCondition,
	labels []string,
	duration Duration,
) (*ReadLabeledMetricsValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadLabeledMetricsValues",
		Query:  ReadLabeledMetricsValues_Operation,
		Variables: &__ReadLabeledMetricsValuesInput{
			Condition: condition,
			Labels:    labels,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadLabeledMetricsValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadMetricsValue.
const ReadMetricsValue_Operation = `
query ReadMetricsValue ($condition: MetricsCondition!, $duration: Duration!) {
	readMetricsValue(condition: $condition, duration: $duration)
}
`

func ReadMetricsValue(
	ctx_ context.Context,
	client_ graphql.Client,
	condition MetricsCondition,
	duration Duration,
) (*ReadMetricsValueResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadMetricsValue",
		Query:  ReadMetricsValue_Operation,
		Variables: &__ReadMetricsValueInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadMetricsValueResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadMetricsValues.
const ReadMetricsValues_Operation = `
query ReadMetricsValues ($condition: MetricsCondition!, $duration: Duration!) {
	readMetricsValues(condition: $condition, duration: $duration) {
		label
		values {
			values {
				id
				value
				isEmptyValue
			}
		}
	}
}
`

func ReadMetricsValues(
	ctx_ context.Context,
	client_ graphql.Client,
	condition MetricsCondition,
	duration Duration,
) (*ReadMetricsValuesResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadMetricsValues",
		Query:  ReadMetricsValues_Operation,
		Variables: &__ReadMetricsValuesInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadMetricsValuesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadNullableMetricsValue.
const ReadNullableMetricsValue_Operation = `
query ReadNullableMetricsValue ($condition: MetricsCondition!, $duration: Duration!) {
	readNullableMetricsValue(condition: $condition, duration: $duration) {
		value
		isEmptyValue
	}
}
`

func ReadNullableMetricsValue(
	ctx_ context.Context,
	client_ graphql.Client,
	condition MetricsCondition,
	duration Duration,
) (*ReadNullableMetricsValueResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadNullableMetricsValue",
		Query:  ReadNullableMetricsValue_Operation,
		Variables: &__ReadNullableMetricsValueInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadNullableMetricsValueResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadRecords.
const ReadRecords_Operation = `
query ReadRecords ($condition: RecordCondition!, $duration: Duration!) {
	readRecords(condition: $condition, duration: $duration) {
		name
		id
		value
		refId
	}
}
`

func ReadRecords(
	ctx_ context.Context,
	client_ graphql.Client,
	condition RecordCondition,
	duration Duration,
) (*ReadRecordsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadRecords",
		Query:  ReadRecords_Operation,
		Variables: &__ReadRecordsInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadRecordsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by ReadSampledRecords.
const ReadSampledRecords_Operation = `
query ReadSampledRecords ($condition: TopNCondition!, $duration: Duration!) {
	readSampledRecords(condition: $condition, duration: $duration) {
		name
		id
		value
		refId
	}
}
`

func ReadSampledRecords(
	ctx_ context.Context,
	client_ graphql.Client,
	condition TopNCondition,
	duration Duration,
) (*ReadSampledRecordsResponse, error) {
	req_ := &graphql.Request{
		OpName: "ReadSampledRecords",
		Query:  ReadSampledRecords_Operation,
		Variables: &__ReadSampledRecordsInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ ReadSampledRecordsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SearchBrowserService.
const SearchBrowserService_Operation = `
query SearchBrowserService ($serviceCode: String!) {
	searchBrowserService(serviceCode: $serviceCode) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func SearchBrowserService(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceCode string,
) (*SearchBrowserServiceResponse, error) {
	req_ := &graphql.Request{
		OpName: "SearchBrowserService",
		Query:  SearchBrowserService_Operation,
		Variables: &__SearchBrowserServiceInput{
			ServiceCode: serviceCode,
		},
	}
	var err_ error

	var data_ SearchBrowserServiceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SearchBrowserServices.
const SearchBrowserServices_Operation = `
query SearchBrowserServices ($duration: Duration!, $keyword: String!) {
	searchBrowserServices(duration: $duration, keyword: $keyword) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func SearchBrowserServices(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	keyword string,
) (*SearchBrowserServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "SearchBrowserServices",
		Query:  SearchBrowserServices_Operation,
		Variables: &__SearchBrowserServicesInput{
			Duration: duration,
			Keyword:  keyword,
		},
	}
	var err_ error

	var data_ SearchBrowserServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SearchEndpoint.
const SearchEndpoint_Operation = `
query SearchEndpoint ($keyword: String!, $serviceId: ID!, $limit: Int!) {
	searchEndpoint(keyword: $keyword, serviceId: $serviceId, limit: $limit) {
		id
		name
	}
}
`

func SearchEndpoint(
	ctx_ context.Context,
	client_ graphql.Client,
	keyword string,
	serviceId string,
	limit int,
) (*SearchEndpointResponse, error) {
	req_ := &graphql.Request{
		OpName: "SearchEndpoint",
		Query:  SearchEndpoint_Operation,
		Variables: &__SearchEndpointInput{
			Keyword:   keyword,
			ServiceId: serviceId,
			Limit:     limit,
		},
	}
	var err_ error

	var data_ SearchEndpointResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SearchService.
const SearchService_Operation = `
query SearchService ($serviceCode: String!) {
	searchService(serviceCode: $serviceCode) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func SearchService(
	ctx_ context.Context,
	client_ graphql.Client,
	serviceCode string,
) (*SearchServiceResponse, error) {
	req_ := &graphql.Request{
		OpName: "SearchService",
		Query:  SearchService_Operation,
		Variables: &__SearchServiceInput{
			ServiceCode: serviceCode,
		},
	}
	var err_ error

	var data_ SearchServiceResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SearchServices.
const SearchServices_Operation = `
query SearchServices ($duration: Duration!, $keyword: String!) {
	searchServices(duration: $duration, keyword: $keyword) {
		id
		name
		group
		shortName
		layers
		normal
	}
}
`

func SearchServices(
	ctx_ context.Context,
	client_ graphql.Client,
	duration Duration,
	keyword string,
) (*SearchServicesResponse, error) {
	req_ := &graphql.Request{
		OpName: "SearchServices",
		Query:  SearchServices_Operation,
		Variables: &__SearchServicesInput{
			Duration: duration,
			Keyword:  keyword,
		},
	}
	var err_ error

	var data_ SearchServicesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SetContinuousProfilingPolicy.
const SetContinuousProfilingPolicy_Operation = `
mutation SetContinuousProfilingPolicy ($request: ContinuousProfilingPolicyCreation!) {
	setContinuousProfilingPolicy(request: $request) {
		status
		errorReason
	}
}
`

func SetContinuousProfilingPolicy(
	ctx_ context.Context,
	client_ graphql.Client,
	request ContinuousProfilingPolicyCreation,
) (*SetContinuousProfilingPolicyResponse, error) {
	req_ := &graphql.Request{
		OpName: "SetContinuousProfilingPolicy",
		Query:  SetContinuousProfilingPolicy_Operation,
		Variables: &__SetContinuousProfilingPolicyInput{
			Request: request,
		},
	}
	var err_ error

	var data_ SetContinuousProfilingPolicyResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SortMetrics.
const SortMetrics_Operation = `
query SortMetrics ($condition: TopNCondition!, $duration: Duration!) {
	sortMetrics(condition: $condition, duration: $duration) {
		name
		id
		value
		refId
	}
}
`

func SortMetrics(
	ctx_ context.Context,
	client_ graphql.Client,
	condition TopNCondition,
	duration Duration,
) (*SortMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "SortMetrics",
		Query:  SortMetrics_Operation,
		Variables: &__SortMetricsInput{
			Condition: condition,
			Duration:  duration,
		},
	}
	var err_ error

	var data_ SortMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by SupportQueryLogsByKeywords.
const SupportQueryLogsByKeywords_Operation = `
query SupportQueryLogsByKeywords {
	supportQueryLogsByKeywords
}
`

func SupportQueryLogsByKeywords(
	ctx_ context.Context,
	client_ graphql.Client,
) (*SupportQueryLogsByKeywordsResponse, error) {
	req_ := &graphql.Request{
		OpName: "SupportQueryLogsByKeywords",
		Query:  SupportQueryLogsByKeywords_Operation,
	}
	var err_ error

	var data_ SupportQueryLogsByKeywordsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Test.
const Test_Operation = `
query Test ($requests: LogTestRequest!) {
	test(requests: $requests) {
		log {
			serviceName
			serviceId
			serviceInstanceName
			serviceInstanceId
			endpointName
			endpointId
			traceId
			timestamp
			contentType
			content
			tags {
				key
				value
			}
		}
		metrics {
			name
			tags {
				key
				value
			}
			value
			timestamp
		}
	}
}
`

func Test(
	ctx_ context.Context,
	client_ graphql.Client,
	requests LogTestRequest,
) (*TestResponse, error) {
	req_ := &graphql.Request{
		OpName: "Test",
		Query:  Test_Operation,
		Variables: &__TestInput{
			Requests: requests,
		},
	}
	var err_ error

	var data_ TestResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by TypeOfMetrics.
const TypeOfMetrics_Operation = `
query TypeOfMetrics ($name: String!) {
	typeOfMetrics(name: $name)
}
`

func TypeOfMetrics(
	ctx_ context.Context,
	client_ graphql.Client,
	name string,
) (*TypeOfMetricsResponse, error) {
	req_ := &graphql.Request{
		OpName: "TypeOfMetrics",
		Query:  TypeOfMetrics_Operation,
		Variables: &__TypeOfMetricsInput{
			Name: name,
		},
	}
	var err_ error

	var data_ TypeOfMetricsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by Version.
const Version_Operation = `
query Version {
	version
}
`

func Version(
	ctx_ context.Context,
	client_ graphql.Client,
) (*VersionResponse, error) {
	req_ := &graphql.Request{
		OpName: "Version",
		Query:  Version_Operation,
	}
	var err_ error

	var data_ VersionResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
